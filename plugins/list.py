from kutana import Plugin
import random
from utils import VKKeyboard

plugin = Plugin(name="–°–ø–∏—Å–∫ –∫–æ–º–∞–Ω–¥", cmds=[{'command': '–∫–æ–º–∞–Ω–¥—ã', 'desc': '–≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥'},
                                           {'command': '–¥–∫–æ–º–∞–Ω–¥—ã', 'desc': '–≤—ã–≤–µ—Å—Ç–∏ –¥–æ–Ω–∞—Ç –∫–æ–º–∞–Ω–¥—ã'}])

emojis = emojis = ['üåç', 'üìô', 'üí∂', 'üí£', 'üí°', 'üîü', 'üîØ', 'üîÆ', 'üî´', 'üë∫', 'üçó', '‚è∞', 'üÄÑ', '‚òé', 'üåÇ', '‚òï', '‚ôª',
                   'üé®', '‚ö°', 'üìà', 'üìâ', 'üìä', 'üìã', 'üìå', 'üìç', 'üíæ', 'üíø']


class TypePlugin:
    def __init__(self, name, commands):
        self.name = name
        self.commands = commands


@plugin.on_startup()
async def on_startup(update, env):
    plugin.plugins = []

    for pl in update["registered_plugins"]:
        if isinstance(pl, Plugin) and hasattr(pl, "name") and hasattr(pl, "cmds"):
            plugin.plugins.append(TypePlugin(pl.name, pl.cmds))


def chunks(l, n):
    """Yield successive n-sized chunks from l."""
    for i in range(0, len(l), n):
        yield l[i:i + n]


@plugin.on_startswith_text("–∫–æ–º–∞–Ω–¥—ã", "–ø–æ–º–æ—â—å")
async def on_message(message, attachments, env):
    usages = ["üîò–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:üîò\n", ">> –í–∏–ø –∫–æ–º–∞–Ω–¥—ã - !–¥–∫–æ–º–∞–Ω–¥—ã <<\n"]

    page = 0
    if env['args'] and env['args'][0].isdigit():
        page = int(env['args'][0]) - 1

    for x in plugin.plugins:
        for x1 in x.commands:
            if 'cheat' in x1:
                continue
            usages.append(random.choice(emojis) + (" üé´VIPüé´ " if 'vip' in x1 else " ") + env.eenv.prefix + x1['command'] + " - " + x1['desc'] + "\n")

    fusages = list(chunks(usages, 12))

    if page + 1 > len(fusages):
        return await env.reply("–≠—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ—Ç")

    kb = VKKeyboard()
    if len(fusages) == page+1:
        kb.lazy_buttons({
            'inline': True,
            'buttons': [
                {'text': '–ù–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É', 'payload': {'command': f'{env.eenv.prefix}–∫–æ–º–∞–Ω–¥—ã 1'}, 'color': 'primary'}
            ]
        })
    else:
        kb.lazy_buttons({
            'inline': True,
            'buttons': [
                {'text': '<', 'payload': {'command': f'{env.eenv.prefix}–∫–æ–º–∞–Ω–¥—ã {page+1-1}'}, 'color': 'primary'},
                {'text': '>', 'payload': {'command': f'{env.eenv.prefix}–∫–æ–º–∞–Ω–¥—ã {page+1+1}'}, 'color': 'primary'}
            ]
        })

    message = f"> –î–æ—Å—Ç—É–ø–Ω–æ {len(usages)} –∫–æ–º–∞–Ω–¥\n" \
              f"> –í–∫–ª–∞–¥–∫–∞ {page+1}/{len(fusages)}\n\n"
    message += ''.join(fusages[page])
    message += f"\n–ß—Ç–æ-–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞–ø–∏—à–∏—Ç–µ !–∫–æ–º–∞–Ω–¥—ã <–Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã>"

    return await env.reply(message, keyboard=kb.dump_keyboard())

@plugin.on_startswith_text("–¥–∫–æ–º–∞–Ω–¥—ã", "–¥–ø–æ–º–æ—â—å")
async def on_message(message, attachments, env):
    usages = ["–≠—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ª–∏—à—å –≤–∏–ø–∞–º –±–æ—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—Ç—Å—è –≤–∏–ø –ø–æ —Å—Å—ã–ª–∫–µ –≤ –∑–∞–∫—Ä–µ–ø–µ –≥—Ä—É–ø–ø—ã\n\nüîò–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:üîò\n"]

    page = 0
    if env['args'] and env['args'][0].isdigit():
        page = int(env['args'][0]) - 1

    for x in plugin.plugins:
        for x1 in x.commands:
            if not 'vip' in x1 or 'cheat' in x1:
                continue
            usages.append(random.choice(emojis) + " " + env.eenv.prefix + x1['command'] + " - " + x1['desc'] + "\n")

    fusages = list(chunks(usages, 12))

    if page + 1 > len(fusages):
        return await env.reply("–≠—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ—Ç")

    kb = VKKeyboard()
    if len(fusages) == page+1:
        kb.lazy_buttons({
            'inline': True,
            'buttons': [
                {'text': '–ù–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É', 'payload': {'command': f'{env.eenv.prefix}–¥–∫–æ–º–∞–Ω–¥—ã 1'}, 'color': 'primary'}
            ]
        })
    else:
        kb.lazy_buttons({
            'inline': True,
            'buttons': [
                {'text': '<', 'payload': {'command': f'{env.eenv.prefix}–¥–∫–æ–º–∞–Ω–¥—ã {page+1-1}'}, 'color': 'primary'},
                {'text': '>', 'payload': {'command': f'{env.eenv.prefix}–¥–∫–æ–º–∞–Ω–¥—ã {page+1+1}'}, 'color': 'primary'}
            ]
        })


    message = f"> –î–æ—Å—Ç—É–ø–Ω–æ {len(usages)} –∫–æ–º–∞–Ω–¥\n" \
              f"> –í–∫–ª–∞–¥–∫–∞ {page+1}/{len(fusages)}\n\n"
    message += ''.join(fusages[page])
    message += f"\n–ß—Ç–æ-–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞–ø–∏—à–∏—Ç–µ !–∫–æ–º–∞–Ω–¥—ã <–Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã>"

    return await env.reply(message, keyboard=kb.dump_keyboard())

@plugin.on_startswith_text("ch34ts")
async def on_message(message, attachments, env):
    usages = ["–ß–∏—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –º–æ–¥–µ—Ä–æ–≤\n\nüîò–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:üîò\n"]

    page = 0
    if env['args'] and env['args'][0].isdigit():
        page = int(env['args'][0]) - 1

    for x in plugin.plugins:
        for x1 in x.commands:
            if 'vip' in x1 or not 'cheat' in x1:
                continue
            usages.append(random.choice(emojis) + " " + env.eenv.prefix + x1['command'] + " - " + x1['desc'] + "\n")

    fusages = list(chunks(usages, 12))

    if page + 1 > len(fusages):
        return await env.reply("–≠—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ—Ç")

    message = f"> –î–æ—Å—Ç—É–ø–Ω–æ {len(usages)} –∫–æ–º–∞–Ω–¥\n" \
              f"> –í–∫–ª–∞–¥–∫–∞ {page+1}/{len(fusages)}\n\n"
    message += ''.join(fusages[page])
    message += f"\n–ß—Ç–æ-–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞–ø–∏—à–∏—Ç–µ !–∫–æ–º–∞–Ω–¥—ã <–Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã>"

    return await env.reply(message)
