from kutana import Plugin
import datetime
import random
import re
import time
from datetime import timedelta
from database import * 
import asyncio
from utils import priviligeshelper, schedule_task, parse_user_id, parse_user_name, VKKeyboard
import utils.logs as Logs

import aiohttp

plugin = Plugin(name="Economy-v5", cmds=[
    {'command': '—ç–∫–æ –æ—Ç–Ω—è—Ç—å', 'desc': '–æ—Ç–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –¥–µ–Ω–∂–∞—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'cheat': True},
    {'command': '—ç–∫–æ —É–¥–∞–ª–∏—Ç—å', 'desc': '–æ—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'cheat': True},
    {'command': '–ø—Ä–æ—Ñ–∏–ª—å (ID)', 'desc': '–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö —Å–µ–±—è –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'},
    {'command': '—ç–∫–æ –±–∞–ª–∞–Ω—Å', 'desc': '–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞'}, 
    {'command': '—ç–∫–æ –±–∞–Ω–∫ {–±–∞–ª–∞–Ω—Å/–≤–ª–æ–∂–∏—Ç—å/—Å–Ω—è—Ç—å} {—Å—É–º–º–∞}', 'desc': '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å/—Å–Ω—è—Ç–∏–µ/–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–Ω–µ–≥ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞'}, 
    {'command': '—ç–∫–æ —Ä–µ–π—Ç–∏–Ω–≥', 'desc': '–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞'}, 
    {'command': '—ç–∫–æ –º–∞–≥–∞–∑–∏–Ω', 'desc': '–∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤'}, 
    {'command': '—ç–∫–æ –ø—Ä–æ–¥–∞—Ç—å {–ø—Ä–µ–¥–º–µ—Ç} (–∫–æ–ª-–≤–æ)', 'desc': '–ø—Ä–æ–¥–∞–∂–∞ –∏–º—É—â–µ—Å—Ç–≤–∞'}, 
#    {'command': '—ç–∫–æ —Ñ–µ—Ä–º–∞', 'desc': '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∏—Ç–∫–æ–∏–Ω-—Ñ–µ—Ä–º—ã'}, 
#    {'command': '—ç–∫–æ —Ñ–µ—Ä–º–∞ —Å–Ω—è—Ç—å {—Å—É–º–º–∞}', 'desc': '—Å–Ω—è—Ç–∏–µ –¥–µ–Ω–µ–≥ —Å –±–∏—Ç–∫–æ–∏–Ω-—Ñ–µ—Ä–º—ã'}, 
    {'command': '—ç–∫–æ –ø–µ—Ä–µ–¥–∞—Ç—å {ID} {—Å—É–º–º–∞}', 'desc': '–ø–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏'}, 
    {'command': '—ç–∫–æ —Ç–æ–ø', 'desc': '—Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è'},
    {'command': '—ç–∫–æ –±–∏—Ç–∫–æ–∏–Ω (–∫–æ–ª-–≤–æ)', 'desc': '–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ BITCOIN-–≤–∞–ª—é—Ç—ã'}, 
    {'command': '—ç–∫–æ —Ä–∞–±–æ—Ç–∞', 'desc': '—Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç'}, 
    {'command': '—ç–∫–æ —Ä–∞–±–æ—Ç–∞—Ç—å', 'desc': '–Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞–±–æ—Ç—è–≥–∏'}, 
    {'command': '—ç–∫–æ —É–≤–æ–ª–∏—Ç—å—Å—è', 'desc': '–ø–æ–∫–∏–Ω—É—Ç—å —Ä–∞–±–æ—Ç—É'}, 
    {'command': '—ç–∫–æ –±–∏–∑–Ω–µ—Å', 'desc': '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∏–∑–Ω–µ—Å–∞'}, 
    {'command': '—ç–∫–æ –±–∏–∑–Ω–µ—Å –Ω–∞–Ω—è—Ç—å {1-2} {–∫–æ–ª-–≤–æ}', 'desc':'–Ω–∞–π–º —Ä–∞–±–æ—á–∏—Ö –≤ –±–∏–∑–Ω–µ—Å'}, 
    {'command': '—ç–∫–æ –±–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å {1-2} {–∫–æ–ª-–≤–æ}', 'desc': '—Å–Ω—è—Ç–∏–µ –¥–µ–Ω–µ–≥ —Å–æ —Å—á–µ—Ç–∞ –±–∏–∑–Ω–µ—Å–∞'}, 
    {'command': '—ç–∫–æ –±–∏–∑–Ω–µ—Å —É–ª—É—á—à–∏—Ç—å {1-2}', 'desc': '—É–ª—É—á—à–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞'}, 
    {'command': '—ç–∫–æ –∫–æ–ø–∞—Ç—å {–∞–ª–º–∞–∑—ã/–∂–µ–ª–µ–∑–æ/–∑–æ–ª–æ—Ç–æ}', 'desc': '–¥–æ–±—ã—á–∞ —Ä—É–¥'}
])

@plugin.on_startup()
async def on_startup(kutana, update):
    plugin.dict = {}
    plugin.bitcoin = 0
    plugin.positive = random.choice(["üòä", "üòâ", "üòÉ", "üòã", "üòè", "üòÑ"])
    plugin.negative = random.choice(["üò©", "üò∞", "üòí", "üòî", "üò¢"])
    plugin.user_jobs = {}
    plugin.is_active = {}
    plugin.jobs_user = {}
    async with aiohttp.ClientSession() as sess:
        async with sess.get("https://blockchain.info/ru/ticker") as resp:
            res = await resp.json()
            data = res["USD"]["sell"]
            plugin.bitcoin = toFixed(data)
            plugin.full_bitcoin = data

    schedule_task(get_btc)
    return "GOON"

async def get_btc(*args, **kwargs):
    while True:
        async with aiohttp.ClientSession() as sess:
            async with sess.get("https://blockchain.info/ru/ticker") as resp:
                res = await resp.json()
                data = res["USD"]["sell"]
                plugin.bitcoin = toFixed(data)
                plugin.full_bitcoin = data

        await asyncio.sleep(900) 


def toFixed(f: float, n=0):
    a, b = str(f).split(".")
    return "{}{}{}".format(a, b[:n], "0" * (n - len(b)))


def convert_timedelta(duration):
    days, seconds = duration.days, duration.seconds
    hours = days * 24 + seconds // 3600
    minutes = (seconds % 3600) // 60
    seconds = seconds % 60
    return hours, minutes, seconds


cases = (2, 0, 1, 1, 1, 2)


def plural_form(n: int, v: (list, tuple), need_n=False, need_cases=False):
    """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ –∏ –ø—Ä–æ—Å–∫–ª–æ–Ω—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –Ω–µ–≥–æ

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    :param n: —á–∏—Å–ª–æ
    :param v: –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–ª–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–¥–ª—è 1, –¥–ª—è 2, –¥–ª—è 5)

    –ü—Ä–∏–º–µ—Ä:
    plural_form(difference.days, ("–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π"))

    :return: –ß–∏—Å–ª–æ –∏ –ø—Ä–æ—Å–∫–ª–æ–Ω—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –Ω–µ–≥–æ
    """

    return f"{n if need_n is False else ''}  {v[2 if (4 < n % 100 < 20) else cases[min(n % 10, 5)]] if need_cases is False else ''}"


def digits_recursive(nonneg):
    digits = []
    while nonneg:
        digits += [nonneg % 10]
        nonneg //= 10
    return digits[::-1] or [0]


def num_to_smile(num):
    if num <= 10:
        numbers = {
            0: "0‚É£",
            1: "1‚É£",
            2: "2‚É£",
            3: "3‚É£",
            4: "4‚É£",
            5: "5‚É£",
            6: "6‚É£",
            7: "7‚É£",
            8: "8‚É£",
            9: "9‚É£",
            10: "üîü",
        }
        return numbers[num]
    numbers = {
        0: "0‚É£.",
        1: "1‚É£",
        2: "2‚É£",
        3: "3‚É£",
        4: "4‚É£",
        5: "5‚É£",
        6: "6‚É£",
        7: "7‚É£",
        8: "8‚É£",
        9: "9‚É£",
        10: "üîü",
    }
    digits = digits_recursive(num)
    result = ""
    for i in digits:
        result += numbers[i]
    return result


def text_to_value(value, text):
    value2 = 1000
    if text == "–∫" or text == "k":
        return int(value) * int(value2)
    if text == "–∫–∫" or text == "kk":
        return int(value) * (int(value2) ** 2)
    if text == "–∫–∫–∫" or text == "kkk":
        return int(value) * (int(value2) ** 3)
    if text == "–∫–∫–∫–∫" or text == "kkkk":
        return int(value) * (int(value2) ** 4)
    if text == "–∫–∫–∫–∫–∫" or text == "kkkkk":
        return int(value) * (int(value2) ** 5)
    if text == "–∫–∫–∫–∫–∫–∫" or text == "kkkkkk":
        return int(value) * (int(value2) ** 6)
    if text == "–∫–∫–∫–∫–∫–∫–∫" or text == "kkkkkkk":
        return int(value) * (int(value2) ** 7)
    if text == "–∫–∫–∫–∫–∫–∫–∫–∫" or text == "kkkkkkkk":
        return int(value) * (int(value2) ** 8)
    return int(value)


def textify_value(value):
    avalue = abs(value)
    if (
        avalue
        >= 1_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000
    ):
        return (
            str(
                round(
                    value
                    / 1_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000,
                    2,
                )
            )
            + "*"
        )
    if avalue >= 1_000_000_000_000_000_000_000_000_000_000_000:
        return (
            str(round(value / 1_000_000_000_000_000_000_000_000_000_000_000, 2))
            + " –¥–µ—Ü."
        )
    if avalue >= 1_000_000_000_000_000_000_000_000_000_000:
        return (
            str(round(value / 1_000_000_000_000_000_000_000_000_000_000, 2)) + " –Ω–æ–Ω."
        )
    if avalue >= 1_000_000_000_000_000_000_000_000_000:
        return str(round(value / 1_000_000_000_000_000_000_000_000_000, 2)) + " –æ–∫—Ç."
    if avalue >= 1_000_000_000_000_000_000_000_000:
        return str(round(value / 1_000_000_000_000_000_000_000_000, 2)) + " —Å–ø—Ç–ª."
    if avalue >= 1_000_000_000_000_000_000_000:
        return str(round(value / 1_000_000_000_000_000_000_000, 2)) + " —Å–∫—Å—Ç."
    if avalue >= 1_000_000_000_000_000_000:
        return str(round(value / 1_000_000_000_000_000_000, 2)) + " –∫–≤–∏–Ω—Ç."
    if avalue >= 1_000_000_000_000_000:
        return str(round(value / 1_000_000_000_000_000, 2)) + " –∫–≤–¥—Ä."
    if avalue >= 1_000_000_000_000:
        return str(round(value / 1_000_000_000_000, 2)) + " —Ç—Ä–ª–Ω."
    if avalue >= 1_000_000_000:
        return str(round(value / 1_000_000_000, 2)) + " –º–ª—Ä–¥."
    if avalue >= 1_000_000:
        return str(round(value / 1_000_000, 2)) + " –º–ª–Ω."
    if avalue >= 100_000:
        return str(round(value / 100_000)) + "00K"
    if avalue >= 1000:
        return str(round(value / 1000)) + "K"
    return str(value)


def humanize(value):
    return "{:,}".format(round(value)).replace(",", ".")


async def parse_business_name(uid, b_id):
    p = await get_or_create_profile(uid)
    if int(b_id) == int(1):
        if int(p.business1_level) == 1:
            return p.business1.level1_name
        elif int(p.business1_level) == 2:
            return p.business1.level2_name
        else:
            return p.business1.level3_name
    elif int(b_id) == int(2):
        if int(p.business2_level) == 1:
            return p.business2.level1_name
        elif int(p.business2_level) == 2:
            return p.business2.level2_name
        else:
            return p.business2.level3_name


async def parse_business_smile(uid, b_id):
    p = await get_or_create_profile(uid)
    if int(b_id) == int(1):
        return p.business1.smile
    elif int(b_id) == int(2):
        return p.business2.smile


async def get_or_create_profile(user_id):
    try:
        shopcenters = shopcenter.select()
        job = jobs.select()
        profiles = Profile.select().where(Profile.user_id == user_id)

        profile = list(await manager.prefetch(profiles, shopcenters, job))[0]
    except IndexError:
        profile = await peewee_async.create_object(Profile, user_id=user_id)
    return profile


# @plugin.on_has_text()
# async def register(msg, ats, env):
#     if not msg.text:
#         return "GOON"
#     u, c = await manager.get_or_create(user_info, user_id=msg.from_id)
#     if u.is_banned > 0:
#         return "DONE"
#     await manager.update(u)
#     profile = await get_or_create_profile(msg.from_id)
#     if not profile.last_bonus:
#         profile.last_bonus = datetime.datetime.now()
#         await manager.update(profile)
#     if profile.energy_days <= 0:
#         profile.energy_days = 10
#         await manager.update(profile)
#     if profile.reg == 0:
#         profile.datareg = datetime.date.today()
#         profile.reg = 1
#         return await manager.update(profile)
#     return "GOON"

@plugin.on_startswith_text("—ç–∫–æ –æ—Ç–Ω—è—Ç—å")
async def ungivemoney(msg, ats, env):
    if not await priviligeshelper.getUserPriviliges(env, msg.from_id)&priviligeshelper.USER_ADMIN>0:
        return await env.reply("–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–∏—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏")
    profile = await get_or_create_profile(msg.from_id)
    try:
        if not env['args']:
            raise ValueError()
        user_idd = env['args'][0]
        amount = env['args'][1]
    except (ValueError, KeyError, IndexError):
        return
    if not await get_or_none(Profile, id=user_idd):
        return await env.reply("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    c, cr = await manager.get_or_create(Profile, id=user_idd)
    data = c.user_id
    username = await parse_user_name(env, data)
    try:
        value = re.findall(r"\d+", amount)
        text = re.sub(r"[^\w\s]+|[\d]+", r"", amount).strip()
        result = text_to_value(value[0], text)
    except:
        return await env.reply("—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
    if int(result) < 1:
        return await env.reply("—á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
    c.money -= Decimal(result)
    await env.reply(
        f"–≤—ã –æ—Ç–Ω—è–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —Å—É–º–º—É –≤ —Ä–∞–∑–º–µ—Ä–µ {humanize(result)}$"
    )
    user_from = await parse_user_name(env, msg.from_id)
    send = await env.request(
        "messages.send",
        user_id=data,
        message=f"–ò–≥—Ä–æ–∫ @id{msg.from_id} ({user_from}) –æ—Ç–Ω—è–ª —É –≤–∞—Å —Å—É–º–º—É –≤ —Ä–∞–∑–º–µ—Ä–µ {humanize(result)}$.",
    )
    await Logs.create_log(env, msg.from_id, data, 3, f"–û—Ç–Ω—è–ª —Å—É–º–º—É –≤ —Ä–∞–∑–º–µ—Ä–µ {humanize(result)}$.")
    await manager.update(profile)
    return await manager.update(c)


@plugin.on_startswith_text("—ç–∫–æ —É–¥–∞–ª–∏—Ç—å")
async def ungivemoney(msg, ats, env):
    if not await priviligeshelper.getUserPriviliges(env, msg.from_id)&priviligeshelper.USER_ADMIN>0:
        return await env.reply("–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
    profile = await get_or_create_profile(msg.from_id)
    try:
        if not env['args']:
            raise ValueError()
        user_idd = env['args'][0]
    except (ValueError, KeyError, IndexError):
        return
    if not await get_or_none(Profile, id=user_idd):
        return await env.reply("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    c, cr = await manager.get_or_create(Profile, id=user_idd)
    data = c.user_id
    username = await parse_user_name(env, data)
    await env.reply(f"–∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –æ—á–∏—â–µ–Ω")
    await Logs.create_log(env, msg.from_id, data, 13, f"–£–¥–∞–ª—ë–Ω –∞–∫–∫–∞—É–Ω—Ç {username}.")
    return await manager.execute(Profile.delete().where(Profile.user_id == data))


def parse_rank_name(rank):
    if rank == 1:
        return "—Ä—è–¥–æ–≤–æ–π"
    if rank == 2:
        return "–æ—Ñ–∏—Ü–µ—Ä"
    if rank == 3:
        return "–∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å"
    if rank == 4:
        return "–æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å"

    # user_privs = await priviligeshelper.getUserPriviliges(env, msg.from_id)
    # cleared_privs = priviligeshelper.strpriv(user_privs)
    # if 'USER_ADMIN' in cleared_privs:
    #     return ""


@plugin.on_startswith_text("–ø—Ä–æ—Ñ–∏–ª—å")
async def profile(msg, ats, env):
    puid = await parse_user_id(msg, env)
    nextline = "\n"
    if puid:
        if not await priviligeshelper.getUserPriviliges(env, msg.from_id)&priviligeshelper.USER_VIP>0:
            return await env.reply("–í–∞–º –Ω—É–∂–µ–Ω —Å—Ç–∞—Ç—É—Å VIP, –æ –Ω—ë–º –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —É –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–µ(–≤ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º –ø–æ—Å—Ç–µ)")
        username = await parse_user_name(env, puid[0])
        if not await get_or_none(Profile, user_id=puid[0]):
            return await env.reply("–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π –≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        kb = VKKeyboard()
        kb.lazy_buttons({
            'inline': True,
            'buttons': [
                {'text': 'üîù –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'payload': {'command': '!—ç–∫–æ —Ç–æ–ø'}, 'color': 'primary'}
            ]
        })
        c = await get_or_create_profile(puid[0])
        text = f"–ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}:\nüÜîID: {c.id}\nüí∞–ë–∞–ª–∞–Ω—Å: {humanize(c.money)}$ ({textify_value(c.money)})\n{f'üí≥–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç: {humanize(c.bankmoney)}$ ({textify_value(round(c.bankmoney))}){nextline}' if c.bankmoney > 0 else ''}üí±–ë–∏—Ç–∫–æ–∏–Ω–æ–≤: {humanize(c.btc)}…É\nüíπ–ö—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞: {textify_value(int(plugin.bitcoin))}$\nüëë–†–µ–π—Ç–∏–Ω–≥: {humanize(round(c.rg))}\n"
        text += f"üèã–≠–Ω–µ—Ä–≥–∏—è: {c.energy_days if not c.last_energy_end > datetime.datetime.now() else 0}\nüèÜ–û–ø—ã—Ç: {c.energy_worked}\nüìé–ñ–µ–ª–µ–∑–æ: {c.iron}\nüí∞–ó–æ–ª–æ—Ç–æ: {c.gold}\nüíé–ê–ª–º–∞–∑—ã: {c.diamond}\n"
        if c.job:
            text += f"üìã–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {c.job.name}\n"
        if (
            c.house
            or c.car
            or c.airplane
            or c.helicopter
            or c.apartment
            or c.mobile
            or c.other
            or c.yacht
            or c.business1
            or c.business2
        ):
            text += "üè°–í–∞—à–µ –∏–º—É—â–µ—Å—Ç–≤–æ:\n"
        if c.house:
            text += f"&#12288;üè†–î–æ–º: {c.house.name} (üÜî: {c.house_id})\n"
        if c.car:
            text += f"&#12288;üöó–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {c.car.name} (üÜî: {c.car_id})\n"
        if c.apartment:
            text += f"&#12288;üåá–ö–≤–∞—Ä—Ç–∏—Ä–∞: {c.apartment.name} (üÜî: {c.apartment_id})\n"
        if c.airplane:
            text += f"&#12288;üõ©–°–∞–º–æ–ª–µ—Ç: {c.airplane.name} (üÜî: {c.airplane_id})\n"
        if c.helicopter:
            text += f"&#12288;üöÅ–í–µ—Ä—Ç–æ–ª–µ—Ç: {c.helicopter.name} (üÜî: {c.helicopter_id})\n"
        if c.mobile:
            text += f"&#12288;üì±–¢–µ–ª–µ—Ñ–æ–Ω: {c.mobile.name} (üÜî: {c.mobile_id})\n"
        if c.yacht:
            text += f"&#12288;üõ•–Ø—Ö—Ç–∞: {c.yacht.name} (üÜî: {c.yacht_id})\n"
#        if c.other:
#            text += f"&#12288;üîã–ë–∏—Ç–∫–æ–∏–Ω —Ñ–µ—Ä–º–∞: {c.other.name} (üÜî: {c.other_id}/–ö–æ–ª-–≤–æ: {c.btc_amount})\n"
        if c.business1 or c.business2:
            text += "&#12288;üíº–ë–∏–∑–Ω–µ—Å—ã:\n"
        if c.business1:
            business_name = await parse_business_name(puid, 1)
            smile = await parse_business_smile(puid, 1)
            text += f"&#12288; {smile}{business_name}\n"
        if c.business2:
            smile = await parse_business_smile(puid, 2)
            business_name = await parse_business_name(puid, 2)
            text += f"&#12288; {smile}{business_name}\n"
        if c.clan:
            clan = await get_or_none(clans, id=c.clan)
            role = await get_or_none(clan_members, user_id=puid[0], clan_tag=clan.tag)

            text += f"üèú–ö–ª–∞–Ω:\n&#12288;üÜî–ö–ª–∞–Ω-—Ç—ç–≥: {clan.tag}\n&#12288;üëî–ó–≤–∞–Ω–∏–µ: {parse_rank_name(role.rank)}\n&#12288;üéì–í –∫–ª–∞–Ω–µ —Å: {role.join_date.split()[0]}\n"
        text += f"üíæ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {c.datareg}"
        return await env.reply(text, keyboard=kb.dump_keyboard())

    kb = VKKeyboard()
    kb.set_inline(True)
    profile = await get_or_create_profile(msg.from_id)
    text = f"–≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\nüÜîID: {profile.id}\n\nüí∞–ë–∞–ª–∞–Ω—Å: {humanize(profile.money)}$ ({textify_value(round(profile.money))})\n{f'üí≥–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç: {humanize(profile.bankmoney)}$ ({textify_value(round(profile.bankmoney))}){nextline}' if profile.bankmoney > 0 else ''}üí±–ë–∏—Ç–∫–æ–∏–Ω–æ–≤: {humanize(profile.btc)}…É\nüíπ–ö—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞:{textify_value(int(plugin.bitcoin))}$\nüëë–†–µ–π—Ç–∏–Ω–≥: {humanize(round(profile.rg))}\n"
    text += f"üèã–≠–Ω–µ—Ä–≥–∏—è: {profile.energy_days if not profile.last_energy_end > datetime.datetime.now() else 0}\nüèÜ–û–ø—ã—Ç: {profile.energy_worked}\nüìé–ñ–µ–ª–µ–∑–æ: {profile.iron}\nüí∞–ó–æ–ª–æ—Ç–æ: {profile.gold}\nüíé–ê–ª–º–∞–∑—ã: {profile.diamond}\n"
    kb.add_row()
    kb.edit_row(0).add_button("üîù –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", payload={'command': f'{env.eenv.prefix}—ç–∫–æ —Ç–æ–ø'}, color="primary")
    if profile.job:
        text += f"üìã–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profile.job.name}\n"   
        
        kb.edit_row(0).add_button("üî® –†–∞–±–æ—Ç–∞—Ç—å –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏", payload={'command': f'{env.eenv.prefix}—ç–∫–æ —Ä–∞–±–æ—Ç–∞—Ç—å'}, color="primary")
    if (
        profile.house
        or profile.car
        or profile.airplane
        or profile.helicopter
        or profile.apartment
        or profile.mobile
        or profile.other
        or profile.yacht
        or profile.business1
        or profile.business2
    ):
        text += "üè°–í–∞—à–µ –∏–º—É—â–µ—Å—Ç–≤–æ:\n"
    if profile.house:
        text += f"&#12288;üè†–î–æ–º: {profile.house.name} (üÜî: {profile.house_id})\n"
    if profile.car:
        text += f"&#12288;üöó–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {profile.car.name} (üÜî: {profile.car_id})\n"
    if profile.apartment:
        text += (
            f"&#12288;üåá–ö–≤–∞—Ä—Ç–∏—Ä–∞: {profile.apartment.name} (üÜî: {profile.apartment_id})\n"
        )
    if profile.airplane:
        text += (
            f"&#12288;üõ©–°–∞–º–æ–ª–µ—Ç: {profile.airplane.name} (üÜî: {profile.airplane_id})\n"
        )
    if profile.helicopter:
        text += f"&#12288;üöÅ–í–µ—Ä—Ç–æ–ª–µ—Ç: {profile.helicopter.name} (üÜî: {profile.helicopter_id})\n"
    if profile.mobile:
        text += f"&#12288;üì±–¢–µ–ª–µ—Ñ–æ–Ω: {profile.mobile.name} (üÜî: {profile.mobile_id})\n"
    if profile.yacht:
        text += f"&#12288;üõ•–Ø—Ö—Ç–∞: {profile.yacht.name} (üÜî: {profile.yacht_id})\n"
    pos_b = 1
    #if profile.other:
    #    pos_b+=1
    #    kb.add_row()
    #    kb.edit_row(1).add_button("üîã —Å—Ç–∞—Ç—É—Å —Ñ–µ—Ä–º—ã", payload={'command': f'{env.eenv.prefix}—ç–∫–æ —Ñ–µ—Ä–º–∞'}, color="positive")
    #    text += f"&#12288;üîã–ë–∏—Ç–∫–æ–∏–Ω —Ñ–µ—Ä–º–∞: {profile.other.name} (üÜî: {profile.other_id}/–ö–æ–ª-–≤–æ: {profile.btc_amount})\n"
    if profile.business1 or profile.business2:
        text += "&#12288;üíº–ë–∏–∑–Ω–µ—Å—ã:\n"
    if profile.business1:
        kb.add_row()
        kb.edit_row(pos_b).add_button("1 –±–∏–∑–Ω–µ—Å", payload={'command': f'{env.eenv.prefix}—ç–∫–æ –±–∏–∑–Ω–µ—Å 1'}, color="positive")
        smile = await parse_business_smile(msg.from_id, 1)
        business_name = await parse_business_name(msg.from_id, 1)
        text += f"&#12288;&#12288; {smile}{business_name}\n"
        pos_b+=1
    if profile.business2:
        kb.edit_row(pos_b-1).add_button("2 –±–∏–∑–Ω–µ—Å", payload={'command': f'{env.eenv.prefix}—ç–∫–æ –±–∏–∑–Ω–µ—Å 2'}, color="positive")
        smile = await parse_business_smile(msg.from_id, 2)
        business_name = await parse_business_name(msg.from_id, 2)
        text += f"&#12288;&#12288; {smile}{business_name}\n"
    if profile.clan:
        clan = await get_or_none(clans, id=profile.clan)
        role = await get_or_none(clan_members, user_id=msg.from_id, clan_tag=clan.tag)
        
        kb.add_row()
        kb.edit_row(pos_b).add_button("üèú –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞–Ω–∞", payload={'command': f'{env.eenv.prefix}–∫–ª–∞–Ω'}, color="negative")
        pos_b+=1
        text += f"üèú–ö–ª–∞–Ω:\n&#12288;üÜî–ö–ª–∞–Ω-—Ç—ç–≥: {clan.tag}\n&#12288;üëî–ó–≤–∞–Ω–∏–µ: {parse_rank_name(role.rank)}\n&#12288;üéì–í –∫–ª–∞–Ω–µ —Å: {role.join_date.split()[0]}\n"
    text += f"üíæ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {profile.datareg}\n"
    if await get_or_none(clan_invites, whom_id=msg.from_id):
        kb.add_row()
        kb.edit_row(pos_b).add_button("üèú –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–ª–∞–Ω—ã", payload={'command': f'{env.eenv.prefix}–∫–ª–∞–Ω –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è'}, color="primary")
        text += '\n–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ –∫–ª–∞–Ω, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π, –≤–≤–µ–¥–∏—Ç–µ "–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è".'
    return await env.reply(text, keyboard=kb.dump_keyboard())


@plugin.on_startswith_text("—ç–∫–æ –ø—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å")
async def sell_bus(msg, ats, env):
    profile = await get_or_create_profile(msg.from_id)
    if (
        not profile.business1
        and not profile.business2
        or not profile.business2
        and not profile.business1
    ):
        return await env.reply("—É –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤, –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤—ã –∏—Ö –º–æ–∂–µ—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ")
    try:
        amount = env['args'][0]
        if not amount or int(amount) <= 0 or int(amount) > 2:
            raise ValueError()
        num = int(amount)
    except (ValueError, KeyError, IndexError) as e:
        return await env.reply('–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ø—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å [–Ω–æ–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞]"')
    data = profile.business1 if num == 1 else profile.business2
    if not data:
        return await env.reply("—É –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞")
    if num == 1:
        price = Decimal((int(profile.business1.price // 1.5)))
        profile.business1 = None
        profile.business1_works = 1
        profile.business1_level = 1
        profile.money += price
        profile.business1_money = 0
    else:
        price = Decimal((int(profile.business2.price // 1.5)))
        profile.business2 = None
        profile.business2_works = 1
        profile.business2_level = 1
        profile.business2_money = 0
        profile.money += price
    await manager.update(profile)
    return await env.reply(f"–≤—ã –ø—Ä–æ–¥–∞–ª–∏ –±–∏–∑–Ω–µ—Å #{num} –∑–∞ {humanize(price)}$.")


@plugin.on_startswith_text("—ç–∫–æ –º–∞–≥–∞–∑–∏–Ω")
async def shop(msg, ats, env):
    kb = VKKeyboard()
    kb.lazy_buttons({
        'inline': True,
        'buttons': [
            {'text': 'üöó', 'payload': {'command': f'{env.eenv.prefix}—ç–∫–æ –º–∞—à–∏–Ω—ã'}, 'color': 'primary'},
            {'text': 'üõ©', 'payload': {'command': f'{env.eenv.prefix}—ç–∫–æ —Å–∞–º–æ–ª–µ—Ç—ã'}, 'color': 'primary'},
            {'text': 'üöÅ', 'payload': {'command': f'{env.eenv.prefix}—ç–∫–æ –≤–µ—Ä—Ç–æ–ª–µ—Ç—ã'}, 'color': 'primary'},
            {'text': 'üõ•', 'payload': {'command': f'{env.eenv.prefix}—ç–∫–æ —è—Ö—Ç—ã'}, 'color': 'primary'},
            {'text': 'üè†', 'payload': {'command': f'{env.eenv.prefix}—ç–∫–æ –¥–æ–º–∞'}, 'color': 'primary'},
            {'text': 'üåá', 'payload': {'command': f'{env.eenv.prefix}—ç–∫–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã'}, 'color': 'primary'},
            {'text': 'üì±', 'payload': {'command': f'{env.eenv.prefix}—ç–∫–æ —Ç–µ–ª–µ—Ñ–æ–Ω—ã'}, 'color': 'primary'},
#            {'text': '‚≠ê', 'payload': {'command': f'{env.eenv.prefix}—ç–∫–æ —Ñ–µ—Ä–º—ã'}, 'color': 'primary'},
            {'text': 'üíº', 'payload': {'command': f'{env.eenv.prefix}—ç–∫–æ –±–∏–∑–Ω–µ—Å—ã'}, 'color': 'primary'}
        ]
    })
    data = f'''—Ä–∞–∑–¥–µ–ª—ã –º–∞–≥–∞–∑–∏–Ω–∞:
üöô–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:
&#12288;üöó –ú–∞—à–∏–Ω—ã
&#12288;üõ© –°–∞–º–æ–ª–µ—Ç—ã
&#12288;üöÅ –í–µ—Ä—Ç–æ–ª–µ—Ç—ã
&#12288;üõ• –Ø—Ö—Ç—ã

üèò–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å:
&#12288;üè†–î–æ–º–∞
&#12288;üåá–ö–≤–∞—Ä—Ç–∏—Ä—ã
üìå –û—Å—Ç–∞–ª—å–Ω–æ–µ:
&#12288;üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã
&#12288;üíº–ë–∏–∑–Ω–µ—Å—ã
&#12288;üëë –†–µ–π—Ç–∏–Ω–≥ [–∫–æ–ª-–≤–æ] - $100–º–ª–Ω.
&#12288;üåê –ë–∏—Ç–∫–æ–∏–Ω [–∫–æ–ª-–≤–æ]

üîé –î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "—ç–∫–æ [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] [–Ω–æ–º–µ—Ä]".
&#12288;–ù–∞–ø—Ä–∏–º–µ—Ä: "—ç–∫–æ –¥–æ–º–∞ 8"'''
    return await env.reply(data, keyboard=kb.dump_keyboard())


@plugin.on_startswith_text("—ç–∫–æ –ø—Ä–æ–¥–∞—Ç—å –∂–µ–ª–µ–∑–æ")
async def sell_iron(msg, ats, env):
    profile = await get_or_create_profile(msg.from_id)
    if not profile.iron:
        return await env.reply("—É –≤–∞—Å –Ω–µ—Ç –∂–µ–ª–µ–∑–∞")
    pay = random.randint(100, 3000)
    is_vip = False
    if await priviligeshelper.getUserPriviliges(env, msg.from_id)&priviligeshelper.USER_VIP>0:
        pay *= 2
        is_vip = True
    result = int(pay) * int(profile.iron)
    profile.iron = 0
    profile.money += result
    await manager.update( profile)
    return await env.reply(f"–≤—ã –ø—Ä–æ–¥–∞–ª–∏ –∂–µ–ª–µ–∑–æ –∑–∞ {textify_value(result)}  { ('x2 —Ç.–∫ –≤—ã –≤–∏–ø' if is_vip else '') }")


@plugin.on_startswith_text("—ç–∫–æ –ø—Ä–æ–¥–∞—Ç—å –∑–æ–ª–æ—Ç–æ")
async def sell_iron(msg, ats, env):
    profile = await get_or_create_profile(msg.from_id)
    if not profile.gold:
        return await env.reply("—É –≤–∞—Å –Ω–µ—Ç –∑–æ–ª–æ—Ç–∞")
    pay = random.randint(3000, 4500)
    is_vip = False
    if await priviligeshelper.getUserPriviliges(env, msg.from_id)&priviligeshelper.USER_VIP>0:
        pay *= 2
        is_vip = True
    result = int(pay) * int(profile.gold)
    profile.gold = 0
    profile.money += result
    await manager.update(profile)
    return await env.reply(f"–≤—ã –ø—Ä–æ–¥–∞–ª–∏ –∑–æ–ª–æ—Ç–æ –∑–∞ {textify_value(result)}  { ('x2 —Ç.–∫ –≤—ã –≤–∏–ø' if is_vip else '') }")


@plugin.on_startswith_text("—ç–∫–æ –ø—Ä–æ–¥–∞—Ç—å –∞–ª–º–∞–∑—ã")
async def sell_iron(msg, ats, env):
    profile = await get_or_create_profile(msg.from_id)
    if not profile.diamond:
        return await env.reply("—É –≤–∞—Å –Ω–µ—Ç –∞–ª–º–∞–∑–æ–≤")
    pay = random.randint(5000, 10000)
    is_vip = False
    if await priviligeshelper.getUserPriviliges(env, msg.from_id)&priviligeshelper.USER_VIP>0:
        pay *= 2.5
        is_vip = True
    result = int(pay) * int(profile.diamond)
    profile.diamond = 0
    profile.money += result
    await manager.update(profile)
    return await env.reply(f"–≤—ã –ø—Ä–æ–¥–∞–ª–∏ –∞–ª–º–∞–∑—ã –∑–∞ {textify_value(result)} { ('x2.5 —Ç.–∫ –≤—ã –≤–∏–ø' if is_vip else '') }")


@plugin.on_startswith_text("—ç–∫–æ –±–∞–ª–∞–Ω—Å")
async def balance(msg, ats, env):
    profile = await get_or_create_profile(msg.from_id)
    vk_message = f"–Ω–∞ —Ä—É–∫–∞—Ö: {humanize(profile.money)}$\n"
    if profile.bankmoney > 0:
        vk_message += f"üí≥ –í –±–∞–Ω–∫–µ: {humanize(profile.bankmoney)}$\n"
    if profile.btc > 0:
        vk_message += f"üåê –ë–∏—Ç–∫–æ–∏–Ω–æ–≤: {profile.btc}‡∏ø\n"
    return await env.reply(vk_message)


@plugin.on_startswith_text("—ç–∫–æ –º–∞—à–∏–Ω—ã")
async def cars(msg, ats, env):
    profile = await get_or_create_profile(msg.from_id)
    check = env['args'] if env['args'] else []
    shopcenters = list(
        await manager.execute(
            shopcenter.select()
            .where(shopcenter.slot == "car")
            .order_by(shopcenter.price)
        )
    )
    if len(check) < 1:
        text = f"–º–∞—à–∏–Ω—ã:\n"
        for i in range(len(shopcenters)):
            text += f"{'üî∏' if profile.money < shopcenters[i].price else 'üîπ'} {i + 1}. {shopcenters[i].name} - {humanize(shopcenters[i].price)}$\n"
        return await env.reply(text + f'\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "—ç–∫–æ –º–∞—à–∏–Ω—ã [–Ω–æ–º–µ—Ä]"')
    else:
        if profile.car:
            return await env.reply(
                f'—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –º–∞—à–∏–Ω–∞ ({profile.car.name}), –≤–≤–µ–¥–∏—Ç–µ "—ç–∫–æ –ø—Ä–æ–¥–∞—Ç—å –º–∞—à–∏–Ω—É"'
            )
        if not check[0].isdigit():
            return
        if int(check[0]) > len(shopcenters):
            return
        if int(profile.money) < shopcenters[int(check[0]) - 1].price:
            return await env.reply(f"—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ {plugin.negative}")
        profile.money -= shopcenters[int(check[0]) - 1].price
        profile.car = shopcenters[int(check[0]) - 1]
        await manager.update(profile)
        return await env.reply(
            f"–≤—ã –∫—É–ø–∏–ª–∏ –º–∞—à–∏–Ω—É ({shopcenters[int(check[0]) - 1].name}) –∑–∞ {humanize(shopcenters[int(check[0]) - 1].price)}$ {plugin.positive}"
        )


#@plugin.on_startswith_text("—ç–∫–æ —Ñ–µ—Ä–º—ã")
async def cars(msg, ats, env):
    profile = await get_or_create_profile(msg.from_id)
    check = env['args'] if env['args'] else []
    shopcenters = list(
        await manager.execute(
            shopcenter.select()
            .where(shopcenter.slot == "other")
            .order_by(shopcenter.price)
        )
    )
    if len(check) < 1:
        text = f"—Ñ–µ—Ä–º—ã:\n"
        for i in range(len(shopcenters)):
            text += f"{'üî∏' if profile.money < shopcenters[i].price else 'üîπ'} {i + 1}. {shopcenters[i].name} - {humanize(shopcenters[i].price)}$\n&#12288;–ü—Ä–∏–±—ã–ª—å: –Ω–∞—á. {humanize(shopcenters[i].moneymin)}…É\n"
        return await env.reply(
            text + f'\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "—ç–∫–æ —Ñ–µ—Ä–º—ã [–Ω–æ–º–µ—Ä] [–∫–æ–ª-–≤–æ]"'
        )
    else:
        if not check[0].isdigit():
            return await env.reply("–≤—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!")

        try:
            amount = env['args'][1]
            if not amount or int(amount) <= 0:
                raise ValueError()
            num = int(amount)
        except (ValueError, KeyError, IndexError) as e:
            num = 1

        if profile.other and profile.other_id != shopcenters[int(check[0]) - 1].id:
            return await env.reply(
                f'—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ñ–µ—Ä–º–∞ ({profile.other.name}), –≤–≤–µ–¥–∏—Ç–µ "—ç–∫–æ –ø—Ä–æ–¥–∞—Ç—å —Ñ–µ—Ä–º—É"'
            )
        if not check[0].isdigit():
            return
        if int(check[0]) > len(shopcenters):
            return
        if int(profile.money) < shopcenters[int(check[0]) - 1].price * int(num):
            return await env.reply(
                f"—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {textify_value((shopcenters[int(check[0]) - 1].price * int(num)) - int(profile.money))}$) {plugin.negative} "
            )
        a = datetime.datetime.now().minute
        profile.last_btc_payout = datetime.datetime.now() + timedelta(minutes=-a)
        profile.money -= Decimal(shopcenters[int(check[0]) - 1].price * int(num))
        if profile.other and profile.other_id == shopcenters[int(check[0]) - 1].id:
            profile.btc_amount += int(num)
        else:
            profile.other = shopcenters[int(check[0]) - 1]
            profile.btc_amount = int(num)

        notify_msg = "–≤–∞—à –º–∞–π–Ω–µ—Ä –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –≤—ã –∫—É–ø–∏–ª–∏ –Ω–æ–≤—É—é —Ñ–µ—Ä–º—É!\n"
        show_msg = True if profile.minercheck == 1 else False
        if profile.minercheck == 1:
            profile.minercheck = 0
        await manager.update(profile)
        return await env.reply(
            f"–≤—ã –∫—É–ø–∏–ª–∏ {plural_form(num, ('—Ñ–µ—Ä–º—É', '—Ñ–µ—Ä–º—ã', '—Ñ–µ—Ä–º'))} ({shopcenters[int(check[0]) - 1].name}) –∑–∞ {humanize(int(shopcenters[int(check[0]) - 1].price) * int(num))}$ {plugin.positive} {notify_msg if show_msg else ''}"
        )


#@plugin.on_startswith_text("—ç–∫–æ –ø—Ä–æ–¥–∞—Ç—å —Ñ–µ—Ä–º—É")
async def miner_sold(msg, ats, env):
    profile = await get_or_create_profile(msg.from_id)
    if not profile.other:
        return await env.reply("—É –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º, –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤—ã –∏—Ö –º–æ–∂–µ—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ")
    try:
        amount = env['args'][0]
        if not amount or int(amount) <= 0:
            raise ValueError()
        if amount == "–≤—Å—ë" or amount == "–≤—Å–µ":
            amount = profile.btc_amount
        num = int(amount)
    except (ValueError, KeyError, IndexError) as e:
        num = 1
    if num > int(profile.btc_amount):
        return await env.reply(f"—É –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ —Ñ–µ—Ä–º {plugin.negative}")
    shopcenters = await manager.get(shopcenter, shopcenter.id == profile.other_id)
    profile.money += Decimal((int(shopcenters.price) * int(num)) // 1.5)
    if profile.btc_amount == num:
        profile.other = None
    else:
        profile.btc_amount -= int(num)
    await manager.update(profile)
    return await env.reply(
        f"–≤—ã –ø—Ä–æ–¥–∞–ª–∏ {plural_form(num, ('—Ñ–µ—Ä–º—É', '—Ñ–µ—Ä–º—ã', '—Ñ–µ—Ä–º'))} –∑–∞ {humanize((int(shopcenters.price) * int(num))// 1.5)}$."
    )


#plugin.on_text("—ç–∫–æ —Ñ–µ—Ä–º–∞ —Å–Ω—è—Ç—å")
async def miner_minus(msg, ats, env):
    profile = await get_or_create_profile(msg.from_id)
    if not profile.other:
        return await env.reply(f"—É –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã, –∫—É–ø–∏—Ç—å –µ—ë –º–æ–∂–Ω–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ")
    if profile.minercheck == 0:
        return await env.reply("–≤–≤–µ–¥–∏—Ç–µ '—Ñ–µ—Ä–º–∞' , —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–µ—Ä")
    if not profile.last_btc_payout:
        a = datetime.datetime.now().minute
        profile.last_btc_payout = datetime.datetime.now() + timedelta(minutes=-a)
        await manager.update(profile)
    a = time.time()
    b = time.mktime(profile.last_btc_payout.timetuple())
    res = (a - b) // 3600
    if (profile.other.moneymin / 10) * res <= 0:
        return await env.reply(f"–≤—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {plugin.negative}")
    profile.btc += (profile.other.moneymin) * res * profile.btc_amount
    profile.tt = time.time()
    profile.minercheck = 0
    profile.last_btc_payout = datetime.datetime.now()
    await manager.update(profile)
	
    kb = VKKeyboard()
    kb.lazy_buttons({
		'inline': True,
		'buttons': [
			{'text':'üîõ –í–∫–ª—é—á–∏—Ç—å –º–∞–π–Ω–µ—Ä —Å–Ω–æ–≤–∞', 'payload': {'command': f'{env.eenv.prefix}—ç–∫–æ —Ñ–µ—Ä–º–∞'}, 'color':'positive'},
			{'text':'…É –ü—Ä–æ–¥–∞—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –±–∏—Ç–∫–æ–∏–Ω—ã', 'payload': {'command': f'{env.eenv.prefix}—ç–∫–æ –ø—Ä–æ–¥–∞—Ç—å –±–∏—Ç–∫–æ–∏–Ω {round((profile.other.moneymin) * res * profile.btc_amount)}'}, 'color':'primary'}
		]
	})
    return await env.reply(
        f"–≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {round((profile.other.moneymin) * res * profile.btc_amount)}‚Çø.\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –º–∞–π–Ω–µ—Ä!",
		keyboard=kb.dump_keyboard()
    )


#@plugin.on_text("—ç–∫–æ —Ñ–µ—Ä–º–∞")
async def miner(msg, ats, env):
    profile = await get_or_create_profile(msg.from_id)
    if not profile.other:
        return await env.reply(f"—É –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã, –∫—É–ø–∏—Ç—å –µ—ë –º–æ–∂–Ω–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ")
    if profile.minercheck == 0:
        a = datetime.datetime.now().minute
        profile.last_btc_payout = datetime.datetime.now() + timedelta(minutes=-a)
        profile.minercheck = 1
        await manager.update(profile)
        await env.reply("–ú–∞–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
    kb = VKKeyboard()
    kb.lazy_buttons({
        'inline': True,
        'buttons': [
            {'text': '–°–Ω—è—Ç—å –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –º–∞–π–Ω–µ—Ä', 'payload': {'command': f'{env.eenv.prefix}—ç–∫–æ —Ñ–µ—Ä–º–∞ —Å–Ω—è—Ç—å'}, 'color': 'negative'}
        ]
    })
    data = "üîã–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∏—Ç–∫–æ–∏–Ω —Ñ–µ—Ä–º—ã:\n"
    a = time.time()
    b = time.mktime(profile.last_btc_payout.timetuple())
    d = str(datetime.datetime.now() - profile.last_btc_payout).split(":")
    res = (a - b) // 3600
    data += f"‚ôª–§–µ—Ä–º–∞: {profile.other.name} (–∫–æ–ª-–≤–æ: {profile.btc_amount})\n"
    data += f"‚åõ–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {d[0]}hours, {d[1]}minutes\n"
    data += f"üìà–°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã: {(profile.other.moneymin) * profile.btc_amount}‚Çø/—á\n"
    data += f'üí∞–¢–µ–∫—É—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {round((profile.other.moneymin) * res * profile.btc_amount)}‚Çø\n–ß—Ç–æ–±—ã —Å–Ω—è—Ç—å —Ç–µ–∫—É—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫, –≤–≤–µ–¥–∏—Ç–µ "—Ñ–µ—Ä–º–∞ —Å–Ω—è—Ç—å"'
    return await env.reply(data, keyboard=kb.dump_keyboard())


@plugin.on_startswith_text("—ç–∫–æ —è—Ö—Ç—ã")
async def cars(msg, ats, env):
    profile = await get_or_create_profile(msg.from_id)
    check = env['args'] if env['args'] else []
    shopcenters = list(
        await manager.execute(
            shopcenter.select()
            .where(shopcenter.slot == "yacht")
            .order_by(shopcenter.price)
        )
    )
    if len(check) < 1:
        text = f"—è—Ö—Ç—ã:\n"
        for i in range(len(shopcenters)):
            text += f"{'üî∏' if profile.money < shopcenters[i].price else 'üîπ'} {i + 1}. {shopcenters[i].name} - {humanize(shopcenters[i].price)}$\n"
        return await env.reply(text + f'\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "—ç–∫–æ —è—Ö—Ç—ã [–Ω–æ–º–µ—Ä]"')
    else:
        if profile.yacht:
            return await env.reply(
                f'—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —è—Ö—Ç–∞ ({profile.yacht.name}), –≤–≤–µ–¥–∏—Ç–µ "—ç–∫–æ –ø—Ä–æ–¥–∞—Ç—å —è—Ö—Ç—É"'
            )
        if not check[0].isdigit():
            return
        if int(check[0]) > len(shopcenters):
            return
        if int(profile.money) < shopcenters[int(check[0]) - 1].price:
            return await env.reply(f"—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ {plugin.negative}")
        profile.money -= shopcenters[int(check[0]) - 1].price
        profile.yacht = shopcenters[int(check[0]) - 1]
        await manager.update(profile)
        return await env.reply(
            f"–≤—ã –∫—É–ø–∏–ª–∏ —è—Ö—Ç—É ({shopcenters[int(check[0]) - 1].name}) –∑–∞ {humanize(shopcenters[int(check[0]) - 1].price)}$ {plugin.positive}"
        )


@plugin.on_startswith_text("—ç–∫–æ —Å–∞–º–æ–ª–µ—Ç—ã")
async def cars(msg, ats, env):
    profile = await get_or_create_profile(msg.from_id)
    check = env['args'] if env['args'] else []
    shopcenters = list(
        await manager.execute(
            shopcenter.select()
            .where(shopcenter.slot == "airplane")
            .order_by(shopcenter.price)
        )
    )
    if len(check) < 1:
        text = f"—Å–∞–º–æ–ª–µ—Ç—ã:\n"
        for i in range(len(shopcenters)):
            text += f"{'üî∏' if profile.money < shopcenters[i].price else 'üîπ'} {i + 1}. {shopcenters[i].name} - {humanize(shopcenters[i].price)}$\n"
        return await env.reply(text + f'\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "—ç–∫–æ –∞–º–æ–ª–µ—Ç—ã [–Ω–æ–º–µ—Ä]"')
    else:
        if profile.airplane:
            return await env.reply(
                f'—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–∞–º–æ–ª–µ—Ç ({profile.airplane.name}), –≤–≤–µ–¥–∏—Ç–µ "—ç–∫–æ –ø—Ä–æ–¥–∞—Ç—å —Å–∞–º–æ–ª–µ—Ç"'
            )
        if not check[0].isdigit():
            return
        if int(check[0]) > len(shopcenters):
            return
        if int(profile.money) < shopcenters[int(check[0]) - 1].price:
            return await env.reply(f"—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ {plugin.negative}")
        profile.money -= shopcenters[int(check[0]) - 1].price
        profile.airplane = shopcenters[int(check[0]) - 1]
        await manager.update(profile)
        return await env.reply(
            f"–≤—ã –∫—É–ø–∏–ª–∏ —Å–∞–º–æ–ª–µ—Ç ({shopcenters[int(check[0]) - 1].name}) –∑–∞ {humanize(shopcenters[int(check[0]) - 1].price)}$ {plugin.positive}"
        )


@plugin.on_startswith_text("—ç–∫–æ –≤–µ—Ä—Ç–æ–ª–µ—Ç—ã")
async def cars(msg, ats, env):
    profile = await get_or_create_profile(msg.from_id)
    check = env['args'] if env['args'] else []
    shopcenters = list(
        await manager.execute(
            shopcenter.select()
            .where(shopcenter.slot == "helicopter")
            .order_by(shopcenter.price)
        )
    )
    if len(check) < 1:
        text = f"–≤–µ—Ä—Ç–æ–ª–µ—Ç—ã:\n"
        for i in range(len(shopcenters)):
            text += f"{'üî∏' if profile.money < shopcenters[i].price else 'üîπ'} {i + 1}. {shopcenters[i].name} - {humanize(shopcenters[i].price)}$\n"
        return await env.reply(text + f'\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "—ç–∫–æ –≤–µ—Ä—Ç–æ–ª–µ—Ç—ã [–Ω–æ–º–µ—Ä]"')
    else:
        if not check[0].isdigit():
            return await env.reply("–≤—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!")

        if profile.helicopter:
            return await env.reply(
                f'—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –≤–µ—Ä—Ç–æ–ª–µ—Ç ({profile.helicopter.name}), –≤–≤–µ–¥–∏—Ç–µ "—ç–∫–æ –ø—Ä–æ–¥–∞—Ç—å –≤–µ—Ä—Ç–æ–ª–µ—Ç"'
            )
        if not check[0].isdigit():
            return
        if int(check[0]) > len(shopcenters):
            return
        if int(profile.money) < shopcenters[int(check[0]) - 1].price:
            return await env.reply(f"—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ {plugin.negative}")
        profile.money -= shopcenters[int(check[0]) - 1].price
        profile.helicopter = shopcenters[int(check[0]) - 1]
        await manager.update(profile)
        return await env.reply(
            f"–≤—ã –∫—É–ø–∏–ª–∏ –≤–µ—Ä—Ç–æ–ª–µ—Ç ({shopcenters[int(check[0]) - 1].name}) –∑–∞ {humanize(shopcenters[int(check[0]) - 1].price)}$ {plugin.positive}"
        )


@plugin.on_startswith_text("—ç–∫–æ –¥–æ–º–∞")
async def cars(msg, ats, env):
    profile = await get_or_create_profile(msg.from_id)
    check = env['args'] if env['args'] else []
    shopcenters = list(
        await manager.execute(
            shopcenter.select()
            .where(shopcenter.slot == "house")
            .order_by(shopcenter.price)
        )
    )
    if len(check) < 1:
        text = f"–¥–æ–º–∞:\n"
        for i in range(len(shopcenters)):
            text += f"{'üî∏' if profile.money < shopcenters[i].price else 'üîπ'} {i + 1}. {shopcenters[i].name} - {humanize(shopcenters[i].price)}$\n"
        return await env.reply(text + f'\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "—ç–∫–æ –¥–æ–º–∞ [–Ω–æ–º–µ—Ä]"')
    else:
        if profile.house:
            return await env.reply(
                f'—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ–º ({profile.house.name}), –≤–≤–µ–¥–∏—Ç–µ "–ø—Ä–æ–¥–∞—Ç—å –¥–æ–º"'
            )
        if not check[0].isdigit():
            return
        if int(check[0]) > len(shopcenters):
            return
        if int(profile.money) < shopcenters[int(check[0]) - 1].price:
            return await env.reply(f"—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ {plugin.negative}")
        profile.money -= shopcenters[int(check[0]) - 1].price
        profile.house = shopcenters[int(check[0]) - 1]
        await manager.update(profile)
        return await env.reply(
            f"–≤—ã –∫—É–ø–∏–ª–∏ –¥–æ–º ({shopcenters[int(check[0]) - 1].name}) –∑–∞ {humanize(shopcenters[int(check[0]) - 1].price)}$ {plugin.positive}"
        )


@plugin.on_startswith_text("—ç–∫–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã")
async def cars(msg, ats, env):
    profile = await get_or_create_profile(msg.from_id)
    check = env['args'] if env['args'] else []
    shopcenters = list(
        await manager.execute(
            shopcenter.select()
            .where(shopcenter.slot == "apartment")
            .order_by(shopcenter.price)
        )
    )
    if len(check) < 1:
        text = f"–∫–≤–∞—Ä—Ç–∏—Ä—ã:\n"
        for i in range(len(shopcenters)):
            text += f"{'üî∏' if profile.money < shopcenters[i].price else 'üîπ'} {i + 1}. {shopcenters[i].name} - {humanize(shopcenters[i].price)}$\n"
        return await env.reply(text + f'\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "—ç–∫–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã [–Ω–æ–º–µ—Ä]"')
    else:
        if profile.apartment:
            return await env.reply(
                f'—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä–∞ ({profile.apartment.name}), –≤–≤–µ–¥–∏—Ç–µ "—ç–∫–æ –ø—Ä–æ–¥–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É"'
            )
        if not check[0].isdigit():
            return
        if int(check[0]) > len(shopcenters):
            return
        if int(profile.money) < shopcenters[int(check[0]) - 1].price:
            return await env.reply(f"—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ {plugin.negative}")
        profile.money -= shopcenters[int(check[0]) - 1].price
        profile.apartment = shopcenters[int(check[0]) - 1]
        await manager.update(profile)
        return await env.reply(
            f"–≤—ã –∫—É–ø–∏–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É ({shopcenters[int(check[0]) - 1].name}) –∑–∞ {humanize(shopcenters[int(check[0]) - 1].price)}$ {plugin.positive}"
        )


@plugin.on_startswith_text("—ç–∫–æ —Ç–µ–ª–µ—Ñ–æ–Ω—ã")
async def cars(msg, ats, env):
    profile = await get_or_create_profile(msg.from_id)
    check = env['args'] if env['args'] else []
    shopcenters = list(
        await manager.execute(
            shopcenter.select()
            .where(shopcenter.slot == "mobile")
            .order_by(shopcenter.price)
        )
    )
    if len(check) < 1:
        text = f"—Ç–µ–ª–µ—Ñ–æ–Ω—ã:\n"
        for i in range(len(shopcenters)):
            text += f"{'üî∏' if profile.money < shopcenters[i].price else 'üîπ'} {i + 1}. {shopcenters[i].name} - {humanize(shopcenters[i].price)}$\n"
        return await env.reply(text + f'\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "—ç–∫–æ —Ç–µ–ª–µ—Ñ–æ–Ω—ã [–Ω–æ–º–µ—Ä]"')
    else:
        if profile.mobile:
            return await env.reply(
                f'—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω ({profile.mobile.name}), –≤–≤–µ–¥–∏—Ç–µ "—ç–∫–æ –ø—Ä–æ–¥–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"'
            )
        if not check[0].isdigit():
            return
        if int(check[0]) > len(shopcenters):
            return
        if int(profile.money) < shopcenters[int(check[0]) - 1].price:
            return await env.reply(f"—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ {plugin.negative}")
        profile.money -= shopcenters[int(check[0]) - 1].price
        profile.mobile = shopcenters[int(check[0]) - 1]
        await manager.update(profile)
        return await env.reply(
            f"–≤—ã –∫—É–ø–∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω ({shopcenters[int(check[0]) - 1].name}) –∑–∞ {humanize(shopcenters[int(check[0]) - 1].price)}$ {plugin.positive}"
        )


@plugin.on_startswith_text("—ç–∫–æ –ø—Ä–æ–¥–∞—Ç—å –±–∏—Ç–∫–æ–∏–Ω")
async def btc(msg, ats, env):
    profile = await get_or_create_profile(msg.from_id)
    try:
        amount = env['args'][0]
        if not amount or int(amount) <= 0:
            raise ValueError()
        if amount == "–≤—Å—ë" or amount == "–≤—Å–µ":
            amount = profile.btc
        num = int(amount)
    except (ValueError, KeyError, IndexError) as e:
        num = 1
    if num > int(profile.btc):
        return await env.reply("–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏—Ç–∫–æ–∏–Ω–æ–≤")
    profile.money += int(plugin.bitcoin) * int(num)
    profile.btc -= int(num)

    kb = VKKeyboard()
    kb.set_inline(True)
    kb.add_row()
    kb.edit_row(0).add_button("‚Çø –ø—Ä–æ–¥–∞—Ç—å —Å—Ç–æ–ª—å–∫–æ –∂–µ", payload={'command': f'{env.eenv.prefix}—ç–∫–æ –ø—Ä–æ–¥–∞—Ç—å –±–∏—Ç–∫–æ–∏–Ω {num}'})
    if profile.btc > 0:
        kb.add_row()
        kb.edit_row(1).add_button("‚Çø –ø—Ä–æ–¥–∞—Ç—å –≤—Å—ë", payload={'command': f'{env.eenv.prefix}—ç–∫–æ –ø—Ä–æ–¥–∞—Ç—å –±–∏—Ç–∫–æ–∏–Ω {profile.btc}'})
    await manager.update(profile)
    return await env.reply(
        f"–≤—ã –ø—Ä–æ–¥–∞–ª–∏ {int(num)}…É –∑–∞ {humanize(int(plugin.bitcoin) * int(num))}$.",
        keyboard=kb.dump_keyboard()
    )


@plugin.on_startswith_text("—ç–∫–æ —Ä–µ–π—Ç–∏–Ω–≥")
async def raiting(msg, ats, env):
    profile = await get_or_create_profile(msg.from_id)
    try:
        amount = env['args'][0]
        if not amount.isdigit():
            return await env.reply("—á–∏—Å–ª–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ")
    except (ValueError, KeyError, IndexError):
        if profile.rg > 0:
            return await env.reply(f"–≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥ - {profile.rg}üëë")
        return await env.reply(f"—É –≤–∞—Å –Ω–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ {plugin.negative}")
    if int(amount) * int(100_000_000) > int(profile.money):
        return await env.reply(
            f"–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ {plugin.negative}"
        )
    profile.money -= int(100_000_000) * int(amount)
    profile.rg += int(amount)
    
    kb = None
    if profile.money > (int(100_000_00) * int(amount)):
        kb = VKKeyboard()
        kb.lazy_buttons({
            'inline': True,
            'buttons': [
                {'text': '–ö—É–ø–∏—Ç—å —Å—Ç–æ–ª—å–∫–æ –∂–µ', 'payload': {'command': f'{env.eenv.prefix}—ç–∫–æ —Ä–µ–π—Ç–∏–Ω–≥ {amount}'}, 'color': 'positive'}
            ]
        })
    await manager.update(profile)
    return await env.reply(
        f"–≤—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {int(amount)}üëë –∑–∞ {humanize(int(100000000) * int(amount))}$.",
        keyboard=kb.dump_keyboard() if kb else "{}"
    )


@plugin.on_startswith_text("—ç–∫–æ –ø—Ä–æ–¥–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥")
async def raiting_sell(msg, ats, env):
    profile = await get_or_create_profile(msg.from_id)
    try:
        amount = env['args'][0]
        if not amount or int(amount) <= 0:
            raise ValueError()
        if amount == "–≤—Å—ë" or amount == "–≤—Å–µ":
            amount = profile.rg
        num = int(amount)
    except (ValueError, KeyError, IndexError) as e:
        num = 1
    if num > int(profile.rg):
        return await env.reply("—É –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ —Ä–µ–π—Ç–∏–Ω–≥–∞")
    profile.money += int(100_000_000) * int(num)
    profile.rg -= int(num)
    await manager.update(profile)
    return await env.reply(
        f"–≤—ã –ø—Ä–æ–¥–∞–ª–∏ {int(num)}üëë –∑–∞ {humanize(int(100000000) * int(num))}$."
    )


@plugin.on_startswith_text("—ç–∫–æ –ø—Ä–æ–¥–∞—Ç—å")
async def sell(msg, ats, env):
    try:
        slot = env['args'][0]
    except (ValueError, KeyError, IndexError):
        return
    if slot.lower() not in (
        "–¥–æ–º",
        "–º–∞—à–∏–Ω—É",
        "–≤–µ—Ä—Ç–æ–ª–µ—Ç",
        "–∫–≤–∞—Ä—Ç–∏—Ä—É",
        "—Å–∞–º–æ–ª–µ—Ç",
        "—Ç–µ–ª–µ—Ñ–æ–Ω",
        "—è—Ö—Ç—É",
    ):
        return
    profile = await get_or_create_profile(msg.from_id)
    amount = 1
    data = None
    d_type = 0
    if slot.lower() == "–¥–æ–º":
        data = profile.house_id
        profile.house_id = None
    if slot.lower() == "–º–∞—à–∏–Ω—É":
        data = profile.car_id
        profile.car_id = None
    if slot.lower() == "–≤–µ—Ä—Ç–æ–ª–µ—Ç":
        data = profile.helicopter_id
        profile.helicopter_id = None
    if slot.lower() == "–∫–≤–∞—Ä—Ç–∏—Ä—É":
        data = profile.apartment_id
        profile.apartment_id = None
    if slot.lower() == "—Å–∞–º–æ–ª–µ—Ç":
        data = profile.airplane_id
        profile.airplane_id = None
    if slot.lower() == "—Ç–µ–ª–µ—Ñ–æ–Ω":
        data = profile.mobile_id
        profile.mobile_id = None
    if slot.lower() == "—è—Ö—Ç—É":
        data = profile.yacht
        profile.yacht_id = None
    try:
        if data is None:
            return await env.reply(
                "—É –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ {}".format(plugin.negative)
            )
    except (TypeError):
        return await env.reply("—É –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ {}".format(plugin.negative))
    if d_type == 1:
        shopcenters = await manager.get(business_shop, business_shop.id == data)
    else:
        shopcenters = await manager.get(shopcenter, shopcenter.id == data)
    pr = (shopcenters.price * amount) // 1.5
    profile.money += int(pr)
    await manager.update(profile)
    return await env.reply(f"–≤—ã –ø—Ä–æ–¥–∞–ª–∏ {slot.lower()} –∑–∞ {humanize(pr)}$")


@plugin.on_startswith_text("—ç–∫–æ –ø–µ—Ä–µ–¥–∞—Ç—å")
async def btc_send(msg, ats, env):
    profile = await get_or_create_profile(msg.from_id)
    try:
        user_idd, amount = env['args'][0], env['args'][1]
    except (ValueError, KeyError, IndexError):
        return
    if not await get_or_none(Profile, id=user_idd):
        return await env.reply("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    if int(user_idd) == profile.id:
        return await env.reply("–ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ.")
    c, cr = await manager.get_or_create(Profile, id=user_idd)
    data = c.user_id
    username = await parse_user_name(env, data)
    if amount == "–≤—Å—ë" or amount == "–≤—Å–µ":
        amount = profile.money
        result = amount
    else:
        if not amount.isdigit():
            return await env.reply("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")

        result = int(amount)

    if int(result) < 1:
        return await env.reply("—á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
    if int(profile.money) < result:
        return await env.reply("–Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
    c.money += result
    profile.money -= result
    await env.reply(
        f"–≤—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} —Å—É–º–º—É –≤ —Ä–∞–∑–º–µ—Ä–µ {humanize(result)}$ ."
    )
    user_from = await parse_user_name(env, msg.from_id)
    await env.request(
        "messages.send",
        user_id=c.user_id,
        message=f"–ò–≥—Ä–æ–∫ @id{msg.from_id} ({user_from}) –ø–µ—Ä–µ–¥–∞–ª –≤–∞–º —Å—É–º–º—É –≤ —Ä–∞–∑–º–µ—Ä–µ {humanize(result)}$.",
    )
    await manager.update(profile)
    return await manager.update(c)


@plugin.on_startswith_text("—ç–∫–æ –±–∏—Ç–∫–æ–∏–Ω")
async def btc(msg, ats, env):
    profile = await get_or_create_profile(msg.from_id)
    try:
        amount = env['args'][0]
        if not amount or int(amount) <= 0:
            raise ValueError()
    except (ValueError, KeyError, IndexError):
        if int(profile.btc) > 0:
            return await env.reply(f"–Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ {profile.btc}‚Çø")
        return await env.reply(f"—É –≤–∞—Å –Ω–µ—Ç –±–∏—Ç–∫–æ–∏–Ω–æ–≤ {plugin.negative}")
    if int(profile.money) < int(plugin.bitcoin) * int(amount):
        return await env.reply(
            "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ {}\n–ö—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞: {}$".format(
                plugin.negative, humanize(plugin.full_bitcoin)
            )
        )
    profile.money -= int(plugin.bitcoin) * int(amount)
    profile.btc += int(amount)
    await manager.update(profile)

    kb = None
    if profile.money > (int(plugin.bitcoin) * int(amount)):
        kb = VKKeyboard()
        kb.lazy_buttons({
            'inline': True,
            'buttons': [
                {'text': '‚Çø –∫—É–ø–∏—Ç—å —Å—Ç–æ–ª—å–∫–æ –∂–µ', 'payload': {'command': f'{env.eenv.prefix}—ç–∫–æ –±–∏—Ç–∫–æ–∏–Ω {amount}'}, 'color': 'positive'}
            ]
        })
    return await env.reply(
        f"–≤—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {int(amount)}…É –∑–∞ {humanize(int(plugin.bitcoin) * int(amount))}$.",
        keyboard=kb.dump_keyboard() if kb else "{}"
    )

@plugin.on_startswith_text("—ç–∫–æ –±–∞–Ω–∫")
async def bank_operation(msg, ats, env):
    profile = await get_or_create_profile(msg.from_id)
    # operation - 0
    # summ - 1
    operation = None
    args = env['args']
    
    if not args and len(args)<2:
        operation = "balance"
    elif args and len(args)<2:
        return await env.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –±–∞–Ω–∫–æ–º")
    elif args[0] == "—Å–Ω—è—Ç—å":
        operation = "payout"
    elif args[0] == "–≤–ª–æ–∂–∏—Ç—å":
        operation = "payin"
    else:
        operation = "balance"

    if operation == "balance":
        if int(profile.bankmoney) > 0:
            kb = VKKeyboard()
            kb.lazy_buttons({
                'inline': True,
                'buttons': [
                    {'text': 'üí∏ 100', 'payload': {'command': f'{env.eenv.prefix}—ç–∫–æ –±–∞–Ω–∫ –≤–ª–æ–∂–∏—Ç—å 100'}, 'color': 'primary'},
                    {'text': 'üí∏ 1000', 'payload': {'command': f'{env.eenv.prefix}—ç–∫–æ –±–∞–Ω–∫ –≤–ª–æ–∂–∏—Ç—å 1000'}, 'color': 'primary'},
                    {'text': 'üí∏ 10 000', 'payload': {'command': f'{env.eenv.prefix}—ç–∫–æ –±–∞–Ω–∫ –≤–ª–æ–∂–∏—Ç—å 10000'}, 'color': 'primary'},
                    {'text': 'üí∏ 100 000', 'payload': {'command': f'{env.eenv.prefix}—ç–∫–æ –±–∞–Ω–∫ –≤–ª–æ–∂–∏—Ç—å 100000'}, 'color': 'primary'},
                    {'text': 'üí∏ 1 000 000', 'payload': {'command': f'{env.eenv.prefix}—ç–∫–æ –±–∞–Ω–∫ –≤–ª–æ–∂–∏—Ç—å 1000000'}, 'color': 'primary'},
                    {'text': 'üí∏ 100 000 000', 'payload': {'command': f'{env.eenv.prefix}—ç–∫–æ –±–∞–Ω–∫ –≤–ª–æ–∂–∏—Ç—å 100000000'}, 'color': 'primary'},
                    {'text': 'üí∏ 1 000 000 000', 'payload': {'command': f'{env.eenv.prefix}—ç–∫–æ –±–∞–Ω–∫ –≤–ª–æ–∂–∏—Ç—å 1000000000'}, 'color': 'primary'}
                ]
            })
            kb.add_row()
            kb.edit_row(2).add_button("C–Ω—è—Ç—å –≤—Å—ë", payload={'command': f'{env.eenv.prefix}—ç–∫–æ –±–∞–Ω–∫ —Å–Ω—è—Ç—å –≤—Å–µ'}, color="positive")
            return await env.reply(
                f"–Ω–∞ –≤–∞—à–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å—á–µ—Ç–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è {humanize(profile.bankmoney)}$",
                keyboard=kb.dump_keyboard()
            )
        else:
            kb = VKKeyboard()
            kb.lazy_buttons({
                'inline': True,
                'buttons': [
                    {'text': 'üí∏ 100', 'payload': {'command': f'{env.eenv.prefix}—ç–∫–æ –±–∞–Ω–∫ –≤–ª–æ–∂–∏—Ç—å 100'}, 'color': 'primary'},
                    {'text': 'üí∏ 1000', 'payload': {'command': f'{env.eenv.prefix}—ç–∫–æ –±–∞–Ω–∫ –≤–ª–æ–∂–∏—Ç—å 1000'}, 'color': 'primary'},
                    {'text': 'üí∏ 10 000', 'payload': {'command': f'{env.eenv.prefix}—ç–∫–æ –±–∞–Ω–∫ –≤–ª–æ–∂–∏—Ç—å 10000'}, 'color': 'primary'},
                    {'text': 'üí∏ 100 000', 'payload': {'command': f'{env.eenv.prefix}—ç–∫–æ –±–∞–Ω–∫ –≤–ª–æ–∂–∏—Ç—å 100000'}, 'color': 'primary'},
                    {'text': 'üí∏ 1 000 000', 'payload': {'command': f'{env.eenv.prefix}—ç–∫–æ –±–∞–Ω–∫ –≤–ª–æ–∂–∏—Ç—å 1000000'}, 'color': 'primary'},
                    {'text': 'üí∏ 100 000 000', 'payload': {'command': f'{env.eenv.prefix}—ç–∫–æ –±–∞–Ω–∫ –≤–ª–æ–∂–∏—Ç—å 100000000'}, 'color': 'primary'},
                    {'text': 'üí∏ 1 000 000 000', 'payload': {'command': f'{env.eenv.prefix}—ç–∫–æ –±–∞–Ω–∫ –≤–ª–æ–∂–∏—Ç—å 1000000000'}, 'color': 'primary'}
                ]
            })
            return await env.reply(
                "–≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤–∫–ª–∞–¥—ã–≤–∞–ª–∏ –≤ –±–∞–Ω–∫!",
                keyboard=kb.dump_keyboard()
            )
    
    amount = 0
    if args[1] == "–≤—Å—ë" or args[1] == "–≤—Å–µ":
        amount = int(profile.bankmoney) - 100
    else:
        if args[1].isdigit():
            amount = int(args[1])
        else:
            return await env.reply("–°—É–º–º–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    if operation == "payout":
        if profile.bankmoney < amount:
            return await env.reply("–ù–∞ –≤–∞—à–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å—á–µ—Ç—É –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥")

        profile.bankmoney -= amount
        profile.money += amount
        await manager.update(profile)
        return await env.reply(
            "–≤—ã —Å–Ω—è–ª–∏ {}$\nüí≥ –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å—á—ë—Ç–µ: {}$\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {}$".format(
                humanize(amount), humanize(profile.bankmoney), humanize(profile.money)
            )
        )

    if operation == "payin":
        if amount < 50:
            return await env.reply("–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤–∫–ª–∞–¥–∞ 50$")
        if profile.money < amount:
            return await env.reply("–°—É–º–º–∞ –Ω–∞ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –º–µ–Ω—å—à–µ —á–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–ª–æ–∂–∏—Ç—å")

        profile.bankmoney += amount
        profile.money -= amount
        await manager.update(profile) 
        return await env.reply(f"–≤—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç –Ω–∞ {humanize(amount)}$")

@plugin.on_text("—ç–∫–æ —Ç–æ–ø")
async def top(msg, ats, env):
    profile = await get_or_create_profile(msg.from_id)
    top = list(
        await manager.execute(
            Profile.select()
            .where(Profile.money > 5000)
            .order_by(
                (
                    Profile.rg * int(100_000_000) + Profile.money + Profile.bankmoney
                ).desc()
            )
        )
    )
    data = []
    for u in top:
        privs = await priviligeshelper.getUserPriviliges(env, u.user_id)
        if privs&priviligeshelper.USER_ADMIN>0 or privs&priviligeshelper.USER_MODERATOR>0:
            continue
        data.append({"id": u.user_id, "rg": u.rg, "money": u.money, "bankmoney": u.bankmoney})

    mesto = list(z["id"] for z in data)
    text = "—Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n"
    for i in enumerate(data[:10], start=1):
        name = await parse_user_name(env, i[1]["id"])
        num = num_to_smile(i[0])
        text += f"{num}. @id{i[1]['id']} ({name}) -- üëë{textify_value(round(i[1]['rg']))} | {textify_value(int(i[1]['money'] + i[1]['bankmoney']))}$\n"
    if msg.from_id in mesto and mesto.index(int(msg.from_id)) + 1 > 10:
        name = await parse_user_name(env, msg.from_id)
        num = num_to_smile(mesto.index(int(msg.from_id)) + 1)
        text += f"----------------------------\n{num if int(mesto.index(int(msg.from_id)) + 1) < 100 else '‚ñ∂' + '1‚É£0‚É£0‚É£'}. {name} -- üëë{textify_value(round(profile.rg))} | {textify_value(int(profile.money + profile.bankmoney))}$"
    return await env.reply(text)


@plugin.on_text("—ç–∫–æ —Ä–∞–±–æ—Ç–∞—Ç—å")
async def working(msg, ats, env):
    profile = await get_or_create_profile(msg.from_id)
    if not profile.job:
        return await env.reply(
            f'–≤—ã –Ω–∏–≥–¥–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ {plugin.negative}\n–î–ª—è —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–µ–¥–∏—Ç–µ "—Ä–∞–±–æ—Ç–∞"'
        )
    if profile.last_job_end and profile.last_job_end > datetime.datetime.now():
        data = profile.last_job_end - datetime.datetime.now()
        hours, minutes, seconds = convert_timedelta(data)
        plural_h = plural_form(hours, ("—á–∞—Å", "—á–∞—Å–∞", "—á–∞—Å–æ–≤"))
        plural_m = plural_form(minutes, ("–º–∏–Ω—É—Ç–∞", "–º–∏–Ω—É—Ç—ã", "–º–∏–Ω—É—Ç"))
        return await env.reply(
            f"—Ä–∞–±–æ—á–∞—è –Ω–µ–¥–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n‚è≥ –í—ã —Å–º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ {minutes}:{seconds if seconds >= 10 else '0' + str(seconds)}"
        )
    if profile.job_days == 1:
        profile.last_job_end = datetime.datetime.now() + datetime.timedelta(hours=1)
    profile.job_days -= 1 if profile.job_days != 1 else -2
    pay = profile.job.pay + random.randint(100, 2000)
    profile.money += Decimal(pay)
    profile.job_worked += 1
    await manager.update(profile)
    vk_message = f"—Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –∑–∞–∫–æ–Ω—á–µ–Ω.\nüíµ–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {humanize(pay)}$\n"
    shopcenters = list(
        await manager.execute(
            jobs.select()
            .where(profile.job_worked >= jobs.need_days)
            .order_by(jobs.need_days)
        )
    )
    allowed_works = []
    for i in range(len(shopcenters)):
        if (
            shopcenters[i].need_days == profile.job_worked
            and shopcenters[i].name != profile.job.name
        ):
            allowed_works.append(
                f"&#12288;üîπ {shopcenters[i].type_name} - {shopcenters[i].name}"
            )
    if len(allowed_works) > 0:
        nextline = "\n"
        vk_message += f"üí° –î–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–≤—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:\n{nextline.join(allowed_works)}"

    kb = VKKeyboard()
    kb.set_inline(True)
    kb.add_row()
    kb.edit_row(0).add_button("üíµ –†–∞–±–æ—Ç–∞—Ç—å –µ—â—ë", payload={'command': f'{env.eenv.prefix}—ç–∫–æ —Ä–∞–±–æ—Ç–∞—Ç—å'}, color="positive")
    kb.add_row()
    kb.edit_row(1).add_button("üíµ –£–π—Ç–∏ —Å —Ä–∞–±–æ—Ç—ã", payload={'command': f'{env.eenv.prefix}—ç–∫–æ —É–≤–æ–ª–∏—Ç—å—Å—è'}, color="negative")
    return await env.reply(vk_message, keyboard=kb.dump_keyboard())


@plugin.on_text("—ç–∫–æ —É–≤–æ–ª–∏—Ç—å—Å—è")
async def leave_job(msg, ats, env):
    profile = await get_or_create_profile(msg.from_id)
    if not profile.job:
        return await env.reply(
            f'–≤—ã –Ω–∏–≥–¥–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ {plugin.negative}\n–î–ª—è —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–µ–¥–∏—Ç–µ "—Ä–∞–±–æ—Ç–∞"'
        )
    profile.job = None
    await manager.update(profile)
    return await env.reply(f"–≤—ã —É–≤–æ–ª–∏–ª–∏—Å—å —Å–æ —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã {plugin.negative}")


@plugin.on_startswith_text("—ç–∫–æ —Ä–∞–±–æ—Ç–∞")
async def work(msg, ats, env):
    if "—Ä–∞–±–æ—Ç–∞—Ç—å" in env['args']:
        return
    profile = await get_or_create_profile(msg.from_id)
    check = env['args'] if env['args'] else []
    num = 1
    if len(check) < 1:
        shopcenters = list(
            await manager.execute(
                jobs.select(jobs.type_name)
                .where(profile.job_worked >= jobs.need_days)
                .order_by(jobs.pay)
            )
        )
        text = f"–≤—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ –æ–¥–Ω—É –∏–∑ —Ä–∞–±–æ—Ç:\n"
        jobs_type = []
        jobs_user = {}
        for i in range(len(shopcenters)):
            if shopcenters[i].type_name in jobs_type:
                continue
            text += f"üîπ {num_to_smile(num)}. {shopcenters[i].type_name}\n"
            num += 1
            jobs_type.append(shopcenters[i].type_name)
        plugin.jobs_user[msg.from_id] = jobs_type
        text += '–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –≤–≤–µ–¥–∏—Ç–µ "—Ä–∞–±–æ—Ç–∞ [–Ω–æ–º–µ—Ä]"'
        plugin.is_active[msg.from_id] = 1
        return await env.reply(text)
    else:
        if msg.from_id not in plugin.is_active:
            return await env.reply(
                '–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "—Ä–∞–±–æ—Ç–∞" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π'
            )

        if not check[0].isdigit():
            return await env.reply("–≤—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!")

        if plugin.is_active[msg.from_id] == 1 and int(check[0]) - 1 > len(
            plugin.jobs_user[msg.from_id]
        ):
            return await env.reply(
                "—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã, —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –≤–∞—Å —Ä–∞–±–æ—Ç - —Ä–∞–±–æ—Ç–∞"
            )
        if not check[0].isdigit():
            return await env.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∂–µ–ª–∞–µ–º–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        numerate = 1
        if plugin.is_active[msg.from_id] == 1:
            user_jobs = []
            try:
                jobs_list = list(
                    await manager.execute(
                        jobs.select()
                        .where(
                            jobs.type_name
                            == plugin.jobs_user[msg.from_id][int(check[0]) - 1]
                        )
                        .order_by(jobs.pay)
                    )
                )
            except:
                return await env.reply("—É–∫–∞–∑–∞–Ω–Ω–∞—è –≤–∞–º–∏ —Ä–∞–±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            vk_message = (
                f"–ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ ({plugin.jobs_user[msg.from_id][(int(check[0])-1)]}):\n"
            )
            for i in range(len(jobs_list)):
                if jobs_list[i].need_days > profile.job_worked:
                    continue
                user_jobs.append(jobs_list[i])
                vk_message += f"üîπ {num_to_smile(numerate)}. {jobs_list[i].name} - –∑–∞—Ä–ø–ª–∞—Ç–∞ ~ {jobs_list[i].pay * 3}$\n"
                numerate += 1
            plugin.user_jobs[msg.from_id] = user_jobs
            vk_message += '–¥–ª—è —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–µ–¥–∏—Ç–µ "—ç–∫–æ —Ä–∞–±–æ—Ç–∞ [–Ω–æ–º–µ—Ä]"'
            plugin.is_active[msg.from_id] = 2
            return await env.reply(vk_message)
        if plugin.is_active[msg.from_id] == 2:
            if profile.job:
                return await env.reply(
                    f'–≤—ã —É–∂–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–µ–Ω—ã –≤ {profile.job.type_name} - {profile.job.name}\nüíæ–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "—ç–∫–æ —É–≤–æ–ª–∏—Ç—å—Å—è"'
                )
            if int(check[0]) - 1 > len(plugin.user_jobs[msg.from_id]):
                return await env.reply("–¥–∞–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            try:
                profile.job = plugin.user_jobs[msg.from_id][int(check[0]) - 1]
            except:
                return await env.reply("–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—ë–º–µ –Ω–∞ —Ä–∞–±–æ—Ç—É, –≤–æ–∑–º–æ–∂–Ω–æ –≤–∞–º –æ—Ç–∫–∞–∑–∞–ª–∏!")
            plugin.is_active.pop(msg.from_id)
            vk_message = f'–≤—ã —É—Å—Ç—Ä–æ–∏–ª–∏—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å –≤ {plugin.user_jobs[msg.from_id][int(check[0]) - 1].type_name} - {plugin.user_jobs[msg.from_id][int(check[0]) - 1].name}\nüëî–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "—ç–∫–æ —Ä–∞–±–æ—Ç–∞—Ç—å".'
            await manager.update(profile)
            return await env.reply(vk_message)


@plugin.on_startswith_text("—ç–∫–æ –±–∏–∑–Ω–µ—Å—ã")
async def businesses(msg, ats, env):
    check = env['args'] if env['args'] else []
    profile = await get_or_create_profile(msg.from_id)
    shopcenters = list(await manager.execute(business.select().order_by(business.price)))
    if len(check) < 1:
        text = f"–±–∏–∑–Ω–µ—Å—ã:\n"
        for i in range(len(shopcenters)):
            text += f"{'üî∏' if profile.money < shopcenters[i].price else 'üîπ'} {i + 1}. {shopcenters[i].level1_name} - {humanize(shopcenters[i].price)}$\n&#12288;–ü—Ä–∏–±—ã–ª—å: {humanize(shopcenters[i].pay)}\n"
        return await env.reply(text + f'\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "—ç–∫–æ –±–∏–∑–Ω–µ—Å—ã [–Ω–æ–º–µ—Ä]"')
    else:
        if not check[0].isdigit():
            return
        if (
            profile.business1
            and profile.business2
            or profile.business2
            and profile.business1
        ):
            return await env.reply(
                f'—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 2 –±–∏–∑–Ω–µ—Å–∞, –≤–≤–µ–¥–∏—Ç–µ "—ç–∫–æ –ø—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å [–Ω–æ–º–µ—Ä]"'
            )
        if (
            profile.business1
            and profile.business1_id == shopcenters[int(check[0]) - 1].id
            or profile.business2
            and profile.business2_id == shopcenters[int(check[0]) - 1].id
        ):
            return await env.reply("—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –±–∏–∑–Ω–µ—Å")
        if not check[0].isdigit():
            return
        if int(check[0]) > len(shopcenters):
            return
        if int(profile.money) < shopcenters[int(check[0]) - 1].price:
            return await env.reply(f"—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ {plugin.negative}")
        profile.money -= shopcenters[int(check[0]) - 1].price
        if profile.business1 and not profile.business2:
            profile.business2 = shopcenters[int(check[0]) - 1]
            profile.business2_run = datetime.datetime.now()
            profile.business2_works = 1
            profile.business2_level = 1
            profile.business2_money = 0
        else:
            profile.business1 = shopcenters[int(check[0]) - 1]
            profile.business1_run = datetime.datetime.now()
            profile.business1_works = 1
            profile.business1_level = 1
            profile.business1_money = 0
        await manager.update(profile)
        return await env.reply(
            f'–≤—ã –∫—É–ø–∏–ª–∏ –±–∏–∑–Ω–µ—Å ({shopcenters[int(check[0]) - 1].level1_name}) –∑–∞ {humanize(shopcenters[int(check[0]) - 1].price)}$ {plugin.positive}\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∏–∑–Ω–µ—Å–æ–≤, –≤–≤–µ–¥–∏—Ç–µ "—ç–∫–æ –±–∏–∑–Ω–µ—Å [1-2]"'
        )


@plugin.on_startswith_text("—ç–∫–æ –±–∏–∑–Ω–µ—Å")
async def business_menu(msg, ats, env):
    check = env['args'] if env['args'] else []
    check1 = env['args'] if env['args'] else []
    profile = await get_or_create_profile(msg.from_id)
    num = 1
    if (
        not profile.business1
        and not profile.business2
        or not profile.business2
        and not profile.business1
    ):
        return await env.reply(f"—É –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞, –∫—É–ø–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ")
    if len(check) < 1:
        if (
            profile.business1
            and not profile.business2
            or profile.business2
            and not profile.business1
        ):
            business_name = await parse_business_name(
                msg.from_id, 1 if profile.business1 else 2
            )
            text = f'—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ "{business_name}":\n'
            if profile.business1:
                kb = VKKeyboard()
                kb.set_inline(True)
                kb.add_row()
                kb.edit_row(0).add_button("üí∞ –°–Ω—è—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—É—é –ø—Ä–∏–±—ã–ª—å", payload={'command': f'{env.eenv.prefix}—ç–∫–æ –±–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å 1 –≤—Å–µ'}, color="positive") 
                pay = profile.business1_works * 50_000 + profile.business1.pay
                text += f"üí∏ –ü—Ä–∏–±—ã–ª—å: {humanize(pay)}$/—á–∞—Å\n"
                if profile.business1_level == 1:
                    works = profile.business1.max_works
                elif profile.business1_level == 2:
                    works = profile.business1.max_works * 5
                else:
                    works = profile.business1.max_works * 5 * 3
                text += f"üíº –†–∞–±–æ—á–∏—Ö: {profile.business1_works}/{works}\n"
                a = time.time()
                b = time.mktime(profile.business1_run.timetuple())
                res = (a - b) // 3600
                profile.business1_money += (
                    Decimal(pay * res) if (pay) * res != profile.last_bus1_pay else 0
                )
                profile.last_bus1_pay = Decimal(pay * res)
                await manager.update(profile)
                text += f"üí∞ –ù–∞ —Å—á—ë—Ç–µ: {humanize(profile.business1_money)}$\n"
                if profile.business1_works < works:
                    text += '‚ö† –£ –≤–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª—é–¥–µ–π, –æ—Ç —ç—Ç–æ–≥–æ —É–º–µ–Ω—å—à–µ–Ω–∞ –ø—Ä–∏–±—ã–ª—å. –í–≤–µ–¥–∏—Ç–µ "–ë–∏–∑–Ω–µ—Å –Ω–∞–Ω—è—Ç—å 1 [–∫–æ–ª-–≤–æ]"'
                if profile.business1_level < 3:
                    text += f'\n‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ! ({humanize(profile.business1.up_price * (profile.business1_level + 1) if profile.business1_level > 1 else profile.business1.up_price)}$)\n–í–≤–µ–¥–∏—Ç–µ "–ë–∏–∑–Ω–µ—Å —É–ª—É—á—à–∏—Ç—å 1" –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞'
                return await env.reply(text, keyboard=kb.dump_keyboard())
            else:
                kb = VKKeyboard()
                kb.set_inline(True)
                kb.add_row()
                kb.edit_row(0).add_button("üí∞ –°–Ω—è—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—É—é –ø—Ä–∏–±—ã–ª—å", payload={'command': f'{env.eenv.prefix}—ç–∫–æ –±–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å 2 –≤—Å–µ'}, color="positive") 
                pay = profile.business2_works * 50_000 + profile.business2.pay
                text += f"üí∏ –ü—Ä–∏–±—ã–ª—å: {humanize(pay)}$/—á–∞—Å\n"
                if profile.business2_level == 1:
                    works = profile.business2.max_works
                elif profile.business2_level == 2:
                    works = profile.business2.max_works * 5
                else:
                    works = profile.business2.max_works * 5 * 3
                text += f"üíº –†–∞–±–æ—á–∏—Ö: {profile.business2_works}/{works}\n"
                a = time.time()
                b = time.mktime(profile.business2_run.timetuple())
                res = (a - b) // 3600
                profile.business2_money += (
                    Decimal(pay * res) if (pay) * res != profile.last_bus2_pay else 0
                )
                profile.last_bus2_pay = Decimal(pay * res)
                await manager.update(profile)
                text += f"üí∞ –ù–∞ —Å—á—ë—Ç–µ: {humanize(profile.business2_money)}$\n"
                if profile.business2_works < works:
                    text += '‚ö† –£ –≤–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª—é–¥–µ–π, –æ—Ç —ç—Ç–æ–≥–æ —É–º–µ–Ω—å—à–µ–Ω–∞ –ø—Ä–∏–±—ã–ª—å. –í–≤–µ–¥–∏—Ç–µ "–ë–∏–∑–Ω–µ—Å –Ω–∞–Ω—è—Ç—å 2 [–∫–æ–ª-–≤–æ]"'
                if profile.business2_level < 3:
                    text += f'\n‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ! ({humanize(profile.business2.up_price * (profile.business2_level + 1) if profile.business2_level > 1 else profile.business2.up_price)}$)\n–í–≤–µ–¥–∏—Ç–µ "–ë–∏–∑–Ω–µ—Å —É–ª—É—á—à–∏—Ç—å 2" –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞'
                return await env.reply(text, keyboard=kb.dump_keyboard())
        else:
            text = '—É –≤–∞—Å –≤ –Ω–∞–ª–∏—á–∏–∏ 2 –±–∏–∑–Ω–µ—Å–∞.\n–í–≤–µ–¥–∏—Ç–µ "—ç–∫–æ –±–∏–∑–Ω–µ—Å [1-2]" –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∏—Ö:\n'
            business1_name = await parse_business_name(msg.from_id, 1)
            business2_name = await parse_business_name(msg.from_id, 2)
            smile1 = await parse_business_smile(msg.from_id, 1)
            smile2 = await parse_business_smile(msg.from_id, 2)
            text += f"1‚É£. {smile1}{business1_name}\n2‚É£. {smile2}{business2_name}"
            return await env.reply(text)
    else:
        if check[0].lower() == "—É–ª—É—á—à–∏—Ç—å":
            if len(check) < 2:
                return
            if not check[1].isdigit() or int(check[1]) > 2 or int(check[1]) < 1:
                return
            if int(check[1]) == 2:
                if not profile.business2:
                    return
                if profile.business2_level >= 3:
                    return await env.reply("–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π")
                price = (
                    profile.business2.up_price * (profile.business2_level + 1)
                    if profile.business2_level > 1
                    else profile.business2.up_price
                )
                if profile.money < price:
                    return await env.reply("–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
                profile.business2_level += 1
                profile.money -= Decimal(price)
                await manager.update(profile)
                business_name = await parse_business_name(msg.from_id, 2)
                return await env.reply(f'–≤—ã —É–ª—É—á—à–∏–ª–∏ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å –¥–æ "{business_name}"')
            elif int(check[1]) == 1:
                if not profile.business1:
                    return
                if profile.business1_level >= 3:
                    return await env.reply("–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π")
                price = (
                    profile.business1.up_price * (profile.business1_level + 1)
                    if profile.business1_level > 1
                    else profile.business1.up_price
                )
                if profile.money < price:
                    return await env.reply("–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
                profile.business1_level += 1
                profile.money -= Decimal(price)
                await manager.update(profile)
                business_name = await parse_business_name(msg.from_id, 1)
                return await env.reply(f'–≤—ã —É–ª—É—á—à–∏–ª–∏ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å –¥–æ "{business_name}"')
        elif check[0].lower() == "—Å–Ω—è—Ç—å":
#0 - —Å–Ω—è—Ç—å
#1 - {1-2}
#2 - –∫–æ–ª-–≤–æ
            if len(check) < 3:
                return
            if not check[1].isdigit() or int(check[1]) > 2 or int(check[1]) < 1:
                return
            print(check)
            if check[2].lower() == "–≤—Å—ë" or check[2].lower() == "–≤—Å–µ":
                amount = (
                    profile.business2_money
                    if int(check[1]) == 2
                    else profile.business1_money
                )
                result = amount
            else:
                value = re.findall(r"\d+", check[2].lower())
                text = re.sub(r"[^\w\s]+|[\d]+", r"", check[2].lower()).strip()
                result = text_to_value(value[0], text)
            if int(result) < 1:
                return await env.reply("—á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            if int(check[1]) == 1:
                if not profile.business1:
                    return
                a = time.time()
                b = time.mktime(profile.business1_run.timetuple())
                res = (a - b) // 3600
                if profile.business1_money < result:
                    return await env.reply("–Ω–∞ —Å—á–µ—Ç—É –±–∏–∑–Ω–µ—Å–∞ –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥—Å—Ç–≤")
                profile.business1_money -= Decimal(result)
                profile.business1_run = datetime.datetime.now()
                profile.money += Decimal(result)
            else:
                if not profile.business2:
                    return
                a = time.time()
                b = time.mktime(profile.business2_run.timetuple())
                res = (a - b) // 3600
                if profile.business2_money < result:
                    return await env.reply("–Ω–∞ —Å—á–µ—Ç—É –±–∏–∑–Ω–µ—Å–∞ –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥—Å—Ç–≤")
                profile.business2_money -= Decimal(result)
                profile.business2_run = datetime.datetime.now()
                profile.money += Decimal(result)
            await manager.update(profile)
            return await env.reply(
                f"–≤—ã —Å–Ω—è–ª–∏ —Å–æ —Å—á–µ—Ç–∞ –±–∏–∑–Ω–µ—Å–∞ #{check[1]} {humanize(result)}$\n\n‚ö†–£—á—Ç–∏—Ç–µ, —á—Ç–æ –ø—Ä–∏ –Ω–∞–π–º–µ —Ä–∞–±–æ—á–∏—Ö –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–∏–∑–Ω–µ—Å–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –≤ —Å–≤—è–∑–∏ —Å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ–º –∞–±—É–∑–∞ –¥–µ–Ω–µ–≥."
            )
        elif check[0].lower() == "–Ω–∞–Ω—è—Ç—å":
            if len(check) < 2:
                return
            if not check[1].isdigit() or int(check[1]) > 2 or int(check[1]) < 1:
                return
            if not check[1].isdigit():
                return
            if int(check[1]) == 2:
                if not profile.business2:
                    print("start!4")
                    return
                if profile.business2_level == 1:
                    works = profile.business2.max_works
                elif profile.business2_level == 2:
                    works = profile.business2.max_works * 5
                else:
                    works = profile.business2.max_works * 5 * 3
                if (
                    profile.business2_works >= works
                    or profile.business2_works + int(check[2]) > works
                ):
                    return await env.reply(
                        "–¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å. –∫–æ–ª-–≤–æ —Ä–∞–±–æ—á–∏—Ö –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º–∞"
                    )
                price = 750_000 * int(check[2])
                if profile.money < price:
                    return await env.reply(
                        f"–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (—Ç—Ä–µ–±—É–µ—Ç—Å—è {humanize(price)}$)"
                    )
                profile.business2_works += int(check[2])
                profile.money -= Decimal(price)
                profile.business2_run = datetime.datetime.now()
                await manager.update(profile)
                return await env.reply(
                    f"–≤—ã –Ω–∞–Ω—è–ª–∏ {plural_form(int(check[2]), ('—Ä–∞–±–æ—á–µ–≥–æ', '—Ä–∞–±–æ—á–∏—Ö', '—Ä–∞–±–æ—á–∏—Ö'))}\n\n‚ö†–£—á—Ç–∏—Ç–µ, —á—Ç–æ –ø—Ä–∏ –Ω–∞–π–º–µ —Ä–∞–±–æ—á–∏—Ö –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–∏–∑–Ω–µ—Å–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –≤ —Å–≤—è–∑–∏ —Å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ–º –∞–±—É–∑–∞ –¥–µ–Ω–µ–≥."
                )
            elif int(check[1]) == 1:
                if not profile.business1:
                    return
                if profile.business1_level == 1:
                    works = profile.business1.max_works
                elif profile.business1_level == 2:
                    works = profile.business1.max_works * 5
                else:
                    works = profile.business1.max_works * 5 * 3
                if (
                    profile.business1_works >= works
                    or profile.business1_works + int(check[2]) > works
                ):
                    return await env.reply(
                        "–¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å. –∫–æ–ª-–≤–æ —Ä–∞–±–æ—á–∏—Ö –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º–∞"
                    )
                price = 750_000 * int(check[2])
                if profile.money < price:
                    return await env.reply(
                        f"–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (—Ç—Ä–µ–±—É–µ—Ç—Å—è {humanize(price)}$)"
                    )
                profile.business1_works += int(check[2])
                profile.money -= Decimal(price)
                profile.business1_run = datetime.datetime.now()
                await manager.update(profile)
                return await env.reply(
                    f"–≤—ã –Ω–∞–Ω—è–ª–∏ {plural_form(int(check[2]), ('—Ä–∞–±–æ—á–µ–≥–æ', '—Ä–∞–±–æ—á–∏—Ö', '—Ä–∞–±–æ—á–∏—Ö'))}\n\n‚ö†–£—á—Ç–∏—Ç–µ, —á—Ç–æ –ø—Ä–∏ –Ω–∞–π–º–µ —Ä–∞–±–æ—á–∏—Ö –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–∏–∑–Ω–µ—Å–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –≤ —Å–≤—è–∑–∏ —Å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ–º –∞–±—É–∑–∞ –¥–µ–Ω–µ–≥."
                )
        if not check[0].isdigit():
            return await env.reply("–≤—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!")

        if int(check[0]) > 2 or int(check[0]) < 1:
            return
        if (
            int(check[0]) == 1
            and not profile.business1
            or int(check[0]) == 2
            and not profile.business2
        ):
            return
        business_name = await parse_business_name(msg.from_id, int(check[0]))
        text = f'—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ "{business_name}":\n'
        if int(check[0]) == 1:
            kb = VKKeyboard()
            kb.set_inline(True)
            kb.add_row()
            kb.edit_row(0).add_button("üí∞ –°–Ω—è—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—É—é –ø—Ä–∏–±—ã–ª—å", payload={'command': f'{env.eenv.prefix}—ç–∫–æ –±–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å 1 –≤—Å–µ'}, color="positive") 
            pay = profile.business1_works * 50_000 + profile.business1.pay
            text += f"üí∏ –ü—Ä–∏–±—ã–ª—å: {humanize(pay)}$/—á–∞—Å\n"
            if profile.business1_level == 1:
                works = profile.business1.max_works
            elif profile.business1_level == 2:
                works = profile.business1.max_works * 5
            else:
                works = profile.business1.max_works * 5 * 3
            text += f"üíº –†–∞–±–æ—á–∏—Ö: {profile.business1_works}/{works}\n"
            a = time.time()
            b = time.mktime(profile.business1_run.timetuple())
            res = (a - b) // 3600
            profile.business1_money += (
                Decimal(pay * res) if (pay) * res != profile.last_bus1_pay else 0
            )
            profile.last_bus1_pay = Decimal(pay * res)
            await manager.update(profile)
            text += f"üí∞ –ù–∞ —Å—á—ë—Ç–µ: {humanize(profile.business1_money)}$\n"
            if profile.business1_works < works:
                text += '‚ö† –£ –≤–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª—é–¥–µ–π, –æ—Ç —ç—Ç–æ–≥–æ —É–º–µ–Ω—å—à–µ–Ω–∞ –ø—Ä–∏–±—ã–ª—å. –í–≤–µ–¥–∏—Ç–µ "–ë–∏–∑–Ω–µ—Å –Ω–∞–Ω—è—Ç—å 1 [–∫–æ–ª-–≤–æ]"'
            if profile.business1_level < 3:
                text += f'\n‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ! ({humanize(profile.business1.up_price * (profile.business1_level + 1) if profile.business1_level > 1 else profile.business1.up_price)}$)\n–í–≤–µ–¥–∏—Ç–µ "–ë–∏–∑–Ω–µ—Å —É–ª—É—á—à–∏—Ç—å 1" –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞'
            return await env.reply(text, keyboard=kb.dump_keyboard())
        else:
            kb = VKKeyboard()
            kb.set_inline(True)
            kb.add_row()
            kb.edit_row(0).add_button("üí∞ –°–Ω—è—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—É—é –ø—Ä–∏–±—ã–ª—å", payload={'command': f'{env.eenv.prefix}—ç–∫–æ –±–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å 2 –≤—Å–µ'}, color="positive") 
            pay = profile.business2_works * 50_000 + profile.business2.pay
            text += f"üí∏ –ü—Ä–∏–±—ã–ª—å: {humanize(pay)}$/—á–∞—Å\n"
            if profile.business2_level == 1:
                works = profile.business2.max_works
            elif profile.business2_level == 2:
                works = profile.business2.max_works * 5
            else:
                works = profile.business2.max_works * 5 * 3
            text += f"üíº –†–∞–±–æ—á–∏—Ö: {profile.business2_works}/{works}\n"
            a = time.time()
            b = time.mktime(profile.business2_run.timetuple())
            res = (a - b) // 3600
            profile.business2_money += (
                Decimal(pay * res) if (pay) * res != profile.last_bus2_pay else 0
            )
            profile.last_bus2_pay = Decimal(pay * res)
            await manager.update(profile)
            text += f"üí∞ –ù–∞ —Å—á—ë—Ç–µ: {humanize(profile.business2_money)}$\n"
            if profile.business2_works < works:
                text += '‚ö† –£ –≤–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª—é–¥–µ–π, –æ—Ç —ç—Ç–æ–≥–æ —É–º–µ–Ω—å—à–µ–Ω–∞ –ø—Ä–∏–±—ã–ª—å. –í–≤–µ–¥–∏—Ç–µ "–ë–∏–∑–Ω–µ—Å –Ω–∞–Ω—è—Ç—å 2 [–∫–æ–ª-–≤–æ]"'
            if profile.business2_level < 3:
                text += f'\n‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ! ({humanize(profile.business2.up_price * (profile.business2_level + 1) if profile.business2_level > 1 else profile.business2.up_price)}$)\n–í–≤–µ–¥–∏—Ç–µ "–ë–∏–∑–Ω–µ—Å —É–ª—É—á—à–∏—Ç—å 2" –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞'
            return await env.reply(text, keyboard=kb.dump_keyboard())


@plugin.on_startswith_text("—ç–∫–æ –∫–æ–ø–∞—Ç—å")
async def working(msg, ats, env):
    if not env.body or env.body.lower() not in ("–∂–µ–ª–µ–∑–æ", "–∑–æ–ª–æ—Ç–æ", "–∞–ª–º–∞–∑—ã"):
        return await env.reply("–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ¬´—ç–∫–æ –∫–æ–ø–∞—Ç—å –∂–µ–ª–µ–∑–æ/–∑–æ–ª–æ—Ç–æ/–∞–ª–º–∞–∑—ã¬ª üòï")
    kb = VKKeyboard()
    kb.set_inline(True)
    profile = await get_or_create_profile(msg.from_id)
    if profile.last_energy_end and profile.last_energy_end > datetime.datetime.now():
        return await env.reply(
            f"–≤—ã —Å–∏–ª—å–Ω–æ —É—Å—Ç–∞–ª–∏.\n‚ö† –≠–Ω–µ—Ä–≥–∏—è –ø–æ—è–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç!"
        )
    if profile.energy_days == 1:
        profile.energy_days = 9

        profile.last_energy_end = datetime.datetime.now() + datetime.timedelta(
            seconds=1800
        )
    else:
        profile.energy_days -= 1
    pay = random.randint(1, 15)
    if "–∂–µ–ª–µ–∑–æ" in env['args']:
        profile.iron += pay
        text = plural_form(pay, ("–∂–µ–ª–µ–∑–æ", "–∂–µ–ª–µ–∑–∞", "–∂–µ–ª–µ–∑–∞"))
        kb.add_row()
        kb.edit_row(0).add_button("üìé –ö–æ–ø–∞—Ç—å –µ—â—ë", payload={'command': f'{env.eenv.prefix}—ç–∫–æ –∫–æ–ø–∞—Ç—å –∂–µ–ª–µ–∑–æ'}, color="primary")
    elif "–∑–æ–ª–æ—Ç–æ" in env['args']:
        if not profile.energy_worked > 500:
            return await env.reply(
                "—á—Ç–æ –±—ã –∫–æ–ø–∞—Ç—å –∑–æ–ª–æ—Ç–æ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ 500 –æ–ø—ã—Ç–∞. –ö–æ–ø–∞–π—Ç–µ –∂–µ–ª–µ–∑–æ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ —Å–≤–æ–π –æ–ø—ã—Ç!"
            )
        profile.gold += pay
        text = plural_form(pay, ("–∑–æ–ª–æ—Ç–æ", "–∑–æ–ª–æ—Ç–∞", "–∑–æ–ª–æ—Ç–∞"))
        kb.add_row()
        kb.edit_row(0).add_button("üí∞ –ö–æ–ø–∞—Ç—å –µ—â—ë", payload={'command': f'{env.eenv.prefix}—ç–∫–æ –∫–æ–ø–∞—Ç—å –∑–æ–ª–æ—Ç–æ'}, color="primary")
    elif "–∞–ª–º–∞–∑—ã" in env['args']:
        if not profile.energy_worked > 1000:
            return await env.reply(
                "—á—Ç–æ –±—ã –∫–æ–ø–∞—Ç—å –∞–ª–º–∞–∑—ã –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ 1.000 –æ–ø—ã—Ç–∞. –ö–æ–ø–∞–π—Ç–µ –∂–µ–ª–µ–∑–æ/–∑–æ–ª–æ—Ç–æ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ —Å–≤–æ–π –æ–ø—ã—Ç!"
            )
        profile.diamond += pay
        text = plural_form(pay, ("–∞–ª–º–∞–∑", "–∞–ª–º–∞–∑–∞", "–∞–ª–º–∞–∑–æ–≤"))
        kb.add_row()
        kb.edit_row(0).add_button("üíé –ö–æ–ø–∞—Ç—å –µ—â—ë", payload={'command': f'{env.eenv.prefix}—ç–∫–æ –∫–æ–ø–∞—Ç—å –∞–ª–º–∞–∑—ã'}, color="primary")
    else:
        return await env.reply("–ú—ã –Ω–µ –æ—á–µ–Ω—å –ø–æ–Ω—è–ª–∏, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–æ–ø–∞—Ç—å!")

    profile.energy_worked += 1
    await manager.update(profile)
    vk_message = f"+{text}\nüí° –≠–Ω–µ—Ä–≥–∏—è: {profile.energy_days if not profile.last_energy_end > datetime.datetime.now() else 0}, –æ–ø—ã—Ç: {profile.energy_worked}\n"
    return await env.reply(vk_message, keyboard=kb.dump_keyboard())
