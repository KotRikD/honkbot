import datetime
import random
import re
import string

from peewee import fn

from database import *
from kutana import Plugin
from utils import *

plugin = Plugin(name="ClanSystem", cmds=[
    {'command': '–∫–ª–∞–Ω —Å–æ–∑–¥–∞—Ç—å', 'desc': '–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–Ω–∞, —Å—Ç–æ–∏–º–æ—Å—Ç—å 1 –º–ª—Ä–¥$'},
    {'command': '–∫–ª–∞–Ω —Ç–æ–ø', 'desc': '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –∫–ª–∞–Ω–æ–≤'},
    {'command': '–∫–ª–∞–Ω –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å', 'desc': '–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–ª–∞–Ω'},
    {'command': '–∫–ª–∞–Ω —É—á–∞—Å—Ç–Ω–∏–∫–∏', 'desc': '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∞–Ω–∞'},
    {'command': '–∫–ª–∞–Ω –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å', 'desc': '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –≤ –∫–ª–∞–Ω'},
    {'command': '–∫–ª–∞–Ω –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è', 'desc': '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—à–∞–ª –≤–∞—Å –≤ —Å–≤–æ–π –∫–ª–∞–Ω'},
    {'command': '–∫–ª–∞–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å', 'desc': '–û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω'},
    {'command': '–∫–ª–∞–Ω –ø—Ä–∏–Ω—è—Ç—å', 'desc': '–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω'},
    {'command': '–∫–ª–∞–Ω –≤–ª–æ–∂–∏—Ç—å', 'desc': '–í–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏ –≤ –∫–ª–∞–Ω'},
    {'command': '–∫–ª–∞–Ω —Å–Ω—è—Ç—å', 'desc': '–°–Ω—è—Ç—å –º–∞–Ω–∏ –∏–∑ –∫–∞–∑–Ω—ã'},
    {'command': '–∫–ª–∞–Ω –ø—ç–π–∫–ª–∞–Ω', 'desc': '–í—ã–ø–ª–∞—Ç–∏—Ç—å –∑/–ø —É—á–∞—Å—Ç–Ω–∏–∫–∞–º'},
    {'command': '–∫–ª–∞–Ω –≤—ã–≥–Ω–∞—Ç—å', 'desc': '–í—ã–≥–Ω–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –∏–∑ –∫–ª–∞–Ω–∞'},
    {'command': '–∫–ª–∞–Ω –ø–æ–≤—ã—Å–∏—Ç—å', 'desc': '–ü–æ–≤—ã—Å–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–ª–∞–Ω–∞'},
    {'command': '–∫–ª–∞–Ω –ø–æ–Ω–∏–∑–∏—Ç—å', 'desc': '–ü–æ–Ω–∏–∑–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–ª–∞–Ω–∞'},
    {'command': '–∫–ª–∞–Ω –≤—ã–π—Ç–∏', 'desc': '–ü–æ–∫–∏–Ω—É—Ç—å –∫–ª–∞–Ω'},
    {'command': '–∫–ª–∞–Ω', 'desc': '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ!'}
])


def toFixed(f: float, n=0):
    a, b = str(f).split('.')
    return '{}{}{}'.format(a, b[:n], '0' * (n - len(b)))


def humanize(value):
    return "{:,}".format(round(value)).replace(",", ".")


def text_to_value(value, text):
    value2 = 1000
    if text == '–∫' or text == 'k':
        return int(value) * int(value2)
    if text == '–∫–∫' or text == 'kk':
        return int(value) * (int(value2) ** 2)
    if text == '–∫–∫–∫' or text == 'kkk':
        return int(value) * (int(value2) ** 3)
    if text == '–∫–∫–∫–∫' or text == 'kkkk':
        return int(value) * (int(value2) ** 4)
    if text == '–∫–∫–∫–∫–∫' or text == 'kkkkk':
        return int(value) * (int(value2) ** 5)
    if text == '–∫–∫–∫–∫–∫–∫' or text == 'kkkkkk':
        return int(value) * (int(value2) ** 6)
    if text == '–∫–∫–∫–∫–∫–∫–∫' or text == 'kkkkkkk':
        return int(value) * (int(value2) ** 7)
    if text == '–∫–∫–∫–∫–∫–∫–∫–∫' or text == 'kkkkkkkk':
        return int(value) * (int(value2) ** 8)
    return int(value)


def textify_value(value):
    avalue = abs(value)
    if avalue > 1000000000000000000000000000000000000000000000000000000000000000:
        return "Too many Money!"
    if avalue >= 1000000000000000000000000000000000:
        return str(round(value / 1000000000000000000000000000000000, 2)) + " –¥–µ—Ü."
    if avalue >= 1000000000000000000000000000000:
        return str(round(value / 1000000000000000000000000000000, 2)) + " –Ω–æ–Ω."
    if avalue >= 1000000000000000000000000000:
        return str(round(value / 1000000000000000000000000000, 2)) + " –æ–∫—Ç."
    if avalue >= 1000000000000000000000000:
        return str(round(value / 1000000000000000000000000, 2)) + " —Å–ø—Ç–ª."
    if avalue >= 1000000000000000000000:
        return str(round(value / 1000000000000000000000, 2)) + " —Å–∫—Å—Ç."
    if avalue >= 1000000000000000000:
        return str(round(value / 1000000000000000000, 2)) + " –∫–≤–Ω—Ç."
    if avalue >= 1000000000000000:
        return str(round(value / 1000000000000000, 2)) + " –∫–≤–¥—Ä."
    if avalue >= 1000000000000:
        return str(round(value / 1000000000000, 2)) + " —Ç—Ä–ª–Ω."
    if avalue >= 1000000000:
        return str(round(value / 1000000000, 2)) + " –º–ª—Ä–¥."
    if avalue >= 1000000:
        return str(round(value / 1000000, 2)) + " –º–ª–Ω."
    if avalue >= 100000:
        return str(round(value / 100000)) + "00 —Ç—ã—Å."
    if avalue >= 1000:
        return str(round(value / 1000)) + " —Ç—ã—Å."
    return str(value)

def digits_recursive(nonneg):
    digits = []
    while nonneg:
        digits += [nonneg % 10]
        nonneg //= 10
    return digits[::-1] or [0]


def num_to_smile(num):
    if num <= 10:
        numbers = {0: '0‚É£', 1: '1‚É£', 2: '2‚É£', 3: '3‚É£', 4: '4‚É£', 5: '5‚É£', 6: '6‚É£', 7: '7‚É£', 8: '8‚É£', 9: '9‚É£', 10: 'üîü'}
        return numbers[num]
    numbers = {0: '0‚É£.', 1: '1‚É£', 2: '2‚É£', 3: '3‚É£', 4: '4‚É£', 5: '5‚É£', 6: '6‚É£', 7: '7‚É£', 8: '8‚É£', 9: '9‚É£', 10: 'üîü'}
    digits = digits_recursive(num)
    result = ""
    for i in digits:
        result += numbers[i]
    return result


def parse_rank_name(rank):
    if rank == 1:
        return '—Ä—è–¥–æ–≤–æ–π'
    if rank == 2:
        return '–æ—Ñ–∏—Ü–µ—Ä'
    if rank == 3:
        return '–∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å'
    if rank == 4:
        return '–æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å'


async def get_or_create_profile(user_id):
    try:
        shopcenters = shopcenter.select()
        job = jobs.select()
        profiles = Profile.select().where(Profile.user_id == user_id)

        profile = list(await manager.prefetch(profiles, shopcenters, job))[0]
    except IndexError:
        profile = await peewee_async.create_object(Profile, user_id=user_id)
    return profile


def id_generator(size=5, chars=string.ascii_uppercase + string.digits):
    return ''.join(random.choice(chars) for _ in range(size))


async def get_clan_info(identify):
    test = Profile.select(fn.SUM(Profile.rg).alias('total'), Profile.user_id).group_by(Profile.rg,
                                                                                       Profile.user_id).where(
        Profile.clan == identify).order_by(fn.SUM(Profile.rg).desc())
    query_result = await manager.execute(test)
    raitings = 0
    members = 0
    for u in query_result:
        raitings += round(int(u.total))
        members += 1
    return raitings, members


async def get_info_for_top(tag):
    test = clan_members.select().where(clan_members.clan_tag == tag, clan_members.is_accepted == 1)
    query_result = await manager.execute(test)
    raitings = 0
    members = 0
    for u in query_result:
        data = await get_or_none(Profile, user_id=u.user_id)
        raitings += round(int(data.rg))
        members += 1
    return raitings, members


@plugin.on_startswith_text('–∫–ª–∞–Ω —Å–æ–∑–¥–∞—Ç—å')
async def create_clan(msg, ats, env):
    a = await get_or_create_profile(msg.from_id)
    if a.clan:
        return await env.reply('–≤—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ, —á—Ç–æ–±—ã –ø–æ–∫–∏–Ω—É—Ç—å –µ–≥–æ, –≤–≤–µ–¥–∏—Ç–µ "–∫–ª–∞–Ω –≤—ã–π—Ç–∏"')
    if a.money < 1_000_000_000:
        return await env.reply('—Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞ - 1.000.000.000$')
    args = env.body.split()
    if not args or len(args) < 2:
        return await env.reply('–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <<–∫–ª–∞–Ω —Å–æ–∑–¥–∞—Ç—å [–∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞] [–Ω–∞–∑–≤–∞–Ω–∏–µ]>>')
    if len(args[0]) < 2 or len(args[0]) > 10:
        return await env.reply('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è –æ—Ç 2 –¥–æ 10')
    name = ''.join(args[1:])
    if await get_or_none(clans, shortname=args[0]):
        return await env.reply('–∫–ª–∞–Ω —Å —Ç–∞–∫–æ–π –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–æ–π —É–∂–µ —Å–æ–∑–¥–∞–Ω.')
    if await get_or_none(clans, name=name):
        return await env.reply('–∫–ª–∞–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω.')
    a.money -= 1_000_000_000
    tag = id_generator()
    cm, cr = await manager.get_or_create(clan_members, user_id=msg.from_id, join_date=datetime.datetime.today(), rank=4,
                                         clan_tag=tag)
    await manager.update(cm)
    cl, created = await manager.get_or_create(clans, header_id=msg.from_id, name=name, shortname=args[0], treasury=0,
                                              clan_type=1, tag=tag)
    await manager.update(cl)
    a.clan = cl.id
    await manager.update(a)

    kb = VKKeyboard()
    kb.lazy_buttons({
        'inline': True,
        'buttons': [
            {'text': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞–Ω–∞', 'payload': {'command': f'{env.eenv.prefix}–∫–ª–∞–Ω'}, 'color': 'primary'},
        ]
    })
    return await env.reply(
        f'–∫–ª–∞–Ω —Å –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–æ–π [{args[0]}] –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º "{name}" —Å–æ–∑–¥–∞–Ω.\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ, –≤–≤–µ–¥–∏—Ç–µ "–∫–ª–∞–Ω"', keyboard=kb.dump_keyboard())


@plugin.on_text('–∫–ª–∞–Ω —Ç–æ–ø')
async def top_clans(msg, ats, env):
    top = list(await manager.execute(clans.select().where(clans.treasury >= 0).order_by((clans.treasury).desc())))
    data = [{"id": u.header_id, "money": u.treasury, "tag": u.tag, 'name': u.name, 'shortname': u.shortname} for u in
            top]
    mesto = list(z['tag'] for z in data)
    text = "—Ç–æ–ø-10 –∫–ª–∞–Ω–æ–≤ –ø–æ –±–æ–≥–∞—Ç—Å—Ç–≤—É:\n"
    for i in enumerate(data[:10], start=1):
        num = num_to_smile(i[0])
        raitings, members = await get_info_for_top(i[1]['tag'])
        text += f"{num}. @id{i[1]['id']} ({i[1]['name']}) [{i[1]['shortname']}]\n–¢—ç–≥: {i[1]['tag']} | –†–µ–π—Ç–∏–Ω–≥: {textify_value(raitings)}üëë | –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {int(members)}/200\n"
    return await env.reply(text)


@plugin.on_startswith_text('–∫–ª–∞–Ω –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å')
async def rename_clan(msg, ats, env):
    a = await get_or_create_profile(msg.from_id)
    if not a.clan:
        return await env.reply(
            '–≤—Å—Ç—É–ø–∏—Ç–µ –≤ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –∫–ª–∞–Ω, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π')
    clan = await get_or_none(clans, id=a.clan)
    if not await get_or_none(clan_members, clan_members.clan_tag == clan.tag, clan_members.user_id == msg.from_id,
                             clan_members.rank >= 3):
        return await env.reply('–¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Å–æ –∑–≤–∞–Ω–∏—è –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –∏ –≤—ã—à–µ.')
    args = env.body.split()
    if not args or len(args) < 2:
        return await env.reply('–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: "–∫–ª–∞–Ω –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å [–∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞] [–Ω–∞–∑–≤–∞–Ω–∏–µ]"')
    if len(args[0]) < 2 or len(args[0]) > 5:
        return await env.reply('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è –æ—Ç 2 –¥–æ 5')
    name = ''.join(args[1:])
    if await get_or_none(clans, shortname=args[0]):
        return await env.reply('–∫–ª–∞–Ω —Å —Ç–∞–∫–æ–π –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–æ–π —É–∂–µ —Å–æ–∑–¥–∞–Ω.')
    if await get_or_none(clans, name=name):
        return await env.reply('–∫–ª–∞–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω.')
    cl, created = await manager.get_or_create(clans, name=clan.name, tag=clan.tag)
    cl.name = name
    cl.shortname = args[0]
    await manager.update(cl)
    await env.request('messages.send', user_id=cl.header_id,
                      message=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{msg.from_id} (id{msg.from_id}) –∏–∑–º–µ–Ω–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ –Ω–∞ \"{name} [{args[0]}]\".")
    return await env.reply(f'–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ "{name} [{args[0]}]"')


@plugin.on_text('–∫–ª–∞–Ω —É—á–∞—Å—Ç–Ω–∏–∫–∏')
async def clan_member(msg, ats, env):
    a = await get_or_create_profile(msg.from_id)
    if not a.clan:
        return await env.reply(
            '–≤—Å—Ç—É–ø–∏—Ç–µ –≤ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –∫–ª–∞–Ω, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π')
    clan = await get_or_none(clans, id=a.clan)
    top = list(await manager.execute(
        clan_members.select().where(clan_members.clan_tag == clan.tag, clan_members.is_accepted == 1).order_by(
            (clan_members.rank).desc())))
    data = [{"id": u.user_id, "rank": u.rank} for u in top]
    text = f"—É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞–Ω–∞ {clan.name}:\n"
    for i in enumerate(data, start=1):
        name = await parse_user_name(env, i[1]['id'])
        rank = parse_rank_name(i[1]['rank'])
        text += f"{i[0]}. @id{i[1]['id']} ({name}) [{rank}]\n"
    return await env.reply(text)


@plugin.on_startswith_text('–∫–ª–∞–Ω –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å')
async def invite_clan(msg, ats, env):
    a = await get_or_create_profile(msg.from_id)
    if not a.clan:
        return await env.reply(
            '–≤—Å—Ç—É–ø–∏—Ç–µ –≤ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –∫–ª–∞–Ω, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π')
    clan = await get_or_none(clans, id=a.clan)
    if not await get_or_none(clan_members, clan_members.clan_tag == clan.tag, clan_members.user_id == msg.from_id,
                             clan_members.rank >= 2):
        return await env.reply('–¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Å–æ –∑–≤–∞–Ω–∏—è –æ—Ñ–∏—Ü–µ—Ä –∏ –≤—ã—à–µ.')
    raitings, members = await get_clan_info(a.clan)
    if members >= 200:
        return await env.reply('–¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.')
    puid = await parse_user_id(msg, env)
    if not puid:
        return await env.reply('–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: "–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å [id(vk)]" –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–ª–∞–Ω.')
    if await get_or_none(clan_members, clan_tag=clan.tag, user_id=puid[0]):
        return await env.reply('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Ç–∞–∫ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≤–∞—à–µ–º –∫–ª–∞–Ω–µ')
    if await get_or_none(clan_invites, whom_id=puid[0], clan_tag=clan.tag):
        return await env.reply('–≤—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.')
    ci, cr = await manager.get_or_create(clan_invites, whom_id=puid[0], clan_tag=clan.tag)
    await manager.update(ci)
    name = await parse_user_name(env, puid[0])
    await env.request('messages.send', user_id=clan.header_id,
                      message=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{msg.from_id} (id{msg.from_id}) –ø—Ä–∏–≥–ª–∞—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @id{puid[0]} ({name})")
    await env.request('messages.send', user_id=puid[0],
                      message=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{msg.from_id} (id{msg.from_id}) –ø—Ä–∏–≥–ª–∞—Å–∏–ª –≤–∞—Å –≤ –∫–ª–∞–Ω {clan.name} [{clan.shortname}], —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å, –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <<–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è>>")
    return await env.reply(f'–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫—É {name}')


@plugin.on_text('–∫–ª–∞–Ω –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è')
async def invites(msg, ats, env):
    if not await get_or_none(clan_invites, whom_id=msg.from_id):
        return await env.reply('—Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç')
    top = list(await manager.execute(clan_invites.select().where(clan_invites.whom_id == msg.from_id)))
    data = [{"clan_tag": u.clan_tag} for u in top]
    text = "\n"
    for i in enumerate(data, start=1):
        clan = await get_or_none(clans, tag=i[1]['clan_tag'])
        if not clan:
            continue
        name = await parse_user_name(env, clan.header_id)
        raitings, members = await get_info_for_top(i[1]['clan_tag'])
        text += f"{i[0]}. @id{clan.header_id} ({clan.name}) [{clan.shortname}]\n–†–µ–π—Ç–∏–Ω–≥: {raitings}üëë | –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {members}/200 | –¢—ç–≥: {i[1]['clan_tag']}\n"
    text += '\n–î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∏–Ω–≤–∞–π—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ "–∫–ª–∞–Ω –ø—Ä–∏–Ω—è—Ç—å [—Ç—ç–≥ –∫–ª–∞–Ω–∞]"\n–î–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∏–Ω–≤–∞–π—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ "–∫–ª–∞–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å [—Ç—ç–≥ –∫–ª–∞–Ω–∞]"'
    return await env.reply(text)


@plugin.on_startswith_text('–∫–ª–∞–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å')
async def decline_invite(msg, ats, env):
    if not await get_or_none(clan_invites, whom_id=msg.from_id):
        return await env.reply('–≤–∞–º –Ω–µ—á–µ–≥–æ –æ—Ç–∫–ª–æ–Ω—è—Ç—å')
    if not env.body:
        return await env.reply('–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: "–∫–ª–∞–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å [—Ç—ç–≥ –∫–ª–∞–Ω–∞]"')
    if not await get_or_none(clan_invites, whom_id=msg.from_id, clan_tag=env.body.upper()):
        return await env.reply('–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω —Å —Ç–∞–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
    await manager.execute(
        clan_invites.delete().where(clan_invites.whom_id == msg.from_id, clan_invites.clan_tag == env.body.upper()))
    return await env.reply('–∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.')


@plugin.on_startswith_text('–∫–ª–∞–Ω –ø—Ä–∏–Ω—è—Ç—å')
async def accept_invite(msg, ats, env):
    if not await get_or_none(clan_invites, whom_id=msg.from_id):
        return await env.reply('–≤–∞–º –Ω–µ—á–µ–≥–æ –æ—Ç–∫–ª–æ–Ω—è—Ç—å')
    if not env.body:
        return await env.reply('–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: "–∫–ª–∞–Ω –ø—Ä–∏–Ω—è—Ç—å [—Ç—ç–≥ –∫–ª–∞–Ω–∞]"')
    if not await get_or_none(clan_invites, whom_id=msg.from_id, clan_tag=env.body.upper()):
        return await env.reply('–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω —Å —Ç–∞–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
    a = await get_or_create_profile(msg.from_id)
    cl, created = await manager.get_or_create(clans, tag=env.body.upper())
    raitings, members = await get_clan_info(cl)
    if members >= 200:
        return await env.reply('–≤ –¥–∞–Ω–Ω–æ–º –∫–ª–∞–Ω–µ —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
    a.clan = cl.id
    await manager.update(a)
    cm, cr = await manager.get_or_create(clan_members, user_id=msg.from_id, join_date=datetime.datetime.today(), rank=1,
                                         clan_tag=env.body.upper())
    await manager.update(cm)
    await manager.execute(
        clan_invites.delete().where(clan_invites.whom_id == msg.from_id, clan_invites.clan_tag == env.body.upper()))
    await env.request('messages.send', user_id=cl.header_id,
                      message=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{msg.from_id} (id{msg.from_id}) –≤—Å—Ç—É–ø–∏–ª –≤ –∫–ª–∞–Ω.")
    kb = VKKeyboard()
    kb.lazy_buttons({
        'inline': True,
        'buttons': [
            {'text': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞–Ω–∞', 'payload': {'command': f'{env.eenv.prefix}–∫–ª–∞–Ω'}, 'color': 'primary'},
        ]
    })
    return await env.reply(f'–≤—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–ª–∞–Ω {cl.name}.\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ, –≤–≤–µ–¥–∏—Ç–µ "–∫–ª–∞–Ω"', keyboard=kb.dump_keyboard())


@plugin.on_startswith_text('–∫–ª–∞–Ω –≤–ª–æ–∂–∏—Ç—å')
async def add_treasury(msg, ats, env):
    a = await get_or_create_profile(msg.from_id)
    if not a.clan:
        return await env.reply(
            '–≤—Å—Ç—É–ø–∏—Ç–µ –≤ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –∫–ª–∞–Ω, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π')
    clan = await get_or_none(clans, id=a.clan)
    if not env.body:
        return await env.reply('–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: "–∫–ª–∞–Ω –≤–ª–æ–∂–∏—Ç—å [—Å—É–º–º–∞]"')
    if env.body.lower() == "–≤—Å—ë" or env.body.lower() == "–≤—Å–µ":
        amount = a.money
        result = env.body.lower()
    else:
        value = re.findall(r'\d+', env.body.lower())
        text = re.sub(r'[^\w\s]+|[\d]+', r'', env.body.lower()).strip()
        result = text_to_value(value[0], text)
        if int(result) < 1:
            return await env.reply('—á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.')
        if int(a.money) < result:
            return await env.reply("–Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")

    a.money -= result
    cl, cr = await manager.get_or_create(clans, tag=clan.tag)
    cl.treasury += result
    await manager.update(cl)
    await manager.update(a)
    await env.request('messages.send', user_id=cl.header_id,
                      message=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{msg.from_id} (id{msg.from_id}) –≤–Ω–µ—Å –≤ –∫–∞–∑–Ω—É –∫–ª–∞–Ω–∞ {textify_value(result)}$")
    kb = VKKeyboard()
    kb.lazy_buttons({
        'inline': True,
        'buttons': [
            {'text': '–í–ª–æ–∂–∏—Ç—å —Å—Ç–æ–ª—å–∫–æ –∂–µ', 'payload': {'command': f'{env.eenv.prefix}–∫–ª–∞–Ω –≤–ª–æ–∂–∏—Ç—å {result}'}, 'color': 'primary'},
        ]
    })
    return await env.reply(f'–≤—ã –≤–Ω–µ—Å–ª–∏ –≤ –∫–∞–∑–Ω—É –∫–ª–∞–Ω–∞ +{textify_value(result)} $', keyboard=kb.dump_keyboard())


@plugin.on_startswith_text('–∫–ª–∞–Ω —Å–Ω—è—Ç—å')
async def minus_treasury(msg, ats, env):
    a = await get_or_create_profile(msg.from_id)
    if not a.clan:
        return await env.reply(
            '–≤—Å—Ç—É–ø–∏—Ç–µ –≤ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –∫–ª–∞–Ω, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π')
    clan = await get_or_none(clans, id=a.clan)
    if not await get_or_none(clan_members, clan_members.clan_tag == clan.tag, clan_members.user_id == msg.from_id,
                             clan_members.rank == 4):
        return await env.reply('–¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é')
    cl, created = await manager.get_or_create(clans, name=clan.name, tag=clan.tag)
    if not env.body:
        return await env.reply('–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: "–∫–ª–∞–Ω —Å–Ω—è—Ç—å [—Å—É–º–º–∞]"')
    if env.body.lower() == "–≤—Å—ë" or env.body.lower() == "–≤—Å–µ":
        amount = a.money
        result = env.body.lower()
    else:
        value = re.findall(r'\d+', env.body.lower())
        text = re.sub(r'[^\w\s]+|[\d]+', r'', env.body.lower()).strip()
        result = text_to_value(value[0], text)
        if int(result) < 1:
            return await env.reply('—á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.')
        if int(result) > cl.treasury:
            return await env.reply("–í –∫–ª–∞–Ω–æ–≤–æ–π –∫–∞–∑–Ω–µ –Ω–µ—Ç—É —Å—Ç–æ–ª—å–∫–æ!")

    a.money += result
    cl.treasury -= result
    await manager.update(cl)
    await manager.update(a)
    return await env.reply(f'–≤—ã —Å–Ω—è–ª–∏ —Å –∫–∞–∑–Ω—ã –∫–ª–∞–Ω–∞ -{textify_value(result)} $')


@plugin.on_startswith_text('–∫–ª–∞–Ω –ø—ç–π–∫–ª–∞–Ω')
async def pay_clan_members(msg, ats, env):
    a = await get_or_create_profile(msg.from_id)
    if not a.clan:
        return await env.reply(
            '–≤—Å—Ç—É–ø–∏—Ç–µ –≤ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –∫–ª–∞–Ω, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π')
    clan = await get_or_none(clans, id=a.clan)
    if not await get_or_none(clan_members, clan_members.clan_tag == clan.tag, clan_members.user_id == msg.from_id,
                             clan_members.rank == 4):
        return await env.reply('–¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é')
    cl, created = await manager.get_or_create(clans, name=clan.name, tag=clan.tag)
    if not env.body:
        return await env.reply('–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: "–∫–ª–∞–Ω –ø—ç–π–∫–ª–∞–Ω [—Å—É–º–º–∞]"')
    if env.body.lower() == "–≤—Å—ë" or env.body.lower() == "–≤—Å–µ":
        amount = a.money
        result = env.body.lower()
    else:
        value = re.findall(r'\d+', env.body.lower())
        text = re.sub(r'[^\w\s]+|[\d]+', r'', env.body.lower()).strip()
        result = text_to_value(value[0], text)
    if int(result) < 1:
        return await env.reply('—á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.')
    raitings, members = await get_info_for_top(clan.tag)
    if int(result) * int(members) > cl.treasury:
        return await env.reply(
            f'–≤ –∫–∞–∑–Ω–µ –∫–ª–∞–Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {textify_value(int(result) * int(members) - cl.treasury)}\n–£—á—Ç–∏—Ç–µ, —á—Ç–æ –ø—Ä–∏ –≤—ã–ø–ª–∞—Ç–µ –±–æ–≥–∞—Ç—Å—Ç–≤–∞ —Å –∫–∞–∑–Ω—ã –∫–ª–∞–Ω–æ–≤, –¥–µ–Ω—å–≥–∏ –≤—ã–¥–∞—é—Ç—Å—è –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –≤ —Ä–∞–∑–º–µ—Ä–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º—ã.')
    top = list(await manager.execute(
        clan_members.select().where(clan_members.clan_tag == clan.tag, clan_members.is_accepted == 1).order_by(
            (clan_members.rank).desc())))
    data = [{"id": u.user_id} for u in top]
    text = f"—É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞–Ω–∞ {clan.name}:\n"
    for i in enumerate(data, start=1):
        profile = await get_or_create_profile(i[1]['id'])
        profile.money += int(result)
        await manager.update(profile)
    cl.treasury -= int(result) * int(members)
    await manager.update(cl)
    text = f'–≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–ª–∞–Ω–∞ –≤—ã–ø–ª–∞—á–µ–Ω–æ {textify_value(int(result))} $'
    return await env.reply(text)


@plugin.on_startswith_text('–∫–ª–∞–Ω –≤—ã–≥–Ω–∞—Ç—å')
async def kick_member(msg, ats, env):
    a = await get_or_create_profile(msg.from_id)
    if not a.clan:
        return await env.reply(
            '–≤—Å—Ç—É–ø–∏—Ç–µ –≤ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –∫–ª–∞–Ω, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π')
    clan = await get_or_none(clans, id=a.clan)
    if not await get_or_none(clan_members, clan_members.clan_tag == clan.tag, clan_members.user_id == msg.from_id,
                             clan_members.rank >= 3):
        return await env.reply('–¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Å–æ –∑–≤–∞–Ω–∏—è –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –∏ –≤—ã—à–µ.')    
    puid = await parse_user_id(msg, env)
    if not puid:
        return await env.reply('–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: "–∫–ª–∞–Ω –≤—ã–≥–Ω–∞—Ç—å [id(vk)]" –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –∫–ª–∞–Ω–∞.')
    if not await get_or_none(clan_members, clan_tag=clan.tag, user_id=puid[0]):
        return await env.reply('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≤–∞—à–µ–º –∫–ª–∞–Ω–µ')
    
    kicker = await get_or_none(clan_members, clan_members.clan_tag == clan.tag, clan_members.user_id == msg.from_id)
    kicked = await get_or_none(clan_members, clan_members.clan_tag == clan.tag, clan_members.user_id == puid[0])
    if kicked.rank >= kicker.rank:
        return await env.reply("–≤–∞—à–∏ –ø–æ–ª–Ω–æ–º–æ—á–∏—è –Ω–µ –ø–æ–∑–≤–æ–ª—è—é—Ç –∫–∏–∫–Ω—É—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ;d")

    user = await get_or_create_profile(puid[0])
    user.clan = None
    await manager.update(user)
    await manager.execute(
        clan_members.delete().where(clan_members.user_id == puid[0], clan_members.clan_tag == clan.tag))
    name = await parse_user_name(env, puid[0])
    await env.request('messages.send', user_id=clan.header_id,
                      message=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{msg.from_id} (id{msg.from_id}) –∏—Å–∫–ª—é—á–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @id{puid[0]} ({name})")
    return await env.reply(f'–∏–≥—Ä–æ–∫ {name} –∏—Å–∫–ª—é—á–µ–Ω —Å –∫–ª–∞–Ω–∞.')


@plugin.on_startswith_text('–∫–ª–∞–Ω –ø–æ–≤—ã—Å–∏—Ç—å')
async def plus_rank(msg, ats, env):
    a = await get_or_create_profile(msg.from_id)
    if not a.clan:
        return await env.reply(
            '–≤—Å—Ç—É–ø–∏—Ç–µ –≤ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –∫–ª–∞–Ω, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π')
    clan = await get_or_none(clans, id=a.clan)
    if not await get_or_none(clan_members, clan_members.clan_tag == clan.tag, clan_members.user_id == msg.from_id,
                             clan_members.rank >= 3):
        return await env.reply('–¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Å–æ –∑–≤–∞–Ω–∏—è –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –∏ –≤—ã—à–µ.')
    puid = await parse_user_id(msg, env)
    if not puid:
        return await env.reply('–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: "–∫–ª–∞–Ω –ø–æ–≤—ã—Å–∏—Ç—å [id(vk)]" –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∑–≤–∞–Ω–∏—è.')
    if not await get_or_none(clan_members, clan_tag=clan.tag, user_id=puid[0]):
        return await env.reply('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≤–∞—à–µ–º –∫–ª–∞–Ω–µ')
    cm, cr = await manager.get_or_create(clan_members, user_id=puid[0], clan_tag=clan.tag)
    if cm.rank == 2 and await get_or_none(clan_members, clan_members.clan_tag == clan.tag,
                                          clan_members.user_id == msg.from_id, clan_members.rank == 3):
        return await env.reply('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±–æ–ª—å—à–µ –ø–æ–≤—ã—à–∞—Ç—å —Ä–∞–Ω–≥.')
    if cm.rank < 3:
        cm.rank += 1
    else:
        return await env.reply('—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥.')
    await manager.update(cm)
    name = await parse_user_name(env, puid[0])
    await env.request('messages.send', user_id=clan.header_id,
                      message=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{msg.from_id} (id{msg.from_id}) –ø–æ–≤—ã—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @id{puid[0]} ({name}) –¥–æ –∑–≤–∞–Ω–∏—è [{parse_rank_name(cm.rank)}]")
    return await env.reply(f'–ò–≥—Ä–æ–∫ {name} –ø–æ–≤—ã—à–µ–Ω –¥–æ –∑–≤–∞–Ω–∏—è {parse_rank_name(cm.rank)}')


@plugin.on_startswith_text('–∫–ª–∞–Ω –ø–æ–Ω–∏–∑–∏—Ç—å')
async def plus_rank(msg, ats, env):
    a = await get_or_create_profile(msg.from_id)
    if not a.clan:
        return await env.reply(
            '–≤—Å—Ç—É–ø–∏—Ç–µ –≤ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –∫–ª–∞–Ω, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π')
    clan = await get_or_none(clans, id=a.clan)
    if not await get_or_none(clan_members, clan_members.clan_tag == clan.tag, clan_members.user_id == msg.from_id,
                             clan_members.rank >= 3):
        return await env.reply('–¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Å–æ –∑–≤–∞–Ω–∏—è –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –∏ –≤—ã—à–µ.')
    puid = await parse_user_id(msg, env)
    if not puid:
        return await env.reply('–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: "–∫–ª–∞–Ω –ø–æ–Ω–∏–∑–∏—Ç—å [id(vk)]" –¥–ª—è –ø–æ–Ω–∏–∂–µ–Ω–∏—è –∑–≤–∞–Ω–∏—è.')
    if not await get_or_none(clan_members, clan_tag=clan.tag, user_id=puid[0]):
        return await env.reply('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≤–∞—à–µ–º –∫–ª–∞–Ω–µ')
    cm, cr = await manager.get_or_create(clan_members, user_id=puid[0], clan_tag=clan.tag)
    if cm.rank >= 3 and await get_or_none(clan_members, clan_members.clan_tag == clan.tag,
                                          clan_members.user_id == msg.from_id, clan_members.rank == 3):
        return await env.reply('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–Ω–∏–∑–∏—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    if cm.rank > 1:
        cm.rank -= 1
    else:
        return await env.reply('—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥.')
    await manager.update(cm)
    name = await parse_user_name(env, puid[0])
    await env.request('messages.send', user_id=clan.header_id,
                      message=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{msg.from_id} (id{msg.from_id}) –ø–æ–Ω–∏–∑–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @id{puid[0]} ({name}) –¥–æ –∑–≤–∞–Ω–∏—è [{parse_rank_name(cm.rank)}]")
    return await env.reply(f'–ò–≥—Ä–æ–∫ {name} –ø–æ–Ω–∏–∂–µ–Ω –¥–æ –∑–≤–∞–Ω–∏—è {parse_rank_name(cm.rank)}')


@plugin.on_text('–∫–ª–∞–Ω –≤—ã–π—Ç–∏')
async def leave_clan(msg, ats, env):
    a = await get_or_create_profile(msg.from_id)
    if not a.clan:
        return await env.reply(
            '–≤—Å—Ç—É–ø–∏—Ç–µ –≤ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –∫–ª–∞–Ω, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π')
    clan = await get_or_none(clans, id=a.clan)
    if await get_or_none(clan_members, user_id=msg.from_id, rank=4):
        await manager.execute(clan_invites.delete().where(clan_invites.clan_tag == clan.tag))
        await manager.execute(clans.delete().where(clans.header_id == msg.from_id))
        a.clan = None
        await env.reply('–í–∞—à –∫–ª–∞–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω, —Ç.–∫ –ª–∏–¥–µ—Ä –ø–æ–∫–∏–Ω—É–ª –µ–≥–æ.')
    else:
        await manager.execute(
            clan_members.delete().where(clan_members.user_id == msg.from_id, clan_members.clan_tag == clan.tag))
        a.clan = None
        await env.reply('–≤—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–ª–∞–Ω.')
    return await manager.update(a)


@plugin.on_text('–∫–ª–∞–Ω')
async def clan_info(msg, ats, env):
    a = await get_or_create_profile(msg.from_id)
    if not a.clan:
        return await env.reply(
            '–í—Å—Ç—É–ø–∏—Ç–µ –≤ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –∫–ª–∞–Ω, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π')
    clan = await get_or_none(clans, id=a.clan)
    header = await parse_user_name(env, clan.header_id)
    raitings, members = await get_clan_info(clan)
    vk_message = f'–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ [{clan.name} ({clan.shortname})]:\nüÜî–ö–ª–∞–Ω-—Ç—ç–≥: {clan.tag}\nüë®‚ÄçüíªÔ∏è–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å: @id{clan.header_id} ({header})\nüí∞–ë–æ–≥–∞—Ç—Å—Ç–≤–æ: {textify_value(round(clan.treasury))}\nüëë–†–µ–π—Ç–∏–Ω–≥: {humanize(raitings)}\nüëî–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {members}/200\nüíø–î–∞—Ç–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏—è: {clan.register_date}\n'
    kb = VKKeyboard()
    kb.set_inline(True)
    kb.add_row()
    kb.edit_row(0).add_button("üîù –¢–æ–ø –∫–ª–∞–Ω–æ–≤", payload={'command': f'{env.eenv.prefix}–∫–ª–∞–Ω —Ç–æ–ø'}, color="primary")
    kb.add_row()
    kb.edit_row(1).add_button("üë®‚ÄçüíªÔ∏è –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞–Ω–∞", payload={'command': f'{env.eenv.prefix}–∫–ª–∞–Ω —É—á–∞—Å—Ç–Ω–∏–∫–∏'}, color="positive")
    #kb.add_row()
    #kb.edit_row(2).add_button("üôé –í—ã–π—Ç–∏ –∏–∑ –∫–ª–∞–Ω–∞", payload={'command': f'{env.eenv.prefix}–∫–ª–∞–Ω –≤—ã–π—Ç–∏'}, color="negative")
    return await env.reply(vk_message, keyboard=kb.dump_keyboard())
