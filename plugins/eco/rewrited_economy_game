
import re
from datetime import timedelta
from decimal import *

import aiohttp
import asyncio
import datetime
import peewee_async
import random
import time

from database import *
from kutana import Plugin
from utils import plural_form, parse_user_name, schedule_api_task, priviligeshelper

plugin = Plugin(name="–≠–∫–æ–Ω–æ–º–∏–∫–∞ v4", cmds=[
    {'command': '—Ñ–µ—Ä–º—ã', 'desc': '–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫–∏–µ –º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º—ã –µ—Å—Ç—å'},
    {'command': '–±–∏–∑–Ω–µ—Å—ã', 'desc': '–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫–∏–µ –µ—Å—Ç—å –±–∏–∑–Ω–µ—Å—ã'},
    {'command': '–ø—Ä–æ—Ñ–∏–ª—å', 'desc': '—Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å'},
    {'command': '–º–∞—à–∏–Ω—ã', 'desc': '–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫–∏–µ –º–∞—à–∏–Ω—ã –µ—Å—Ç—å'},
    {'command': '—Ç–æ–≤–∞—Ä—ã', 'desc': '–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≥—Ä—É–ø–ø—ã'},
    {'command': '–≤–µ—Ä—Ç–æ–ª—ë—Ç—ã/—Å–∞–º–æ–ª—ë—Ç—ã', 'desc': '–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫–∏–µ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ —ç—Ç–∏—Ö –≥—Ä—É–ø–ø'},
    {'command': '–¥–æ–º–∞', 'desc': '–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ–º–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö'},
    {'command': '–∫–≤–∞—Ä—Ç–∏—Ä—ã', 'desc': '–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã'},
    {'command': '—Ç–µ–ª–µ—Ñ–æ–Ω—ã', 'desc': '–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã'},
    {'command': '–ø—Ä–æ–¥–∞—Ç—å', 'desc': '–ø—Ä–æ–¥–∞—Ç—å —Ç–æ—Ç –∏–ª–∏ –∏–Ω–æ–π –ø—Ä–µ–¥–º–µ—Ç'},
    {'command': '–ø–µ—Ä–µ–¥–∞—Ç—å', 'desc': '–ø–µ—Ä–µ–¥–∞—á–∞ –≤–∞–ª—é—Ç—ã –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏'},
    {'command': '–±–∏—Ç–∫–æ–∏–Ω –∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å/–ø–µ—Ä–µ–¥–∞—Ç—å', 'desc': '–≤—Å—ë —á—Ç–æ —Å–≤—è–∑–∞–Ω–Ω–æ —Å –±–∏—Ç–∫–æ–∏–Ω–∞–º–∏'},
    {'command': '—Ä–µ–π—Ç–∏–Ω–≥', 'desc': '—Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è —Å–ø–∏—Å–∫–∞ –±–æ–≥–∞—á–µ–π'},
    {'command': '–º–∞–π–Ω–µ—Ä', 'desc': '–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ —Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ —Å –º–∞–π–Ω–µ—Ä–∞'},
    {'command': '–±–∏–∑–Ω–µ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞/—Å–Ω—è—Ç—å', 'desc': '–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ —Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ —Å –±–∏–∑–Ω–µ—Å–∞'}])

user_jobsd = {}
is_active = {}
jobs_userd = {}
models = []
active = True
backsider = "\n"


def toFixed(f: float, n=0):
    a, b = str(f).split('.')
    return '{}{}{}'.format(a, b[:n], '0' * (n - len(b)))


def convert_timedelta(duration):
    days, seconds = duration.days, duration.seconds
    hours = days * 24 + seconds // 3600
    minutes = (seconds % 3600) // 60
    seconds = (seconds % 60)
    return hours, minutes, seconds


async def get_btc(nep):
    while True:
        async with aiohttp.ClientSession() as sess:
            async with sess.get("https://blockchain.info/ru/ticker") as resp:
                res = await resp.json()
                data = res['USD']['sell']
                plugin.bitcoin_price = toFixed(data)
        await asyncio.sleep(3600)


async def get_or_create_profile(user_id):
    try:
        shopcenters = (
            shopcenter
                .select()
        )
        business = (
            business_shop
                .select()
        )
        profiles = (
            Profile
                .select()
                .where(Profile.user_id == user_id
                       )
        )
        clan = (
            clans
                .select()
        )

        profile = list(await manager.prefetch(profiles, shopcenters, business, clan))[0]
    except IndexError:
        profile = await peewee_async.create_object(Profile, user_id=user_id)

    return profile


def digits_recursive(nonneg):
    digits = []
    while nonneg:
        digits += [nonneg % 10]
        nonneg //= 10
    return digits[::-1] or [0]


def num_to_smile(num):
    if num <= 10:
        numbers = {0: '0‚É£', 1: '1‚É£', 2: '2‚É£', 3: '3‚É£', 4: '4‚É£', 5: '5‚É£', 6: '6‚É£', 7: '7‚É£', 8: '8‚É£', 9: '9‚É£', 10: 'üîü'}
        return numbers[num]
    numbers = {0: '0‚É£.', 1: '1‚É£', 2: '2‚É£', 3: '3‚É£', 4: '4‚É£', 5: '5‚É£', 6: '6‚É£', 7: '7‚É£', 8: '8‚É£', 9: '9‚É£', 10: 'üîü'}
    digits = digits_recursive(num)
    result = ""
    for i in digits:
        result += numbers[i]
    return result


def text_to_value(value, text):
    value2 = 1000
    if text == '–∫' or text == 'k':
        return int(value) * int(value2)
    if text == '–∫–∫' or text == 'kk':
        return int(value) * (int(value2) ** 2)
    if text == '–∫–∫–∫' or text == 'kkk':
        return int(value) * (int(value2) ** 3)
    if text == '–∫–∫–∫–∫' or text == 'kkkk':
        return int(value) * (int(value2) ** 4)
    if text == '–∫–∫–∫–∫–∫' or text == 'kkkkk':
        return int(value) * (int(value2) ** 5)
    if text == '–∫–∫–∫–∫–∫–∫' or text == 'kkkkkk':
        return int(value) * (int(value2) ** 6)
    if text == '–∫–∫–∫–∫–∫–∫–∫' or text == 'kkkkkkk':
        return int(value) * (int(value2) ** 7)
    if text == '–∫–∫–∫–∫–∫–∫–∫–∫' or text == 'kkkkkkkk':
        return int(value) * (int(value2) ** 8)
    return int(value)


def textify_value(value):
    avalue = abs(value)
    if avalue > 1000000000000000000000000000000000000000000000000000000000000000:
        return "Too many Money!"
    if avalue >= 1000000000000000000000000000000000:
        return str(round(value / 1000000000000000000000000000000000, 2)) + " –¥–µ—Ü."
    if avalue >= 1000000000000000000000000000000:
        return str(round(value / 1000000000000000000000000000000, 2)) + " –Ω–æ–Ω."
    if avalue >= 1000000000000000000000000000:
        return str(round(value / 1000000000000000000000000000, 2)) + " –æ–∫—Ç."
    if avalue >= 1000000000000000000000000:
        return str(round(value / 1000000000000000000000000, 2)) + " —Å–ø—Ç–ª."
    if avalue >= 1000000000000000000000:
        return str(round(value / 1000000000000000000000, 2)) + " —Å–∫—Å—Ç."
    if avalue >= 1000000000000000000:
        return str(round(value / 1000000000000000000, 2)) + " –∫–≤–Ω—Ç."
    if avalue >= 1000000000000000:
        return str(round(value / 1000000000000000, 2)) + " –∫–≤–¥—Ä."
    if avalue >= 1000000000000:
        return str(round(value / 1000000000000, 2)) + " —Ç—Ä–ª–Ω."
    if avalue >= 1000000000:
        return str(round(value / 1000000000, 2)) + " –º–ª—Ä–¥."
    if avalue >= 1000000:
        return str(round(value / 1000000, 2)) + " –º–ª–Ω."
    if avalue >= 100000:
        return str(round(value / 100000)) + "00 —Ç—ã—Å."
    if avalue >= 1000:
        return str(round(value / 1000)) + " —Ç—ã—Å."
    return str(value)


def humanize(value):
    return "{:,}".format(round(value)).replace(",", ".")


@plugin.on_startup()
async def startup(update, env):
    await schedule_api_task(get_btc)
    return "GOON"


@plugin.on_startswith_text("—Ñ–µ—Ä–º—ã")
async def on_message(message, attachments, env):
    profile = await get_or_create_profile(message.from_id)
    check = message.text.split(' ')
    shopcenters = list(
        await manager.execute(shopcenter.select().where(shopcenter.slot == "other").order_by(shopcenter.price)))
    if len(check) < 3:
        text = f"–º–∞–π–Ω–∏–Ω–≥-—Ñ–µ—Ä–º—ã:\n"
        for i in range(len(shopcenters)):
            text += f"{'üî∏' if profile.money < shopcenters[i].price else 'üîπ'} {num_to_smile(i + 1)}. {shopcenters[i].name} - {humanize(shopcenters[i].price)}${backsider+'&#12288;&#12288;üëë –ù—É–∂–µ–Ω —Å—Ç–∞—Ç—É—Å: ' +shopcenters[i].needstatus+backsider if not shopcenters[i].needstatus == '' else backsider }&#12288;–ü—Ä–∏–±—ã–ª—å: –Ω–∞—á. {shopcenters[i].moneymin/10}…É/–¥–µ–Ω—å\n"
        return await env.reply(text + f'\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"!—Ñ–µ—Ä–º—ã [–Ω–æ–º–µ—Ä] [–∫–æ–ª-–≤–æ]\"')
    else:
        limit = 100
        privs = await priviligeshelper.getUserPriviliges(env, message.from_id)
        if privs&shopcenters[int(check[1]) - 1].needstatus>0 or privs&priviligeshelper.USER_ADMIN>0:
            pass
        else:
            if not shopcenters[int(check[1]) - 1].needstatus == '':
                return await env.reply("–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç. –¢.–∫. –≤–∞—à —Å—Ç–∞—Ç—É—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –Ω–µ–≥–æ")

        if not check[1].isdigit():
            return await env.reply('–≤—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.')
        if profile.other and profile.other_id != shopcenters[int(check[1]) - 1].id:
            return await env.reply('–£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –¥–∞–Ω–Ω–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ, –ø—Ä–æ–¥–∞–π—Ç–µ –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É \"!–ø—Ä–æ–¥–∞—Ç—å\".')
        if limit - (int(profile.btcamount) + int(check[2])) < 0:
            data = limit - int(profile.btcamount)
            return await env.reply(
                f"–í—ã —Å–º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –µ—â–µ {plural_form(data, ('—Ñ–µ—Ä–º–∞', '—Ñ–µ—Ä–º—ã', '—Ñ–µ—Ä–º'))}" if data > 0 else '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±–æ–ª—å—à–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞—Ç—å –¥–∞–Ω–Ω—É—é —Ñ–µ—Ä–º—É.')
        if int(profile.money) < shopcenters[int(check[1]) - 1].price * int(check[2]):
            return await env.reply(
                f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. (–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {textify_value((shopcenters[int(check[1]) - 1].price * int(check[2])) - int(profile.money))}$)")
        profile.money -= Decimal(shopcenters[int(check[1]) - 1].price * int(check[2]))
        if profile.other and profile.other_id == shopcenters[int(check[1]) - 1].id:
            profile.btcamount += int(check[2])
        else:
            profile.other = shopcenters[int(check[1]) - 1]
            profile.btcamount = int(check[2])
        await manager.update(profile)
        return await env.reply(f"–ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º {shopcenters[int(check[1]) - 1].name}üéâ")


@plugin.on_startswith_text("–±–∏–∑–Ω–µ—Å—ã")
async def on_message(message, attachments, env):
    profile = await get_or_create_profile(message.from_id)
    check = message.text.split(' ')
    shopcenters = list(await manager.execute(business_shop.select().order_by(business_shop.price)))
    if len(check) < 3:
        text = f"–±–∏–∑–Ω–µ—Å—ã:\n"
        for i in range(len(shopcenters)):
            text += f"{'üî∏' if profile.money < shopcenters[i].price else 'üîπ'} {num_to_smile(i + 1)}. {shopcenters[i].name} - {humanize(shopcenters[i].price)}${backsider+'&#12288;&#12288;üëë –ù—É–∂–µ–Ω —Å—Ç–∞—Ç—É—Å: ' +shopcenters[i].needstatus+backsider if not shopcenters[i].needstatus == '' else backsider }&#12288;–ü—Ä–∏–±—ã–ª—å: –Ω–∞—á. {humanize(shopcenters[i].pay)}$\n"
        return await env.reply(text + '\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"!–±–∏–∑–Ω–µ—Å—ã [–Ω–æ–º–µ—Ä] [–∫–æ–ª-–≤–æ]\"')
    else:
        privs = await priviligeshelper.getUserPriviliges(env, message.from_id)
        if privs & shopcenters[int(check[1]) - 1].needstatus > 0 or privs & priviligeshelper.USER_ADMIN > 0:
            pass
        else:
            if not shopcenters[int(check[1]) - 1].needstatus == '':
                return await env.reply("–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç. –¢.–∫. –≤–∞—à —Å—Ç–∞—Ç—É—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –Ω–µ–≥–æ")
        if not check[1].isdigit():
            return await env.reply('–≤—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.')
        if profile.business and profile.business_id != shopcenters[int(check[1]) - 1].id:
            return await env.reply(
                '–£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –¥–∞–Ω–Ω–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ, –ø—Ä–æ–¥–∞–π—Ç–µ –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É \"!–ø—Ä–æ–¥–∞—Ç—å\".')
        if int(shopcenters[int(check[1]) - 1].limit) - (int(profile.business_amount) + int(check[2])) < 0:
            data = int(shopcenters[int(check[1]) - 1].limit) - int(profile.business_amount)
            return await env.reply(
                f"–í—ã —Å–º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –µ—â–µ {plural_form(data, ('–±–∏–∑–Ω–µ—Å', '–±–∏–∑–Ω–µ—Å–∞', '–±–∏–∑–Ω–µ—Å—ã'))}" if data > 0 else '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±–æ–ª—å—à–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å.')
        if int(profile.money) < shopcenters[int(check[1]) - 1].price * int(check[2]):
            return await env.reply(
                f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. (–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {textify_value((shopcenters[int(check[1]) - 1].price * int(check[2])) - int(profile.money))} $)")
        profile.money -= Decimal(shopcenters[int(check[1]) - 1].price * int(check[2]))
        if profile.business and profile.business_id == shopcenters[int(check[1]) - 1].id:
            profile.business_amount += int(check[2])
            vk_message = f'–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –µ—â–µ {check[2]} {shopcenters[int(check[1]) - 1].name}.'
        else:
            profile.business = shopcenters[int(check[1]) - 1]
            profile.business_amount = int(check[2])
            profile.business_materials = 0
            vk_message = f"–ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º –±–∏–∑–Ω–µ—Å–∞ {shopcenters[int(check[1]) - 1].name}!\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∏–∑–Ω–µ—Å–∞ - !–±–∏–∑–Ω–µ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã - !–±–∏–∑–Ω–µ—Å –º–∞—Ç–µ—Ä–∏–∞–ª—ã"
        await manager.update(profile)
        return await env.reply(vk_message)


@plugin.on_startswith_text("–ø—Ä–æ—Ñ–∏–ª—å")
async def on_message(message, attachments, env):
    profile = await get_or_create_profile(message.from_id)
    puid = message.from_id
    nextline = '\n'
    if profile.money < 0:
        profile.money = 0
        await manager.update(profile)
    if puid:
        c = await get_or_create_profile(puid)
        if not c.id:
            return await env.reply("–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π –≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        text = f"–ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\nüÜîID: {c.id}\nüí∞–ë–∞–ª–∞–Ω—Å: {humanize(c.money)}$ ({textify_value(round(c.money))})\n{f'üí≥–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç: {humanize(c.bankmoney)}$ ({textify_value(round(c.bankmoney))}){nextline}' if c.bankmoney > 0 else ''}üí±–ë–∏—Ç–∫–æ–∏–Ω–æ–≤: {humanize(c.btc)}…É\nüíπ–ö—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞:{humanize(int(plugin.bitcoin_price))}$\nüëë–†–µ–π—Ç–∏–Ω–≥: {c.rg}\n"
        if profile.clan:
            text += f"üåç–ö–ª–∞–Ω: {profile.clan.name}\n"
        if c.house or c.car or c.airplane or c.helicopter or c.apartment or c.mobile or c.other or c.business or c.dress:
            text += "üè°–í–∞—à–µ –∏–º—É—â–µ—Å—Ç–≤–æ:\n"
        if c.house:
            text += f"&#12288;üè†–î–æ–º: {c.house.name} (üÜî: {c.house_id})\n"
            if c.car:
                text += f"&#12288;üöó–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {c.car.name} (üÜî: {c.car_id})\n"
            if c.apartment:
                text += f"&#12288;üåá–ö–≤–∞—Ä—Ç–∏—Ä–∞: {c.apartment.name} (üÜî: {c.apartment_id})\n"
            if c.airplane:
                text += f"&#12288;üõ©–°–∞–º–æ–ª–µ—Ç: {c.airplane.name} (üÜî: {c.airplane_id})\n"
            if c.helicopter:
                text += f"&#12288;üöÅ–í–µ—Ä—Ç–æ–ª–µ—Ç: {c.helicopter.name} (üÜî: {c.helicopter_id})\n"
            if c.mobile:
                text += f"&#12288;üì±–¢–µ–ª–µ—Ñ–æ–Ω: {c.mobile.name} (üÜî: {c.mobile_id})\n"
            if c.other:
                text += f"&#12288;üîã–ú–∞–π–Ω–µ—Ä: {c.other.name} (üÜî: {c.other_id}/–ö–æ–ª-–≤–æ: {c.btcamount})\n"
            if c.business:
                text += f'&#12288;üè¶–ë–∏–∑–Ω–µ—Å: {c.business.name} (üÜî: {c.business.id})\n'
            if c.dress:
                text += f"&#12288;üì±üåá–û–¥–µ–∂–¥–∞: {c.dress.name} (üÜî: {c.dress_id})\n"
            text += f"üíæ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {c.datareg}"
            return await env.reply(text)
        text = f"–≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\nüÜîID: {profile.id}\nüí∞–ë–∞–ª–∞–Ω—Å: {humanize(profile.money)}$ ({textify_value(round(profile.money))})\n{f'üí≥–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç: {humanize(profile.bankmoney)}$ ({textify_value(round(profile.bankmoney))}){nextline}' if profile.bankmoney > 0 else ''}üí±–ë–∏—Ç–∫–æ–∏–Ω–æ–≤: {humanize(profile.btc)}…É\nüíπ–ö—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞:{humanize(int(plugin.bitcoin_price))}$\nüëë–†–µ–π—Ç–∏–Ω–≥: {profile.rg}\n"
        if profile.clan:
            text += f"üåç–ö–ª–∞–Ω: {profile.clan.name}\n"
        if profile.house or profile.car or profile.airplane or profile.helicopter or profile.apartment or profile.mobile or profile.other or profile.business:
            text += "üè°–í–∞—à–µ –∏–º—É—â–µ—Å—Ç–≤–æ:\n"
        if profile.house:
            text += f"&#12288;üè†–î–æ–º: {profile.house.name} (üÜî: {profile.house_id})\n"
        if profile.car:
            text += f"&#12288;üöó–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {profile.car.name} (üÜî: {profile.car_id})\n"
        if profile.apartment:
            text += f"&#12288;üåá–ö–≤–∞—Ä—Ç–∏—Ä–∞: {profile.apartment.name} (üÜî: {profile.apartment_id})\n"
        if profile.airplane:
            text += f"&#12288;üõ©–°–∞–º–æ–ª–µ—Ç: {profile.airplane.name} (üÜî: {profile.airplane_id})\n"
        if profile.helicopter:
            text += f"&#12288;üöÅ–í–µ—Ä—Ç–æ–ª–µ—Ç: {profile.helicopter.name} (üÜî: {profile.helicopter_id})\n"
        if profile.mobile:
            text += f"&#12288;üì±–¢–µ–ª–µ—Ñ–æ–Ω: {profile.mobile.name} (üÜî: {profile.mobile_id})\n"
        if profile.other:
            text += f"&#12288;üîã–ë–∏—Ç–∫–æ–∏–Ω —Ñ–µ—Ä–º–∞: {profile.other.name} (üÜî: {profile.other_id}/–ö–æ–ª-–≤–æ: {profile.btcamount})\n"
        if profile.business:
            text += f'&#12288;üè¶–ë–∏–∑–Ω–µ—Å: {profile.business.name} (üÜî: {profile.business.id})\n'
        text += f"üíæ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {profile.datareg}"
        return await env.reply(text)


@plugin.on_startswith_text("—Ç–æ–≤–∞—Ä—ã")
async def on_message(message, attachments, env):
    data = f'''–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:
üöô–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:
&#12288;üöó–ú–∞—à–∏–Ω—ã
&#12288;üõ©–°–∞–º–æ–ª–µ—Ç—ã
&#12288;üöÅ–í–µ—Ä—Ç–æ–ª–µ—Ç—ã

üèò–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å:
&#12288;üè†–î–æ–º–∞
&#12288;üåá–ö–≤–∞—Ä—Ç–∏—Ä—ã

üì±–¢–µ–ª–µ—Ñ–æ–Ω—ã
&#12288;üéÄ–û–¥–µ–∂–¥–∞

üè¶–ë–∏–∑–Ω–µ—Å—ã

üîã–§–µ—Ä–º—ã

üëë–†–µ–π—Ç–∏–Ω–≥ [–∫–æ–ª-–≤–æ] -  25 –º–ª–Ω. $

–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "![–∫–∞—Ç–µ–≥–æ—Ä–∏—è] [–Ω–æ–º–µ—Ä]".
–ù–∞–ø—Ä–∏–º–µ—Ä: "!—Å–∞–º–æ–ª–µ—Ç—ã 5"'''
    return await env.reply(data)


@plugin.on_startswith_text("–º–∞—à–∏–Ω—ã")
async def on_message(message, attachments, env):
    profile = await get_or_create_profile(message.from_id)
    check = message.text.split(' ')
    shopcenters = list(await manager.execute(
        shopcenter.select().where(shopcenter.slot == "car").order_by(shopcenter.price)))
    if len(check) < 2:
        text = f"–∫–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:\n"
        for i in range(len(shopcenters)):
            text += f"{'üî∏' if profile.money < shopcenters[i].price else 'üîπ'} {num_to_smile(i + 1)}. {shopcenters[i].name} - {humanize(shopcenters[i].price)}${backsider+'&#12288;&#12288;üëë –ù—É–∂–µ–Ω —Å—Ç–∞—Ç—É—Å: ' +shopcenters[i].needstatus+backsider if not shopcenters[i].needstatus == '' else backsider }"
        return await env.reply(text + f'\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"!–º–∞—à–∏–Ω—ã [–Ω–æ–º–µ—Ä] [–∫–æ–ª-–≤–æ]\"')
    else:
        privs = await priviligeshelper.getUserPriviliges(env, message.from_id)
        if privs & shopcenters[int(check[1]) - 1].needstatus > 0 or privs & priviligeshelper.USER_ADMIN > 0:
            pass
        else:
            if not shopcenters[int(check[1]) - 1].needstatus == '':
                return await env.reply("–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç. –¢.–∫. –≤–∞—à —Å—Ç–∞—Ç—É—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –Ω–µ–≥–æ")
        if profile.car:
            return await env.reply(
                '–£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –¥–∞–Ω–Ω–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ, –ø—Ä–æ–¥–∞–π—Ç–µ –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É \"!–ø—Ä–æ–¥–∞—Ç—å\".')
        if not check[1].isdigit():
            return await env.reply('–≤—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.')
        if int(profile.money) < shopcenters[int(check[1]) - 1].price:
            return await env.reply("—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        profile.money -= shopcenters[int(check[1]) - 1].price
        profile.car = shopcenters[int(check[1]) - 1]
        await manager.update(profile)
        return await env.reply(f"–ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º {shopcenters[int(check[1]) - 1].name}üéâ")


@plugin.on_startswith_text("–æ–¥–µ–∂–¥–∞")
async def on_message(message, attachments, env):
    profile = await get_or_create_profile(message.from_id)
    check = message.text.split(' ')
    shopcenters = list(await manager.execute(
        shopcenter.select().where(shopcenter.slot == "dress").order_by(shopcenter.price)))
    if len(check) < 2:
        text = f"–∫–∞—Ç–∞–ª–æ–≥ –æ–¥–µ–∂–¥—ã:\n"
        for i in range(len(shopcenters)):
            text += f"{'üî∏' if profile.money < shopcenters[i].price else 'üîπ'} {num_to_smile(i + 1)}. {shopcenters[i].name} - {humanize(shopcenters[i].price)}${backsider+'&#12288;&#12288;üëë –ù—É–∂–µ–Ω —Å—Ç–∞—Ç—É—Å: ' +shopcenters[i].needstatus+backsider if not shopcenters[i].needstatus == '' else backsider }"
        return await env.reply(text + f'\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"!–æ–¥–µ–∂–¥–∞ [–Ω–æ–º–µ—Ä] [–∫–æ–ª-–≤–æ]\"')
    else:
        privs = await priviligeshelper.getUserPriviliges(env, message.from_id)
        if privs & shopcenters[int(check[1]) - 1].needstatus > 0 or privs & priviligeshelper.USER_ADMIN > 0:
            pass
        else:
            if not shopcenters[int(check[1]) - 1].needstatus == '':
                return await env.reply("–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç. –¢.–∫. –≤–∞—à —Å—Ç–∞—Ç—É—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –Ω–µ–≥–æ")
        if profile.car:
            return await env.reply(
                '–£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –¥–∞–Ω–Ω–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ, –ø—Ä–æ–¥–∞–π—Ç–µ –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É \"!–ø—Ä–æ–¥–∞—Ç—å\".')
        if not check[1].isdigit():
            return await env.reply('–≤—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.')
        if int(profile.money) < shopcenters[int(check[1]) - 1].price:
            return await env.reply("—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        profile.money -= shopcenters[int(check[1]) - 1].price
        profile.car = shopcenters[int(check[1]) - 1]
        await manager.update(profile)
        return await env.reply(f"–ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º {shopcenters[int(check[1]) - 1].name}üéâ")


@plugin.on_startswith_text("—Å–∞–º–æ–ª–µ—Ç—ã", "—Å–∞–º–æ–ª—ë—Ç—ã")
async def on_message(message, attachments, env):
    profile = await get_or_create_profile(message.from_id)
    check = message.text.split(' ')
    shopcenters = list(await manager.execute(
        shopcenter.select().where(shopcenter.slot == "airplane").order_by(shopcenter.price)))
    if len(check) < 2:
        text = f"–∫–∞—Ç–∞–ª–æ–≥ —Å–∞–º–æ–ª–µ—Ç–æ–≤:\n"
        for i in range(len(shopcenters)):
            text += f"{'üî∏' if profile.money < shopcenters[i].price else 'üîπ'} {num_to_smile(i + 1)}. {shopcenters[i].name} - {humanize(shopcenters[i].price)}${backsider+'&#12288;&#12288;üëë –ù—É–∂–µ–Ω —Å—Ç–∞—Ç—É—Å: ' +shopcenters[i].needstatus+backsider if not shopcenters[i].needstatus == '' else backsider }"
        return await env.reply(text + f'\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"!—Å–∞–º–æ–ª–µ—Ç—ã [–Ω–æ–º–µ—Ä] [–∫–æ–ª-–≤–æ]\"')
    else:
        privs = await priviligeshelper.getUserPriviliges(env, message.from_id)
        if privs & shopcenters[int(check[1]) - 1].needstatus > 0 or privs & priviligeshelper.USER_ADMIN > 0:
            pass
        else:
            if not shopcenters[int(check[1]) - 1].needstatus == '':
                return await env.reply("–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç. –¢.–∫. –≤–∞—à —Å—Ç–∞—Ç—É—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –Ω–µ–≥–æ")
        if profile.airplane:
            return await env.reply(
                '–£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –¥–∞–Ω–Ω–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ, –ø—Ä–æ–¥–∞–π—Ç–µ –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É \"!–ø—Ä–æ–¥–∞—Ç—å\".')
        if not check[1].isdigit():
            return await env.reply('–≤—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.')
        if int(profile.money) < shopcenters[int(check[1]) - 1].price:
            return await env.reply("—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        profile.money -= shopcenters[int(check[1]) - 1].price
        profile.airplane = shopcenters[int(check[1]) - 1]
        await manager.update(profile)
        return await env.reply(f"–ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º {shopcenters[int(check[1]) - 1].name}üéâ")


@plugin.on_startswith_text("–≤–µ—Ä—Ç–æ–ª–µ—Ç—ã", "–≤–µ—Ä—Ç–æ–ª—ë—Ç—ã")
async def on_message(message, attachments, env):
    profile = await get_or_create_profile(message.from_id)
    check = message.text.split(' ')
    shopcenters = list(await manager.execute(
        shopcenter.select().where(shopcenter.slot == "helicopter").order_by(shopcenter.price)))
    if len(check) < 2:
        text = f"–∫–∞—Ç–∞–ª–æ–≥ –≤–µ—Ä—Ç–æ–ª–µ—Ç–æ–≤:\n"
        for i in range(len(shopcenters)):
            text += f"{'üî∏' if profile.money < shopcenters[i].price else 'üîπ'} {num_to_smile(i + 1)}. {shopcenters[i].name} - {humanize(shopcenters[i].price)}${backsider+'&#12288;&#12288;üëë –ù—É–∂–µ–Ω —Å—Ç–∞—Ç—É—Å: ' +shopcenters[i].needstatus+backsider if not shopcenters[i].needstatus == '' else backsider }"
        return await env.reply(text + f'\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"!–≤–µ—Ä—Ç–æ–ª–µ—Ç—ã [–Ω–æ–º–µ—Ä] [–∫–æ–ª-–≤–æ]\"')
    else:
        privs = await priviligeshelper.getUserPriviliges(env, message.from_id)
        if privs & shopcenters[int(check[1]) - 1].needstatus > 0 or privs & priviligeshelper.USER_ADMIN > 0:
            pass
        else:
            if not shopcenters[int(check[1]) - 1].needstatus == '':
                return await env.reply("–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç. –¢.–∫. –≤–∞—à —Å—Ç–∞—Ç—É—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –Ω–µ–≥–æ")
        if profile.helicopter:
            return await env.reply(
                '–£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –¥–∞–Ω–Ω–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ, –ø—Ä–æ–¥–∞–π—Ç–µ –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É \"!–ø—Ä–æ–¥–∞—Ç—å\".')
        if not check[1].isdigit():
            return await env.reply('–≤—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.')
        if int(profile.money) < shopcenters[int(check[1]) - 1].price:
            return await env.reply("—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        profile.money -= shopcenters[int(check[1]) - 1].price
        profile.helicopter = shopcenters[int(check[1]) - 1]
        await manager.update(profile)
        return await env.reply(f"–ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º {shopcenters[int(check[1]) - 1].name}üéâ")


@plugin.on_startswith_text("–¥–æ–º–∞")
async def on_message(message, attachments, env):
    profile = await get_or_create_profile(message.from_id)
    check = message.text.split(' ')
    shopcenters = list(await manager.execute(
        shopcenter.select().where(shopcenter.slot == "house").order_by(shopcenter.price)))
    if len(check) < 2:
        text = f"–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å (–¥–æ–º–∞):\n"
        for i in range(len(shopcenters)):
            text += f"{'üî∏' if profile.money < shopcenters[i].price else 'üîπ'} {num_to_smile(i + 1)}. {shopcenters[i].name} - {humanize(shopcenters[i].price)}${backsider+'&#12288;&#12288;üëë –ù—É–∂–µ–Ω —Å—Ç–∞—Ç—É—Å: ' +shopcenters[i].needstatus+backsider if not shopcenters[i].needstatus == '' else backsider }"
        return await env.reply(text + f'\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"!–¥–æ–º–∞ [–Ω–æ–º–µ—Ä] [–∫–æ–ª-–≤–æ]\"')
    else:
        privs = await priviligeshelper.getUserPriviliges(env, message.from_id)
        if privs & shopcenters[int(check[1]) - 1].needstatus > 0 or privs & priviligeshelper.USER_ADMIN > 0:
            pass
        else:
            if not shopcenters[int(check[1]) - 1].needstatus == '':
                return await env.reply("–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç. –¢.–∫. –≤–∞—à —Å—Ç–∞—Ç—É—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –Ω–µ–≥–æ")
        if profile.house:
            return await env.reply('–£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –¥–æ–º, –ø—Ä–æ–¥–∞–π—Ç–µ –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É \"!–ø—Ä–æ–¥–∞—Ç—å\".')
        if not check[1].isdigit():
            return await env.reply('–≤—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.')
        if int(profile.money) < shopcenters[int(check[1]) - 1].price:
            return await env.reply("—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        profile.money -= shopcenters[int(check[1]) - 1].price
        profile.house = shopcenters[int(check[1]) - 1]
        await manager.update(profile)
        return await env.reply(f"–ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º {shopcenters[int(check[1]) - 1].name}üéâ")


@plugin.on_startswith_text("–∫–≤–∞—Ä—Ç–∏—Ä—ã")
async def on_message(message, attachments, env):
    profile = await get_or_create_profile(message.from_id)
    check = message.text.split(' ')
    shopcenters = list(await manager.execute(
        shopcenter.select().where(shopcenter.slot == "apartment").order_by(shopcenter.price)))
    if len(check) < 2:
        text = f"–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å (–∫–≤–∞—Ä—Ç–∏—Ä—ã):\n"
        for i in range(len(shopcenters)):
            text += f"{'üî∏' if profile.money < shopcenters[i].price else 'üîπ'} {num_to_smile(i + 1)}. {shopcenters[i].name} - {humanize(shopcenters[i].price)}${backsider+'&#12288;&#12288;üëë –ù—É–∂–µ–Ω —Å—Ç–∞—Ç—É—Å: ' +shopcenters[i].needstatus+backsider if not shopcenters[i].needstatus == '' else backsider }"
        return await env.reply(text + f'\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"!–∫–≤–∞—Ä—Ç–∏—Ä—ã [–Ω–æ–º–µ—Ä] [–∫–æ–ª-–≤–æ]\"')
    else:
        privs = await priviligeshelper.getUserPriviliges(env, message.from_id)
        if privs & shopcenters[int(check[1]) - 1].needstatus > 0 or privs & priviligeshelper.USER_ADMIN > 0:
            pass
        else:
            if not shopcenters[int(check[1]) - 1].needstatus == '':
                return await env.reply("–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç. –¢.–∫. –≤–∞—à —Å—Ç–∞—Ç—É—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –Ω–µ–≥–æ")
        if profile.apartment:
            return await env.reply(
                '–£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –¥–∞–Ω–Ω–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ, –ø—Ä–æ–¥–∞–π—Ç–µ –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É \"!–ø—Ä–æ–¥–∞—Ç—å\".')
        if not check[1].isdigit():
            return await env.reply('–≤—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.')
        if int(profile.money) < shopcenters[int(check[1]) - 1].price:
            return await env.reply("—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        profile.money -= shopcenters[int(check[1]) - 1].price
        profile.apartment = shopcenters[int(check[1]) - 1]
        await manager.update(profile)
        return await env.reply(f"–ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º {shopcenters[int(check[1]) - 1].name}üéâ")


@plugin.on_startswith_text("—Ç–µ–ª–µ—Ñ–æ–Ω—ã")
async def on_message(message, attachments, env):
    profile = await get_or_create_profile(message.from_id)
    check = message.text.split(' ')
    shopcenters = list(await manager.execute(
        shopcenter.select().where(shopcenter.slot == "mobile").order_by(shopcenter.price)))
    if len(check) < 2:
        text = f"–∫–∞—Ç–∞–ª–æ–≥ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:\n"
        for i in range(len(shopcenters)):
            text += f"{'üî∏' if profile.money < shopcenters[i].price else 'üîπ'} {num_to_smile(i + 1)}. {shopcenters[i].name} - {humanize(shopcenters[i].price)}${backsider+'&#12288;&#12288;üëë –ù—É–∂–µ–Ω —Å—Ç–∞—Ç—É—Å: ' +shopcenters[i].needstatus+backsider if not shopcenters[i].needstatus == '' else backsider }"
        return await env.reply(text + f'\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"!—Ç–µ–ª–µ—Ñ–æ–Ω—ã [–Ω–æ–º–µ—Ä] [–∫–æ–ª-–≤–æ]\"')
    else:
        privs = await priviligeshelper.getUserPriviliges(env, message.from_id)
        if privs & shopcenters[int(check[1]) - 1].needstatus > 0 or privs & priviligeshelper.USER_ADMIN > 0:
            pass
        else:
            if not shopcenters[int(check[1]) - 1].needstatus == '':
                return await env.reply("–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç. –¢.–∫. –≤–∞—à —Å—Ç–∞—Ç—É—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –Ω–µ–≥–æ")
        if profile.mobile:
            return await env.reply(
                '–£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –¥–∞–Ω–Ω–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ, –ø—Ä–æ–¥–∞–π—Ç–µ –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É \"!–ø—Ä–æ–¥–∞—Ç—å\".')
        if not check[1].isdigit():
            return await env.reply('–≤—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.')
        if int(profile.money) < shopcenters[int(check[1]) - 1].price:
            return await env.reply("—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        profile.money -= shopcenters[int(check[1]) - 1].price
        profile.mobile = shopcenters[int(check[1]) - 1]
        await manager.update(profile)
        return await env.reply(f"–ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º {shopcenters[int(check[1]) - 1].name}üéâ")


@plugin.on_startswith_text("–ø—Ä–æ–¥–∞—Ç—å")
async def on_message(message, attachments, env):
    profile = await get_or_create_profile(message.from_id)
    if len(env['args']) < 1:
        return await env.reply(
            "–ö–∞–∫ –Ω–∞–¥–æ: –ø—Ä–æ–¥–∞—Ç—å [–ø—Ä–µ–¥–º–µ—Ç(–¥–æ–º, –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –º–∞–π–Ω–µ—Ä, –±–∏–∑–Ω–µ—Å –∏ —Ç.–¥)]")

    slot = env['args'][0]

    if slot.lower() not in (
            "–¥–æ–º", "–∞–≤—Ç–æ–º–æ–±–∏–ª—å", "–≤–µ—Ä—Ç–æ–ª–µ—Ç", "–∫–≤–∞—Ä—Ç–∏—Ä–∞", "—Å–∞–º–æ–ª–µ—Ç", "—Ç–µ–ª–µ—Ñ–æ–Ω", "–º–∞–π–Ω–µ—Ä", '–±–∏–∑–Ω–µ—Å'):
        return await env.reply(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: –¥–æ–º, –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –º–∞–π–Ω–µ—Ä, —Å–∞–º–æ–ª–µ—Ç, —Ç–µ–ª–µ—Ñ–æ–Ω, –±–∏–∑–Ω–µ—Å, –≤–µ—Ä—Ç–æ–ª–µ—Ç, –∫–≤–∞—Ä—Ç–∏—Ä–∞.")
    amount = 1
    data = None
    d_type = 0
    if slot.lower() == "–¥–æ–º":
        data = profile.house_id
        profile.house_id = None
    if slot.lower() == "–∞–≤—Ç–æ–º–æ–±–∏–ª—å":
        data = profile.car_id
        profile.car_id = None
    if slot.lower() == "–≤–µ—Ä—Ç–æ–ª–µ—Ç":
        data = profile.helicopter_id
        profile.helicopter_id = None
    if slot.lower() == "–∫–≤–∞—Ä—Ç–∏—Ä–∞":
        data = profile.apartment_id
        profile.apartment_id = None
    if slot.lower() == "—Å–∞–º–æ–ª–µ—Ç":
        data = profile.airplane_id
        profile.airplane_id = None
    if slot.lower() == "—Ç–µ–ª–µ—Ñ–æ–Ω":
        data = profile.mobile_id
        profile.mobile_id = None
    if slot.lower() == "–æ–¥–µ–∂–¥–∞":
        data = profile.dress_id
        profile.dress_id = None
    if slot.lower() == "–º–∞–π–Ω–µ—Ä":
        data = profile.other_id
        profile.other_id = None
        amount = profile.btcamount
        profile.btcamount = 0
    if slot.lower() == "–±–∏–∑–Ω–µ—Å":
        data = profile.business_id
        d_type = 1
        profile.business = None
        amount = profile.business_amount
        profile.business_amount = 0
    try:
        if data is None:
            return await env.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞")
    except(TypeError):
        return await env.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞")
    if d_type == 1:
        shopcenters = await manager.get(business_shop, business_shop.id == data)
    else:
        shopcenters = await manager.get(shopcenter, shopcenter.id == data)
    pr = (shopcenters.price * amount) // 1.5
    profile.money += int(pr)
    await manager.update(profile)
    return await env.reply(f"–í—ã –ø—Ä–æ–¥–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –∑–∞ {humanize(pr)}$.")


@plugin.on_startswith_text("–±–∏—Ç–∫–æ–∏–Ω –∫—É–ø–∏—Ç—å")
async def on_message(message, attachments, env):
    profile = await get_or_create_profile(message.from_id)
    if len(env['args']) < 1 or not env['args'][0].isdigit():
        return await env.reply("–ö–∞–∫ –Ω–∞–¥–æ –ø–æ–∫—É–ø–∞—Ç—å: –±–∏—Ç–∫–æ–∏–Ω –∫—É–ø–∏—Ç—å [–∫–æ–ª-–≤–æ]")
    amount = int(env['args'][0])

    if int(profile.money) < int(plugin.bitcoin_price) * int(amount):
        return await env.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ë–∏—Ç–∫–æ–∏–Ω–æ–≤.")
    if int(amount) <= 0:
        return await env.reply('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.')
    profile.money -= int(plugin.bitcoin_price) * int(amount)
    profile.btc += int(amount)
    await manager.update(profile)
    return await env.reply(f"–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {int(amount)}…É –∑–∞ {humanize(int(plugin.bitcoin_price) * int(amount))}$.")


@plugin.on_startswith_text("–±–∏—Ç–∫–æ–∏–Ω –ø—Ä–æ–¥–∞—Ç—å")
async def on_message(message, attachments, env):
    profile = await get_or_create_profile(message.from_id)
    if len(env['args']) < 1 or not env['args'][0].isdigit():
        return await env.reply("–ö–∞–∫ –Ω–∞–¥–æ –ø–æ–∫—É–ø–∞—Ç—å: –±–∏—Ç–∫–æ–∏–Ω –ø—Ä–æ–¥–∞—Ç—å[–∫–æ–ª-–≤–æ]")
    amount = int(env['args'][0])

    if amount == "–≤—Å—ë" or amount == "–≤—Å–µ":
        amount = profile.btc
    if int(amount) <= 0:
        return await env.reply('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.')
    if profile.btc < int(amount):
        return await env.reply("–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏—Ç–∫–æ–∏–Ω–æ–≤.")
    profile.money += int(plugin.bitcoin_price) * int(amount)
    profile.btc -= int(amount)
    await manager.update(profile)
    return await env.reply(f"–í—ã –ø—Ä–æ–¥–∞–ª–∏ {int(amount)}…É –∑–∞ {humanize(int(plugin.bitcoin_price) * int(amount))}$.")


@plugin.on_startswith_text("–ø–µ—Ä–µ–¥–∞—Ç—å")
async def on_message(message, attachments, env):
    profile = await get_or_create_profile(message.from_id)
    if len(env['args']) < 2:
        return await env.reply("–ö–∞–∫ –Ω–∞–¥–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å: –ø–µ—Ä–µ–¥–∞—Ç—å [id] [–∫–æ–ª-–≤–æ]")
    amount = int(env['args'][1])
    user_idd = env['args'][0]

    if not await get_or_none(Profile, id=user_idd):
        return await env.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    if int(user_idd) == profile.id:
        return await env.reply("–ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ.")
    c, cr = await manager.get_or_create(Profile, id=user_idd)
    data = c.user_id
    if amount == "–≤—Å—ë" or amount == "–≤—Å–µ":
        amount = profile.money
        result = amount
    else:
        # value = re.findall(r'\d+', amount)
        # text = re.sub(r'[^\w\s]+|[\d]+', r'', amount).strip()
        # result = text_to_value(value[0], text)
        result = amount
    if int(result) < 1:
        return await env.reply('–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.')
    if message.from_id != env.eenv['admins'][0] and int(profile.money) < result:
        return await env.reply("–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
    c.money += result
    profile.money -= result if message.from_id != env.eenv['admins'][0] else 0
    await env.reply(f"–í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—É–º–º—É –≤ —Ä–∞–∑–º–µ—Ä–µ {humanize(result)}$.")
    await manager.update(profile)
    return await manager.update(c)


@plugin.on_startswith_text("–±–∏—Ç–∫–æ–∏–Ω –ø–µ—Ä–µ–¥–∞—Ç—å")
async def on_message(message, attachments, env):
    profile = await get_or_create_profile(message.from_id)
    if len(env['args']) < 2:
        return await env.reply("–ö–∞–∫ –Ω–∞–¥–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –±–∏—Ç–∫–æ–∏–Ω—ã: –ø–µ—Ä–µ–¥–∞—Ç—å [id] [–∫–æ–ª-–≤–æ]")
    amount = int(env['args'][1])
    user_idd = env['args'][0]

    if not await get_or_none(Profile, id=user_idd):
        return await env.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    if int(user_idd) == profile.id:
        return await env.reply("–ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ.")
    c, cr = await manager.get_or_create(Profile, id=user_idd)
    data = c.user_id
    if amount == "–≤—Å—ë" or amount == "–≤—Å–µ":
        amount = profile.btc
    if int(amount) < 1:
        return await env.reply('–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.')
    if int(profile.btc) < int(amount):
        return await env.reply("–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏—Ç–∫–æ–∏–Ω–æ–≤.")
    c.btc += int(amount)
    profile.btc -= int(amount)
    await env.reply(f"–í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {int(amount)}‚Çø")
    await manager.update(profile)
    return await manager.update(c)


@plugin.on_startswith_text("—Ä–µ–π—Ç–∏–Ω–≥")
async def on_message(message, attachments, env):
    profile = await get_or_create_profile(message.from_id)
    if len(env['args']) < 1:
        return await env.reply(f"–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ - {profile.rg}üëë")

    if not env['args'][0].isdigit():
        return await env.reply("–û—Ö, –∞ –º–æ–∂–Ω–æ —Ç–∞–∫ –Ω–µ —à—É—Ç–∏—Ç—å?!")

    amount = env['args'][0]
    if profile.money < int(amount) * 25000000:
        return await env.reply(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
    profile.money -= int(amount) * 25000000
    profile.rg += int(amount)
    await manager.update(profile)
    return await env.reply(f"–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {amount} –æ—á–∫–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∑–∞ {humanize(int(amount) * 25000000)}$")


@plugin.on_startswith_text("—Å–ø–∏—Å–æ–∫ –±–æ–≥–∞—á–µ–π")
async def on_message(message, attachments, env):
    profile = await get_or_create_profile(message.from_id)
    top = list(await manager.execute(Profile.select().limit(200).order_by(
        (Profile.rg * int(25000000) + Profile.money + Profile.bankmoney).desc())))
    data = []

    for u in top:
        privs = await priviligeshelper.getUserPriviliges(env, u.user_id)
        if privs&priviligeshelper.USER_ADMIN>0 or privs&priviligeshelper.USER_MODERATOR>0:
            continue
        data.append(
            {"id": u.user_id, "rg": u.rg, "u_name": u.profile_name, "money": u.money, "bankmoney": u.bankmoney}
        )

    mesto = list(z['id'] for z in data)
    text = "—Ä–µ–π—Ç–∏–Ω–≥ —Å–∞–º—ã—Ö –±–æ–≥–∞—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:\n"
    for i in enumerate(data[:10], start=1):
        name = await parse_user_name(env, i[1]['id'])
        num = num_to_smile(i[0])
        text += f"{num}. @id{i[1]['id']} ({name}) | üëë{i[1]['rg']} | {textify_value(int(i[1]['money'] + i[1]['bankmoney']))}$\n"
    if message.from_id in mesto and mesto.index(int(message.from_id)) + 1 > 10:
        name = await parse_user_name(env, message.from_id)
        num = num_to_smile(mesto.index(int(message.from_id)) + 1)
        text += f"----------------------------\n{num}. {name} | üëë{profile.rg} | {textify_value(int(profile.money + profile.bankmoney))}$"
    return await env.reply(text)


@plugin.on_startswith_text("–±–∞–Ω–∫ –±–∞–ª–∞–Ω—Å")
async def on_message(message, attachments, env):
    profile = await get_or_create_profile(message.from_id)
    if profile.bankmoney <= 0:
        return await env.reply("–í—ã –Ω–µ –≤–∫–ª–∞–¥—ã–≤–∞–ª–∏ –≤ –±–∞–Ω–∫.")
    a = time.time()
    b = time.mktime(profile.last_bank_payout.timetuple()) if profile.last_bank_payout else time.time()
    res = (a - b) // 86400
    data = (profile.bankmoney * 0.07) * res
    return await env.reply(
        f"üíµ–°–µ–π—á–∞—Å –≤ –±–∞–Ω–∫–µ {textify_value(profile.bankmoney)}$\n{f'üí∏–ü—Ä–∏–±—ã–ª—å —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤: {humanize(data)}$' if res >= 1 else ''}")


@plugin.on_startswith_text("–±–∞–Ω–∫ –≤–ª–æ–∂–∏—Ç—å")
async def on_message(message, attachments, env):
    profile = await get_or_create_profile(message.from_id)
    if len(env['args']) < 1:
        return await env.reply(f"–ê —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–ª–æ–∂–∏—Ç—å –≤ –±–∞–Ω–∫?")

    amount = env['args'][0]
    if amount == "–≤—Å—ë" or amount == "–≤—Å–µ":
        amount = profile.money
        result = amount - 100
    else:
        value = re.findall(r'\d+', amount)
        text = re.sub(r'[^\w\s]+|[\d]+', r'', amount).strip()
        result = text_to_value(value[0], text)
    if int(profile.money) < result:
        return await env.reply("–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
    if int(profile.money) <= 0:
        return await env.reply('–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç.')
    if int(result) < 1:
        return await env.reply('–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.')
    a = time.time()
    b = time.mktime(profile.last_bank_payout.timetuple()) if profile.last_bank_payout else time.time()
    res = (a - b) // 86400
    profile.bankmoney += (profile.bankmoney * 0.07) * res if res >= 1 else 0
    profile.bankmoney += int(result)
    profile.money -= int(result)
    profile.last_bank_payout = datetime.datetime.now()
    await manager.update(profile)
    return await env.reply(
        f"üíµ–í—ã –≤–ª–æ–∂–∏–ª–∏ +{humanize(result)}$.\n–í —Ç–µ—á–µ–Ω–∏–∏ –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è —Å –º–æ–º–µ–Ω—Ç–∞ –≤–ª–æ–∂–µ–Ω–∏—è/—Å–Ω—è—Ç–∏—è –¥–µ–Ω–µ–≥, –≤–∞–º –±—É–¥—É—Ç –∫–∞–ø–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ —Ä–∞–∑–º–µ—Ä–µ 7% –æ—Ç —Å—É–º–º—ã, –≤–ª–æ–∂–µ–Ω–Ω–æ–π –≤ –±–∞–Ω–∫.")


@plugin.on_startswith_text("–±–∞–Ω–∫ —Å–Ω—è—Ç—å")
async def on_message(message, attachments, env):
    profile = await get_or_create_profile(message.from_id)
    if len(env['args']) < 1:
        return await env.reply(f"–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å.")

    amount = env['args'][0]
    a = time.time()
    b = time.mktime(profile.last_bank_payout.timetuple()) if profile.last_bank_payout else time.time()
    res = (a - b) // 86400
    plus_money = (profile.bankmoney * 0.07) * res if res >= 1 else 0
    profile.bankmoney += (profile.bankmoney * 0.07) * res if res >= 1 else 0
    if amount == "–≤—Å—ë" or amount == "–≤—Å–µ":
        amount = profile.bankmoney
        result = amount
    else:
        value = re.findall(r'\d+', amount)
        text = re.sub(r'[^\w\s]+|[\d]+', r'', amount).strip()
        result = text_to_value(value[0], text)
    if int(result) < 1:
        return await env.reply('–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.')
    if profile.bankmoney < int(result):
        return await env.reply("–ù–∞ –≤–∞—à–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å—á–µ—Ç—É –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥.")
    profile.bankmoney -= int(result)
    profile.money += int(result)
    profile.last_bank_payout = datetime.datetime.now()
    await manager.update(profile)
    sustrdplus = f'–ü—Ä–∏–±—ã–ª—å —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ {humanize(plus_money)}' if plus_money > 0 else ""
    return await env.reply(f"üíµ–í—ã —Å–Ω—è–ª–∏ —Å –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ {humanize(result)}$\n{sustrdplus}")


@plugin.on_startswith_text("–º–∞–π–Ω–µ—Ä —Å–Ω—è—Ç—å")
async def on_message(message, attachments, env):
    profile = await get_or_create_profile(message.from_id)
    if not profile.other:
        return await env.reply(f"—É –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã, –∫—É–ø–∏—Ç—å –µ—ë –º–æ–∂–Ω–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ")
    if profile.minercheck == 0:
        return await env.reply("–≤–≤–µ–¥–∏—Ç–µ '!–º–∞–π–Ω–µ—Ä' , —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–µ—Ä")
    if not profile.last_btc_payout:
        a = datetime.datetime.now().minute
        profile.last_btc_payout = datetime.datetime.now() + timedelta(minutes=-a)
        await manager.update(profile)
    a = time.time()
    b = time.mktime(profile.last_btc_payout.timetuple())
    res = (a - b) // 86400
    if (profile.other.moneymin / 10) * res <= 0:
        return await env.reply("–í—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏")
    profile.btc += (profile.other.moneymin / 10) * res * profile.btcamount
    profile.tt = time.time()
    profile.minercheck = 0
    profile.last_btc_payout = datetime.datetime.now()
    await manager.update(profile)
    return await env.reply(
        f"–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {round((profile.other.moneymin / 10) * res * profile.btcamount)}‚Çø.\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –º–∞–π–Ω–µ—Ä!")


@plugin.on_startswith_text("–º–∞–π–Ω–µ—Ä")
async def on_message(message, attachments, env):
    profile = await get_or_create_profile(message.from_id)
    if not profile.other:
        return await env.reply(f"—É –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã, –∫—É–ø–∏—Ç—å –µ—ë –º–æ–∂–Ω–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ")
    if profile.minercheck == 0:
        a = datetime.datetime.now().minute
        profile.last_btc_payout = datetime.datetime.now() + timedelta(minutes=-a)
        profile.minercheck = 1
        await manager.update(profile)
        await env.reply("–ú–∞–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
    data = "üîã–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∏—Ç–∫–æ–∏–Ω —Ñ–µ—Ä–º—ã:\n"
    a = time.time()
    b = time.mktime(profile.last_btc_payout.timetuple())
    d = str(datetime.datetime.now() - profile.last_btc_payout).split(':')
    res = (a - b) // 86400
    data += f"‚ôª–§–µ—Ä–º–∞: {profile.other.name} (–∫–æ–ª-–≤–æ: {profile.btcamount})\n"
    data += f"‚åõ–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {d[0]}hours, {d[1]}minutes\n"
    data += f"üìà –°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã: {(profile.other.moneymin / 10) * profile.btcamount}‚Çø/–¥–µ–Ω—å\n"
    data += f"üí∞ –¢–µ–∫—É—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {round((profile.other.moneymin / 10) * res * profile.btcamount)}‚Çø\n"
    return await env.reply(data)


@plugin.on_startswith_text("–±–∏–∑–Ω–µ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def on_message(message, attachments, env):
    profile = await get_or_create_profile(message.from_id)
    if not profile.business:
        return await env.reply(f"–¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å, –≤–∞–º –Ω—É–∂–Ω–æ –µ–≥–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏.")
    if profile.business_start == 0:
        a = datetime.datetime.now().minute
        profile.last_bussiness_payout = datetime.datetime.now() + timedelta(minutes=-a)
        profile.business_start = 1
        await manager.update(profile)
        await env.reply("–†–∞–±–æ—Ç–∞ –±–∏–∑–Ω–µ—Å–∞ –∑–∞–ø—É—â–µ–Ω–∞.")
    data = "üíª–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–∏–∑–Ω–µ—Å–∞:\n"
    a = time.time()
    b = time.mktime(profile.last_bussiness_payout.timetuple())
    d = str(datetime.datetime.now() - profile.last_bussiness_payout).split(':')
    res = (a - b) // 86400
    if profile.business_materials == 0 or profile.business_materials + 1 < res:
        return await env.reply(
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å, –≤–∞–º —Å—Ç–æ–∏—Ç –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ.\n–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø–æ–ø–æ–ª–Ω—è—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –∏–Ω–∞—á–µ –≤–µ—Å—å –≤–∞—à –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –ø—Ä–æ–ø–∞–¥–µ—Ç.\n–ß—Ç–æ–±—ã –∏—Ö –ø–æ–ø–æ–ª–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ !–±–∏–∑–Ω–µ—Å –º–∞—Ç–µ—Ä–∏–∞–ª—ã [–∫–æ–ª-–≤–æ]')
    profile.business_materials -= int(res)
    await manager.update(profile)
    data += f"üè™–ë–∏–∑–Ω–µ—Å: {profile.business.name} (–∫–æ–ª-–≤–æ: {profile.business_amount})\n"
    data += f'üë®–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö: {profile.business.max_works * profile.business_amount}\n'
    data += f'üé´–ù–∞–ª–æ–≥: {humanize(profile.business.tax * res)}$\n'
    data += f'üì¶–ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Ö–≤–∞—Ç–∏—Ç –Ω–∞ {int(profile.business_materials)}–¥–Ω..\n'
    data += f"‚åõ–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {d[0]}hours, {d[1]}minutes\n"
    data += f"üìà–°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã: {humanize(profile.business.pay * profile.business_amount)}$/1–¥–Ω.\n"
    data += f"üí∞–¢–µ–∫—É—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {humanize(profile.business.pay * profile.business_amount * res)}$\n\n"
    data += '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –∑–∞—Ä–∞–±–æ—Ç–æ–∫, –≤–≤–µ–¥–∏—Ç–µ !–±–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å\n–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –≤–≤–µ–¥–∏—Ç–µ !–±–∏–∑–Ω–µ—Å –º–∞—Ç–µ—Ä–∏–∞–ª—ã [–∫–æ–ª-–≤–æ]'
    return await env.reply(data)


# –±–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å
@plugin.on_startswith_text("–±–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å")
async def on_message(message, attachments, env):
    profile = await get_or_create_profile(message.from_id)
    if not profile.business:
        return await env.reply(f"–¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å, –≤–∞–º –Ω—É–∂–Ω–æ –µ–≥–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏.")
    if profile.business_start == 0:
        return await env.reply("–≤–≤–µ–¥–∏—Ç–µ '!–±–∏–∑–Ω–µ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', —á—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–∏–∑–Ω–µ—Å–∞.")
    if not profile.last_bussiness_payout:
        a = datetime.datetime.now().minute
        profile.last_bussiness_payout = datetime.datetime.now() + timedelta(minutes=-a)
        await manager.update(profile)
    a = time.time()
    b = time.mktime(profile.last_bussiness_payout.timetuple())
    res = (a - b) // 86400
    if profile.business_materials + 1 < res:
        return await env.reply(
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å, –≤–µ—Å—å –≤–∞—à –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞–±—Ä–∞–ª–∞ –º–∞—Ñ–∏—è.\n–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –≤–æ–≤—Ä–µ–º—è –ø–æ–ø–æ–ª–Ω—è–π—Ç–µ –∏—Ö.\n–ß—Ç–æ–±—ã –∏—Ö –ø–æ–ø–æ–ª–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ #–±–∏–∑–Ω–µ—Å –º–∞—Ç–µ—Ä–∏–∞–ª—ã [–∫–æ–ª-–≤–æ]')
    if profile.business.pay * res <= 0:
        return await env.reply("–í—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ :c")
    pay = random.randint(1000, 2000)
    mafia = random.randint(2000, 4000)
    tax = (profile.business.tax * profile.business_amount * res) + (
            pay * profile.business.max_works * profile.business_amount * profile.business.works_pay_type) + profile.business.mafia_type * mafia
    profile.business_materials -= int(res)
    profile.money += Decimal(profile.business.pay * res * profile.business_amount) - Decimal(tax)
    profile.tt = time.time()
    profile.minercheck = 0
    a = datetime.datetime.now().minute
    profile.last_bussiness_payout = datetime.datetime.now() + timedelta(minutes=-a)
    await manager.update(profile)
    return await env.reply(
        f"üí∞–ß–∏—Å—Ç—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {humanize(profile.business.pay * res * profile.business_amount)}$\nüí∏–í—ã–ø–ª–∞—á–µ–Ω–æ –º–∞—Ñ–∏–∏: {humanize(profile.business.mafia_type * mafia)}$\nüí≥–ó–∞—Ä–ø–ª–∞—Ç–∞ —Ä–∞–±–æ—á–∏–º: {humanize(pay * profile.business.max_works * profile.business_amount * profile.business.works_pay_type)}$\nüé´–ù–∞–ª–æ–≥–∏: {humanize(profile.business.tax * profile.business_amount * res)}$\nüí±–ò—Ç–æ–≥: {humanize((profile.business.pay * res * profile.business_amount) - tax)}$.\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–∏–∑–Ω–µ—Å–∞ –∫–æ–º–∞–Ω–¥–æ–π '!–±–∏–∑–Ω–µ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'.")


@plugin.on_startswith_text("–±–∏–∑–Ω–µ—Å –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def on_message(message, attachments, env):
    profile = await get_or_create_profile(message.from_id)
    if not profile.business:
        return await env.reply(f"–¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å, –≤–∞–º –Ω—É–∂–Ω–æ –µ–≥–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏.")

    if len(env['args']) < 1:
        return await env.reply(
            f"–ù–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ (1=1–¥–Ω)? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !–±–∏–∑–Ω–µ—Å –º–∞—Ç–µ—Ä–∏–∞–ª—ã [–∫–æ–ª-–≤–æ] –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")

    amount = env['args'][0]
    if not amount.isdigit():
        return await env.reply('–°—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.')
    if profile.money < int(amount) * profile.business.materials_price:
        return await env.reply(
            f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ 1–¥–Ω. –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –æ–±–æ–π–¥–µ—Ç—Å—è –∑–∞ {humanize(profile.business.materials_price)}$)')
    profile.money -= int(amount) * profile.business.materials_price
    a = datetime.datetime.now().minute
    if profile.business_materials <= 1:
        profile.last_bussiness_payout = datetime.datetime.now() + timedelta(minutes=-a)
    profile.business_materials += int(amount)
    await manager.update(profile)
    return await env.reply(
        f'–í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ {int(amount)}–¥–Ω. –∑–∞ {humanize(int(amount) * profile.business.materials_price)}$.')


@plugin.on_startswith_text("—ç–∫–æ–Ω–æ–º–∏–∫–∞ –ø–æ–º–æ—â—å")
async def on_message(message, attachments, env):
    vk_message = '''–ö–æ–º–∞–Ω–¥—ã —ç–∫–æ–Ω–æ–º–∏–∫–∏:
- üìí!–ø—Ä–æ—Ñ–∏–ª—å <id> - –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
- ‚ôª!–º–∞–π–Ω–µ—Ä <—Å–Ω—è—Ç—å> - —Å–Ω—è—Ç—å/–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –º–∞–π–Ω–µ—Ä–∞.
- üõç!—Ç–æ–≤–∞—Ä—ã - —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤.
- üí∏!–ø—Ä–æ–¥–∞—Ç—å [–ø—Ä–µ–¥–º–µ—Ç(–¥–æ–º, –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏ —Ç.–¥)] - –ø—Ä–æ–¥–∞–∂–∞ –∏–º—É—â–µ—Å—Ç–≤–∞.
- ü§ù!–ø–µ—Ä–µ–¥–∞—Ç—å [id] [—Å—É–º–º–∞] - –ø–µ—Ä–µ–¥–∞—á–∞ –¥–µ–Ω–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
- üåê!–±–∏—Ç–∫–æ–∏–Ω –∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å/–ø–µ—Ä–µ–¥–∞—Ç—å [–∫–æ–ª-–≤–æ] - –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∏—Ç–∫–æ–∏–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
- üëë!—Ä–µ–π—Ç–∏–Ω–≥ <–∫–æ–ª-–≤–æ> - –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏/—É–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥.
- üèÜ!—Å–ø–∏—Å–æ–∫ –±–æ–≥–∞—á–µ–π - —Ä–µ–π—Ç–∏–Ω–≥ —Å–∞–º—ã—Ö –±–æ–≥–∞—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
- üí∞!–±–∞–Ω–∫ [–≤–ª–æ–∂–∏—Ç—å (—Å—É–º–º–∞)/—Å–Ω—è—Ç—å (—Å—É–º–º–∞)/–±–∞–ª–∞–Ω—Å] - –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–Ω–∫–æ–≤—Å–∫–∏–º —Å—á–µ—Ç–æ–º.
- üè™!–±–∏–∑–Ω–µ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞/—Å–Ω—è—Ç—å/–º–∞—Ç–µ—Ä–∏–∞–ª—ã - –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∏–∑–Ω–µ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
\n\n–ê—Ä–≥—É–º–µ–Ω—Ç—ã –≤ \"<>\" - –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.'''
    return await env.reply(vk_message)
