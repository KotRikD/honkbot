from kutana import Plugin
from database import *
from utils import check_admin, ddict, edict, parse_user_id, plural_form, priviligeshelper
import time
import datetime

plugin = Plugin(name="–ê–∫—Ç–∏–≤—ã —á–∞—Ç–∞", cmds=[{'command': '–∞–∫—Ç–∏–≤ <–∫–æ–ª-–≤–æ –¥–Ω–µ–π>', 'desc': '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª—é–¥–µ–π –≤ —á–∞—Ç–µ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏!'},
                                          {'command': '–∫–∏–∫ <–∏–º—è>', 'desc': '–∫–∏–∫–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞ —Å —á–∞—Ç–∞'}])


@plugin.on_startswith_text("–∞–∫—Ç–∏–≤")
async def active_chat(message, attachments, env):
    if not env.eenv.is_multichat or not env.eenv.meta_data:
        return await env.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω–∞–¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –±–µ—Å–µ–¥–µ –∏ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")

    data_users = await ddict(await env.eenv.dbredis.get(f"honoka:active_users_multichat:{message.peer_id}"))
    if not data_users or data_users and len(data_users['users'])<1:
        return await env.reply("–ü–æ–∫–∞ —É –º–µ–Ω—è –Ω–µ—Ç—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–±—è.")

    active_in = 1
    one_day_is = 86400
    if env['args'] and env['args'][0].isdigit():
        active_in = int(env['args'][0])

    time_to_search_from = int(time.time())-(active_in*one_day_is)
    appended = []
    keys_to_delete = []
    for (k, v) in data_users['users'].items():
        if not v <= time_to_search_from:
            appended.append({'user_id': k, 'user_time': v})
            keys_to_delete.append(k)

    for x in keys_to_delete:
        del(data_users['users'][x])

    appended = sorted(appended, key=lambda d:(d['user_time']))
    for (k, v) in data_users['users'].items():
        appended.append({'user_id': v, 'user_time': None})

    user_ids = [str(x['user_id']) for x in appended]
    users = await env.request("users.get", user_ids=','.join(user_ids), fields="first_name,last_name")
    if users and users.response:
        pos = 0
        for x in users.response:
            appended[pos]['user_name'] = f"[id{x['id']}|{x['first_name']} {x['last_name']}]"
            pos+=1

    now = datetime.datetime.now()
    active_result = []
    non_active_result = []
    for x in appended:
        if not x['user_time']:
            non_active_result.append(f"üè≥‚ÄçüåàÔ∏è {x['user_name']} - –ø–∞—Å—Å–∏–≤")

        if type(None) == type(x['user_time']):
            continue
        user_time = now-datetime.datetime.fromtimestamp(x['user_time'])
        seconds = user_time.total_seconds()
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)

        if minutes<4:
            active_result.append(f"üåù‚úå {x['user_name']} - –∞–∫—Ç–∏–≤")
            continue

        if hours>=23:
            non_active_result.append(f"üè≥‚ÄçüåàÔ∏è {x['user_name']} - –ø–∞—Å—Å–∏–≤")
            continue

        active_result.append(f"üåö‚úå {x['user_name']} - {hours} —á–∞c–æ–≤ {minutes} –º–∏–Ω—É—Ç")

    formatted = ""
    formatted += '\n'.join(active_result)
    formatted += '\n'.join(non_active_result)
    return await env.reply(
        "–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö/–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ\n"
        f"{ formatted }"
        f"\n\n–î–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ { active_in } { plural_form(active_in, ('–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π')) }.\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∞–∫—Ç–∏–≤ –∑–∞ –±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –≤–≤–µ–¥–∏—Ç–µ !–∞–∫—Ç–∏–≤ '–∫–æ–ª-–≤–æ –¥–Ω–µ–π'"
    )

@plugin.on_startswith_text("–∫–∏–∫")
async def kick_from_chat(message, attachments, env):
    if not env.eenv.is_multichat or not env.eenv.meta_data:
        return await env.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω–∞–¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –±–µ—Å–µ–¥–µ –∏ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")

    is_admin = await check_admin(message, env, message.peer_id, message.from_id)
    if is_admin or message.from_id == 311572436:
        usc = await parse_user_id(message, env, custom_text=' '.join(env['args']) if len(env['args'])>0 else None)
        if not usc:
            return await env.reply("–Ø –Ω–µ –Ω–∞—à–ª–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        a = await env.request("messages.removeChatUser", user_id=usc[0], chat_id=message.peer_id-2000000000)
        return await env.reply("–ü–æ–∫–∞, –ø–æ–∫–∞. ")
    else:
        return await env.reply("–¢—ã –Ω–µ –∞–¥–º–∏–Ω –±–µ—Å–µ–¥—ã!")
