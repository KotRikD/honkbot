from kutana import Plugin
from kutana.controller_vk import VKController
import random
from utils import priviligeshelper
from utils import static_text, parse_user_id

plugin = Plugin(name="–ß–µ–∫–Ω–∏",
                cmds=[{'command': '—á–µ–∫–Ω–∏', 'desc': '—á–µ–∫–∞–µ—Ç –≤–∞—à–∏ –≥–æ–≤–Ω–æ-–ø–∞–±–ª–∏–∫–∏'},
                      {'command': '—á–µ–∫–Ω–∏ <id>', 'desc': '—á–µ–∫–∞–µ—Ç –≥–æ–≤–Ω–æ-–ø–∞–±–ª–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'vip': True}])

tokens = ["token array"]

bad_groups = '''–º—É–∑—ã–∫–∞
–∫–∏–Ω–æ
–º–∞–Ω–∏—è
igm
mdk
—ë–ø
–ª–µ–ø—Ä–∞
–±–æ—Ä—â
–∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—è
–ª–∞–π—Ñ—Ö–∞–∫
—é–º–æ—Ä
–Ω–∞—É–∫–∞
—Ñ–∞–∫—Ç—ã
–ø—Ä–∏–∫–æ–ª—ã
–∫—É–ª–∏–Ω–∞—Ä–∏
—á—ë—Ç–∫–∏–µ
–ª–∞–π—Ñ—Ö–∞–∫
—Ä—ç–ø
–ø–æ–¥—Å–ª—É—à–∞–Ω–æ
—é–º–æ—Ä
auto
–∞–≤—Ç–æ
–±–æ—Ç
–º—ã—Å–ª–∏
—Ü–∏—Ç–∞—Ç—ã
–∞–Ω–µ–∫–¥–æ—Ç
–∏–¥–µ–π
—É–ª—ã–±–Ω—É–ª–æ
–ø–æ–∑–∏—Ç–∏–≤
—Ñ—É—Ç–±–æ–ª
football
—Å–µ—Ä–≤–µ—Ä
minecraft
–º–∞–π–Ω–∫—Ä–∞—Ñ—Ç
—è–ø–æ–Ω–∏—è
tumblr
–∞–Ω–∏–º–µ
anime
—Å–µ–π—é
–ª–∞—É–Ω—á–µ—Ä
–¥–∞–≤–Ω–æ –Ω–µ –¥–µ—Ç–∏
–Ω–µ–ø–∞–±–ª–∏–∫
—Ñ–æ—Ç–æ—à–æ–ø
–ø–∑–¥—Ü
aliexpress
–≥–∏—Ñ–∫–∏
gif
–≤–∏–¥–µ–æ
–ª–æ–ª–∏
loli
–∫—É–Ω
kun
vkcoin
-coin
coin'''.splitlines()

@plugin.on_startswith_text("—á–µ–∫–Ω–∏")
async def check(message, attachments, env):
    user_id = message.from_id
    if env['args']:
        if not await priviligeshelper.getUserPriviliges(env, message.from_id) & priviligeshelper.USER_VIP > 0:
            return await env.reply(static_text.need_vip)

        user_id = await parse_user_id(message, env, custom_text=env['args'][0])
        if not user_id:
            return await env.reply("–ú—ã –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        user_id = user_id[0]

    async with VKController(random.choice(tokens)) as user_api:
        datad = await user_api.raw_request('groups.get', user_id=user_id, extended=1)
        list_groups = datad.response

    if datad.error:
        return await env.reply("–Ω–µ –º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

    bad_groups_ids = []
    res = False
    for x in list_groups['items']:
        for d in bad_groups:
            if x['name'].lower().find(d) != -1:
                res = True

        if res == True:
            bad_groups_ids.append(f"{x['name']}")
            res = False

    if len(bad_groups_ids) < 1:
        koficient = 0.00
    else:
        kof1 = int(list_groups['count']) / len(bad_groups_ids)
        koficient = 100 / kof1

    result = ""
    if koficient < 5.00:
        result += ";3 –î–µ–≤—Å—Ç–≤–µ–Ω–Ω–æ —á–∏—Å—Ç\n"
    else:
        result += "üöÆ–ë–∏–æ–º—É—Å–æ—Ä\n"

    result += f"üëâ–ö–æ—ç—Ñ–∏—Ü–∏–µ–Ω—Ç –º—É—Å–æ—Ä–∞: ~{int(koficient)}% ({len(bad_groups_ids)}/{int(list_groups['count'])})"
    result += f"\n\nüí© –í–æ–Ω—è–µ—Ç –æ—Ç:\n"

    for x in bad_groups_ids:
        result += f"{x}\n"

    return await env.reply(result)