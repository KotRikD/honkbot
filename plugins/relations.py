from kutana import Plugin
import re
import asyncio
from database import *
import random
from utils import parse_user_id, VKKeyboard, get_nekos_attach

plugin = Plugin(name="–û—Ç–Ω–æ—à–µ–Ω–∏—è", cmds=[{'command': '–æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è <id>', 'desc': '–Ω–∞—á–∞—Ç—å –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è —Å <id>'},
                                        {'command': '–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å', 'desc': '–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å —Å–≤–æ—é –¥–µ–≤—É—à–∫—É/–ø–∞—Ä–Ω—è'},
                                        {'command': '–æ—Ç–Ω–æ—à–µ–Ω–∏—è –æ–±–Ω—è—Ç—å', 'desc': '–æ–±–Ω—è—Ç—å —Å–≤–æ—é –¥–µ–≤—É—à–∫—É/–ø–∞—Ä–Ω—è'},
                                        {'command': '–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø–æ–≥–ª–∞–¥–∏—Ç—å', 'desc': '–ø–æ–≥–ª–∞–¥–∏—Ç—å —Å–≤–æ—é –¥–µ–≤—É—à–∫—É/–ø–∞—Ä–Ω—è'},
                                        {'command': '–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø–æ—Ä–≤–∞—Ç—å', 'desc': '–ø–æ—Ä–≤–∞—Ç—å —Å –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏'},
                                        {'command': '–æ—Ç–Ω–æ—à–µ–Ω–∏—è –∑–∞–Ω—è—Ç—å—Å—è —Å–µ–∫—Å–æ–º', 'desc': '–Ω—É —Ç—É—Ç —è –¥—É–º–∞—é –≤—ã –≤—Å—ë –ø–æ–Ω—è–ª–∏ ;D'},
                                        {'command': '–æ—Ç–Ω–æ—à–µ–Ω–∏—è —à–ª—ë–ø–Ω—É—Ç—å', 'desc': '—à–ª—ë–ø–Ω—É—Ç—å —Å–≤–æ–µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –ø–æ –ø–æ–ø–µ ;D'},
                                        {'command': '–æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏–Ω—Ñ–∞', 'desc': '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö'}])

relationtemp = {}

@plugin.on_startswith_text("–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å")
async def on_message(message, attachments, env):
    idl = await get_or_none(Relations, user1=int(message.from_id))
    if not idl:
        return await env.reply("–û—Ç–Ω–æ—à–µ–Ω–∏—è: –£ —Ç–µ–±—è –ø–∞—Ä–Ω—è/–¥–µ–≤—É—à–∫–∏ –Ω–µ—Ç.")

    kb = VKKeyboard()
    kb.lazy_buttons({
        'inline': True,
        'buttons': [
            {'text': 'üíñ –ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑', 'payload': {'command': f'{env.eenv.prefix}–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å'}, 'color': 'positive'}
        ]
    })

    userinfo = await env.request('users.get', user_ids=f'{idl.user1}, {idl.user2}', fields="sex")
    userinfo = userinfo.response
    suptext = '–ø–æ—Ü–µ–ª–æ–≤–∞–ª —Å–≤–æ—é —Ç—è–Ω' if userinfo[0]['sex'] == 2 else '–ø–æ—Ü–µ–ª–æ–≤–∞–ª–∞ —Å–≤–æ–µ–≥–æ –∫—É–Ω–∞'
    await env.reply(f"[id{userinfo[0]['id']}|{userinfo[0]['first_name']} {userinfo[0]['last_name']}] { suptext } [id{userinfo[1]['id']}|{userinfo[1]['first_name']} {userinfo[1]['last_name']}]", 
                    keyboard=kb.dump_keyboard(),
                    attachment=await get_nekos_attach(env, "kiss"))

@plugin.on_startswith_text("–æ—Ç–Ω–æ—à–µ–Ω–∏—è –æ–±–Ω—è—Ç—å")
async def on_message(message, attachments, env):
    idl = await get_or_none(Relations, user1=int(message.from_id))
    if not idl:
        return await env.reply("–û—Ç–Ω–æ—à–µ–Ω–∏—è: –£ —Ç–µ–±—è –ø–∞—Ä–Ω—è/–¥–µ–≤—É—à–∫–∏ –Ω–µ—Ç.")

    kb = VKKeyboard()
    kb.lazy_buttons({
        'inline': True,
        'buttons': [
            {'text': 'üíë –æ–±–Ω—è—Ç—å –µ—â—ë —Ä–∞–∑', 'payload': {'command': f'{env.eenv.prefix}–æ—Ç–Ω–æ—à–µ–Ω–∏—è –æ–±–Ω—è—Ç—å'}, 'color': 'positive'}
        ]
    })
    userinfo = await env.request('users.get', user_ids=f'{idl.user1}, {idl.user2}', fields="sex")
    userinfo = userinfo.response
    suptext = '–æ–±–Ω—è–ª —Å–≤–æ—é —Ç—è–Ω' if userinfo[0]['sex'] == 2 else '–æ–±–Ω—è–ª–∞ —Å–≤–æ–µ–≥–æ –∫—É–Ω–∞'
    await env.reply(f"[id{userinfo[0]['id']}|{userinfo[0]['first_name']} {userinfo[0]['last_name']}] { suptext } [id{userinfo[1]['id']}|{userinfo[1]['first_name']} {userinfo[1]['last_name']}]", 
                    keyboard=kb.dump_keyboard(),
                    attachment=await get_nekos_attach(env, random.choice(['hug', 'cuddle'])))


@plugin.on_startswith_text("–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø–æ–≥–ª–∞–¥–∏—Ç—å")
async def on_message(message, attachments, env):
    idl = await get_or_none(Relations, user1=int(message.from_id))
    if not idl:
        return await env.reply("–û—Ç–Ω–æ—à–µ–Ω–∏—è: –£ —Ç–µ–±—è –ø–∞—Ä–Ω—è/–¥–µ–≤—É—à–∫–∏ –Ω–µ—Ç.")

    kb = VKKeyboard()
    kb.lazy_buttons({
        'inline': True,
        'buttons': [
            {'text': 'üíë –ø–æ–≥–ª–∞–¥–∏—Ç—å –µ—â—ë —Ä–∞–∑', 'payload': {'command': f'{env.eenv.prefix}–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø–æ–≥–ª–∞–¥–∏—Ç—å'}, 'color': 'positive'}
        ]
    })
    userinfo = await env.request('users.get', user_ids=f'{idl.user1}, {idl.user2}', fields="sex")
    userinfo = userinfo.response
    suptext = '–ø–æ–≥–ª–∞–¥–∏–ª —Å–≤–æ—é —Ç—è–Ω' if userinfo[0]['sex'] == 2 else '–ø–æ–≥–ª–∞–¥–∏–ª–∞ —Å–≤–æ–µ–≥–æ –∫—É–Ω–∞'
    await env.reply(f"[id{userinfo[0]['id']}|{userinfo[0]['first_name']} {userinfo[0]['last_name']}] { suptext } [id{userinfo[1]['id']}|{userinfo[1]['first_name']} {userinfo[1]['last_name']}]", 
                    keyboard=kb.dump_keyboard(),
                    attachment=await get_nekos_attach(env, 'pat'))


@plugin.on_startswith_text("–æ—Ç–Ω–æ—à–µ–Ω–∏—è —à–ª—ë–ø–Ω—É—Ç—å")
async def slap(msg, att, env):
    idl = await get_or_none(Relations, user1=int(msg.from_id))
    if not idl:
        return await env.reply("–û—Ç–Ω–æ—à–µ–Ω–∏—è: –£ —Ç–µ–±—è –ø–∞—Ä–Ω—è/–¥–µ–≤—É—à–∫–∏ –Ω–µ—Ç.")

    kb = VKKeyboard()
    kb.lazy_buttons({
        'inline': True,
        'buttons': [
            {'text': 'üíü —à–ª—ë–ø–Ω—É—Ç—å –µ—â—ë —Ä–∞–∑', 'payload': {'command': f'{env.eenv.prefix}–æ—Ç–Ω–æ—à–µ–Ω–∏—è —à–ª—ë–ø–Ω—É—Ç—å'}, 'color': 'positive'}
        ]
    })

    userinfo = await env.request('users.get', user_ids=f'{idl.user1}, {idl.user2}', fields="sex")
    userinfo = userinfo.response
    suptext = '—à–ª—ë–ø–Ω—É–ª —Å–≤–æ—é —Ç—è–Ω –ø–æ –ø–æ–ø–µ' if userinfo[0]['sex'] == 2 else '—à–ª—ë–ø–Ω—É–ª–∞ –ø–æ –ø–æ–ø–µ —Å–≤–æ–µ–≥–æ –∫—É–Ω–∞'
    await env.reply(f"[id{userinfo[0]['id']}|{userinfo[0]['first_name']} {userinfo[0]['last_name']}] { suptext } [id{userinfo[1]['id']}|{userinfo[1]['first_name']} {userinfo[1]['last_name']}]\nüòúüòúüòúüëãüëã &#128075;&#127825;", 
                    keyboard=kb.dump_keyboard(),
                    attachment=await get_nekos_attach(env, 'slap'))

@plugin.on_startswith_text("–æ—Ç–Ω–æ—à–µ–Ω–∏—è –∑–∞–Ω—è—Ç—å—Å—è —Å–µ–∫—Å–æ–º")
async def on_message(message, attachments, env):
    idl = await get_or_none(Relations, user1=int(message.from_id))
    if not idl:
        return await env.reply("–û—Ç–Ω–æ—à–µ–Ω–∏—è: –£ —Ç–µ–±—è –ø–∞—Ä–Ω—è/–¥–µ–≤—É—à–∫–∏ –Ω–µ—Ç.")

    kb = VKKeyboard()
    kb.lazy_buttons({
        'inline': True,
        'buttons': [
            {'text': 'üíü –∑–∞–Ω—è—Ç—å—Å—è —Å–µ–∫—Å–æ–º –µ—â—ë —Ä–∞–∑', 'payload': {'command': f'{env.eenv.prefix}–æ—Ç–Ω–æ—à–µ–Ω–∏—è –∑–∞–Ω—è—Ç—å—Å—è —Å–µ–∫—Å–æ–º'}, 'color': 'positive'}
        ]
    })
    userinfo = await env.request('users.get', user_ids=f'{idl.user1}, {idl.user2}', fields="sex")
    userinfo = userinfo.response
    suptext = '–∑–∞–Ω—è–ª—Å—è —Å–µ–∫—Å–æ–º —Å–æ —Å–≤–æ–µ—é —Ç—è–Ω–∫–æ–π' if userinfo[0]['sex'] == 2 else '–∑–∞–Ω—è–ª–∞—Å—å —Å–µ–∫—Å–æ–º —Å —Å–≤–æ–∏–º –∫—É–Ω–æ–º'
    await env.reply(f"[id{userinfo[0]['id']}|{userinfo[0]['first_name']} {userinfo[0]['last_name']}] { suptext } [id{userinfo[1]['id']}|{userinfo[1]['first_name']} {userinfo[1]['last_name']}]\nüòúüòúüòúüëâüëåüí¶üí¶üí¶", 
                    keyboard=kb.dump_keyboard(),
                    attachment=await get_nekos_attach(env, random.choice(['classic', 'boobs'])))

@plugin.on_startswith_text("–æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è")
async def on_message(message, attachments, env):
    idl = await get_or_none(Relations, user1=int(message.from_id))

    if not env['args']:
        return await env.reply("–û—Ç–Ω–æ—à–µ–Ω–∏—è: –° –∫–µ–º –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è —Ç–∞ –±—É–∏—à—å?")

    usera = idl
    if not usera:
        usc = await parse_user_id(message, env)
        if usc:
            if await get_or_none(Relations, user1=usc[0]):
                return await env.reply("–û—Ç–Ω–æ—à–µ–Ω–∏—è: –û–Ω/–û–Ω–∞ —É–∂–µ —Å –∫–µ–º-—Ç–æ.")

            sex = await env.request('users.get', user_ids=f'{usc[0]},{message.from_id}', fields='sex')
            sex = sex.response
            if usc[0] == message.from_id:
                return await env.reply("–û—Ç–Ω–æ—à–µ–Ω–∏—è: –ê, –∫–∞–∫ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è —á—ë—Ç —è —Ö–∑.")

            kb = VKKeyboard()
            kb.set_inline(True)
            kb.add_row()
            kb.edit_row(0).add_button("üíù –°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è", payload={'command': f"{env.eenv.prefix}–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—å"}, color="positive")
            kb.add_row()
            kb.edit_row(1).add_button("üíò –û—Ç–∫–∞–∑–∞—Ç—å", payload={'command': f"{env.eenv.prefix}–æ—Ç–Ω–æ—à–µ–Ω–∏—è –æ—Ç–∫–∞–∑–∞—Ç—å"}, color="negative")

            r = await env.request('messages.send', keyboard=kb.dump_keyboard(), user_id=usc[0], message=f"–û—Ç–Ω–æ—à–µ–Ω–∏—è: [id{usc[0]}|{sex[0]['first_name']}], —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª(-–∞) –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è [id{message.from_id}|{sex[1]['first_name']} {sex[1]['last_name']}]\n–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '!–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—å' –∏–ª–∏ '!–æ—Ç–Ω–æ—à–µ–Ω–∏—è –æ—Ç–∫–∞–∑–∞—Ç—å', —É –≤–∞—Å 120 —Å–µ–∫—É–Ω–¥")
            if not r.error:
                await env.reply("–û—Ç–Ω–æ—à–µ–Ω–∏—è: –ù—É —è –Ω–∞–ø–∏—Å–∞–ª –∂–¥—ë–º—Å 120 —Å–µ–∫—É–Ω–¥")
            else:
                return await env.reply("–û—Ç–Ω–æ—à–µ–Ω–∏—è: –õ–∏—á–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞\n–ß–µ–ª–æ–≤–µ–∫ —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É –≤ –ª—Å vk.me/honkbot")

            relationtemp[f'{str(usc[0])}'] = message.from_id
            await asyncio.sleep(120)
            if str(usc[0]) in relationtemp:
                await env.reply("–û—Ç–Ω–æ—à–µ–Ω–∏—è: –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–æ—à–ª–æ 120 —Å–µ–∫—É–Ω–¥, –∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–æ.")
                await env.request('messages.send', user_id=env['args'], message=f"–û—Ç–Ω–æ—à–µ–Ω–∏—è: –û—Ç–º–µ–Ω–∞.....")

                del(relationtemp[f'{str(usc[0])}'])
        else:
            return await env.reply("–û—Ç–Ω–æ—à–µ–Ω–∏—è: –í—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —á–µ–ª–æ–≤–µ–∫–µ.")
    else:
        return await env.reply("–û—Ç–Ω–æ—à–µ–Ω–∏—è: –ê –∏–∑–º–µ–Ω—è—Ç—å –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ, —è —Å–ª—ã—à–∞–ª–∞.")

@plugin.on_startswith_text("–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø–æ—Ä–≤–∞—Ç—å")
async def on_message(message, attachments, env):
    idl = await get_or_none(Relations, user1=int(message.from_id))
    if not idl:
        return await env.reply("–û—Ç–Ω–æ—à–µ–Ω–∏—è: –£ —Ç–µ–±—è –ø–∞—Ä–Ω—è/–¥–µ–≤—É—à–∫–∏ –Ω–µ—Ç –∫–∞–∫ —è –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å.")

    await env.reply("–û—Ç–Ω–æ—à–µ–Ω–∏—è: –ù–∞–¥–µ—é—Å—å, —Ç—ã –ø—Ä–∏–Ω—è–ª –Ω—É–∂–Ω–æ—ë —Ä–µ—à–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–¥....")

    userlovedestroy = idl.user2
    await manager.execute(Relations.delete().where(Relations.user1 == int(message.from_id)))
    await manager.execute(Relations.delete().where(Relations.user2 == int(message.from_id)))
    await env.request('messages.send', user_id=userlovedestroy, message='–û—Ç–Ω–æ—à–µ–Ω–∏—è: –£–≤–µ–¥–æ–º–ª—è—é –≤–∞—Å –æ —Ç–æ–º, —á—Ç–æ –≤–∞—à–∞ —Ç—è–Ω/–∫—É–Ω –æ–∫–æ–Ω—á–∏–ª–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è.')
    return await env.reply("–û—Ç–Ω–æ—à–µ–Ω–∏—è: –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å –±—ã–ª–∞ —Å—Ç—ë—Ä—Ç–∞.")


@plugin.on_startswith_text("–æ—Ç–Ω–æ—à–µ–Ω–∏—è")
async def on_message(message, attachments, env):
    idl = await get_or_none(Relations, user1=int(message.from_id))
    if not env['args']:
        await env.reply(f"–ê—Ä–≥—É–º–µ–Ω—Ç—ã:\n"
                                f"–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—å - –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\n"
                                f"–æ—Ç–Ω–æ—à–µ–Ω–∏—è –æ—Ç–∫–∞–∑–∞—Ç—å - –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n"
                                f"–æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏–Ω—Ñ–∞ - –∏–Ω—Ñ–∞ –æ–± —Ç–≤–æ–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö")
        return "GOON"

    if env['args'][0].lower() == "–∏–Ω—Ñ–∞":
        if not idl:
            return await env.reply("–û—Ç–Ω–æ—à–µ–Ω–∏—è: –£ —Ç–µ–±—è –ø–∞—Ä–Ω—è/–¥–µ–≤—É—à–∫–∏ –Ω–µ—Ç.")

        relays = idl
        info = await env.request('users.get', user_ids=relays.user2, fields='sex')
        info = info.response

        user1, user2 = await get_or_none(PxUser, iduser=message.from_id), await get_or_none(PxUser, iduser=relays.user2)
        if not user1:
            return env.reply("[–û—Ç–Ω–æ—à–µ–Ω–∏—è] –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ !rank –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        if not user2:
            return env.reply("[–û—Ç–Ω–æ—à–µ–Ω–∏—è] –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ —Å–≤–æ–µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –ø—Ä–æ–ø–∏—Å–∞—Ç—å !rank, —á—Ç–æ–±—ã –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–Ω–æ—à–µ–Ω–∏–π")

        kb = VKKeyboard()
        kb.set_inline(True)
        if not env.eenv.is_multichat:
            kb.add_row()
            kb.edit_row(0).add_button("–ü–æ—Ä–≤–∞—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è", payload={'command': f"{env.eenv.prefix}–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø–æ—Ä–≤–∞—Ç—å"}, color="negative")

        xpuser1 = user1.xpcount
        xpuser2 = user2.xpcount
        allcount = int(xpuser1) + int(xpuser2)

        mxpuser1 = user1.messcount
        mxpuser2 = user2.messcount
        mess = int(mxpuser1) + int(mxpuser2)

        strdt = datetime.datetime.fromtimestamp(relays.datetime).strftime('%Y-%m-%d %H:%M:%S')

        if info[0]['sex'] == 1:
            return await env.reply(f"üíû–¢–≤–æ—è —Ç—è–Ω: [id{info[0]['id']}|{info[0]['first_name']} {info[0]['last_name']}]\n"
                                    f"üí°–í–∞—à –æ–±—â–∏–π –æ–ø—ã—Ç: {allcount}xp\n"
                                    f"üìÆ–í–∞—à–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {mess}\n"
                                    f"üìÖ–ö–æ–≥–¥–∞ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: {strdt}", keyboard=kb.dump_keyboard())
        elif info[0]['sex'] == 2:
            return await env.reply(f"üíû–¢–≤–æ–π –∫—É–Ω: [id{info[0]['id']}|{info[0]['first_name']} {info[0]['last_name']}]\n"
                                    f"üí°–í–∞—à –æ–±—â–∏–π –æ–ø—ã—Ç: {allcount}xp\n"
                                    f"üìÆ–í–∞—à–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {mess}\n"
                                    f"üìÖ–ö–æ–≥–¥–∞ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: {strdt}", keyboard=kb.dump_keyboard())

    if str(message.from_id) in relationtemp:
        if env['args'][0].lower() == "–ø—Ä–∏–Ω—è—Ç—å":
            await env.request('messages.send', user_id=relationtemp[f'{str(message.from_id)}'], message=f"–û—Ç–Ω–æ—à–µ–Ω–∏—è: [id{relationtemp[f'{str(message.from_id)}']}|–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º], —Ç–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è–ª–∏.")
            await env.reply("–û—Ç–Ω–æ—à–µ–Ω–∏—è: –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç–µ–ø–µ—Ä—å –≤—ã –ø–∞—Ä–∞.")
            user_1 = relationtemp[f'{str(message.from_id)}']
            user_2 = message.from_id
            timestamp = int(datetime.datetime.now().timestamp())

            await peewee_async.create_object(Relations, user1=user_1, user2=user_2, datetime=timestamp)
            await peewee_async.create_object(Relations, user1=user_2, user2=user_1, datetime=timestamp)
            del(relationtemp[f'{str(message.from_id)}'])
        elif env['args'][0].lower() == "–æ—Ç–∫–∞–∑–∞—Ç—å":
            await env.reply("–û—Ç–Ω–æ—à–µ–Ω–∏—è: –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª–∏, –ø–æ–π–¥—É —Å–æ–æ–±—â—É —ç—Ç—É –≥—Ä—É—Å—Ç–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å —Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É, —á—å–∏ —á—É–≤—Å—Ç–≤–∞ –±—ã–ª–∏ —Ä–∞–∑–±–∏—Ç—ã.")
            await env.request('messages.send', user_id=relationtemp[f'{str(message.from_id)}'], message=f"–û—Ç–Ω–æ—à–µ–Ω–∏—è: [id{relationtemp[f'{str(message.from_id)}']}|–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é], —Ç–µ–±–µ –æ—Ç–∫–∞–∑–∞–ª–∏.")
            del(relationtemp[f'{str(message.from_id)}'])
    else:
        pass

    return "DONE"


